(module $fcntl
  (import "crt" "sp$" (global $crt:sp$ (mut i32)))
  (import "crt" "memory" (memory $crt:memory 0))
  (import "crt" "sp$" (global $crt:sp$ i32))
  (import "wasi_snapshot_preview1" "fd_advise" (func $wasi_snapshot_preview1:fd_advise (param i32) (param i64) (param i64) (param i32) (result i32)))
  (import "wasi_snapshot_preview1" "fd_allocate" (func $wasi_snapshot_preview1:fd_allocate (param i32) (param i64) (param i64) (result i32)))
  (import "wasi_snapshot_preview1" "fd_fdstat_get" (func $wasi_snapshot_preview1:fd_fdstat_get (param i32) (param i32) (result i32)))
  (import "wasi_snapshot_preview1" "fd_fdstat_set_flags" (func $wasi_snapshot_preview1:fd_fdstat_set_flags (param i32) (param i32) (result i32)))
  (import "wasi_snapshot_preview1" "fd_prestat_get" (func $wasi_snapshot_preview1:fd_prestat_get (param i32) (param i32) (result i32)))
  (import "wasi_snapshot_preview1" "fd_prestat_dir_name" (func $wasi_snapshot_preview1:fd_prestat_dir_name (param i32) (param i32) (param i32) (result i32)))
  (import "wasi_snapshot_preview1" "path_open" (func $wasi_snapshot_preview1:path_open (param i32) (param i32) (param i32) (param i32) (param i32) (param i64) (param i64) (param i32) (param i32) (result i32)))
  (import "stdlib" "calloc" (func $stdlib:calloc (param i32) (param i32) (result i32)))
  (import "stdlib" "free" (func $stdlib:free (param i32)))
  (import "stdlib" "malloc" (func $stdlib:malloc (param i32) (result i32)))
  (import "string" "memcpy" (func $string:memcpy (param i32) (param i32) (param i32) (result i32)))
  (import "string" "memcmp" (func $string:memcmp (param i32) (param i32) (param i32) (result i32)))
  (import "string" "strlen" (func $string:strlen (param i32) (result i32)))
  (import "errno" "errno" (global $errno:errno i32))
  (import "string" "strdup" (func $string:strdup (param i32) (result i32)))
  (global $fcntl:preopens (mut i32))
  (global $fcntl:num_preopens (mut i32))
  (global $fcntl:preopen_capacity (mut i32))
  (global $fcntl:preopens_populated (mut i32))
  (global $fcntl:preopen_sep (mut i32) (i32.const 47))
  (data $fcntl:ds10$ const align=1 ".\00")
  (func $fcntl:resize_preopens
    (result i32) 
    (local $start_capacity i32) (local $old_capacity i32) (local $new_capacity i32) (local $old_preopens i32) (local $new_preopens i32) 
    i32.const 4
    local.set $start_capacity
    global.get $fcntl:preopen_capacity
    local.tee $old_capacity
    i32.const 0
    i32.eq
    if (result i32)
    local.get $start_capacity
    else
    local.get $old_capacity
    i32.const 2
    i32.mul
    end
    local.set $new_capacity
    global.get $fcntl:preopens
    local.set $old_preopens
    i32.const 8
    local.get $new_capacity
    call $stdlib:calloc
    local.tee $new_preopens
    i32.const 0
    i32.eq
    if
    i32.const -1
    return
    end
    local.get $new_preopens
    local.get $old_preopens
    global.get $fcntl:num_preopens
    i32.const 8
    i32.mul
    call $string:memcpy
    drop
    local.get $new_preopens
    global.set $fcntl:preopens
    local.get $new_capacity
    global.set $fcntl:preopen_capacity
    local.get $old_preopens
    call $stdlib:free
    i32.const 0
    return
  )
  (func $fcntl:strip_prefixes
    (param $path i32) (result i32) 
    block $1$
    loop $2$
    i32.const 1
    if
    local.get $path
    i32.load8_s offset=0 align=1
    global.get $fcntl:preopen_sep
    i32.eq
    if
    local.get $path
    local.get $path
    i32.const 1
    i32.add
    local.set $path
    drop
    else
    local.get $path
    i32.load8_s offset=0 align=1
    i32.const 46
    i32.eq
    if (result i32)
    local.get $path
    i32.load8_s offset=1 align=1
    global.get $fcntl:preopen_sep
    i32.eq
    else
    i32.const 0
    end
    if
    local.get $path
    i32.const 2
    i32.add
    local.set $path
    else
    local.get $path
    i32.load8_s offset=0 align=1
    i32.const 46
    i32.eq
    if (result i32)
    local.get $path
    i32.load8_s offset=1 align=1
    i32.const 0
    i32.eq
    else
    i32.const 0
    end
    if
    local.get $path
    local.get $path
    i32.const 1
    i32.add
    local.set $path
    drop
    else
    br $1$
    end
    end
    end
    br $2$
    end
    end $2$
    end $1$
    local.get $path
    return
  )
  (func $fcntl:register_preopened_fd
    (param $fd i32) (param $relprefix i32) (result i32) 
    (local $prefix i32) (local $pp i32) (local $i1$ i32) (local $i2$ i32) 
    global.get $fcntl:num_preopens
    global.get $fcntl:preopen_capacity
    i32.eq
    if (result i32)
    call $fcntl:resize_preopens
    i32.const 0
    i32.ne
    else
    i32.const 0
    end
    if
    i32.const -1
    return
    end
    local.get $relprefix
    call $fcntl:strip_prefixes
    call $string:strdup
    local.tee $prefix
    i32.const 0
    i32.eq
    if
    i32.const -1
    return
    end
    global.get $fcntl:preopens
    global.get $fcntl:num_preopens
    global.get $fcntl:num_preopens
    i32.const 1
    i32.add
    global.set $fcntl:num_preopens
    i32.const 8
    i32.mul
    i32.add
    local.tee $pp
    local.tee $i1$
    local.get $prefix
    i32.store offset=0 align=4
    local.get $pp
    i32.const 4
    i32.add
    local.tee $i2$
    local.get $fd
    i32.store offset=0 align=4
    i32.const 0
    return
  )
  (func $fcntl:populate_preopens
    (result i32) 
    (local $fd i32) (local $ret i32) (local $prefix i32) (local $bp$ i32) (local $fp$ i32) (local $i1$ i32) 
    global.get $crt:sp$
    local.set $bp$
    global.get $crt:sp$
    i32.const 16
    i32.sub
    global.set $crt:sp$
    global.get $crt:sp$
    local.set $fp$
    global.get $fcntl:preopens_populated
    if
    i32.const 0
    local.get $bp$
    global.set $crt:sp$
    return
    end
    i32.const 1
    global.set $fcntl:preopens_populated
    block $2$
    i32.const 3
    local.set $fd
    loop $1$
    local.get $fd
    i32.const 0
    i32.ne
    i32.eqz
    br_if $2$
    block $3$
    local.get $fd
    local.get $fp$
    call $wasi_snapshot_preview1:fd_prestat_get
    local.tee $ret
    i32.const 65535
    i32.and
    i32.const 8
    i32.eq
    br_if $2$
    local.get $ret
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    if
    i32.const 1
    local.get $bp$
    global.set $crt:sp$
    return
    end
    local.get $fp$
    i32.load8_u offset=0 align=1
    i32.const 0
    i32.eq
    if
    local.get $fp$
    i32.load offset=4 align=4
    i32.const 1
    i32.add
    call $stdlib:malloc
    local.tee $prefix
    i32.eqz
    if
    i32.const 2
    local.get $bp$
    global.set $crt:sp$
    return
    end
    local.get $fd
    local.get $prefix
    local.get $fp$
    i32.load offset=4 align=4
    call $wasi_snapshot_preview1:fd_prestat_dir_name
    local.tee $ret
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    if
    i32.const 3
    local.get $bp$
    global.set $crt:sp$
    return
    end
    local.get $prefix
    local.get $fp$
    i32.load offset=4 align=4
    i32.add
    local.tee $i1$
    i32.const 0
    i32.store8 offset=0 align=1
    local.get $fp$
    i32.load offset=4 align=4
    i32.const 0
    i32.gt_u
    if (result i32)
    local.get $prefix
    local.get $fp$
    i32.load offset=4 align=4
    i32.const 1
    i32.sub
    i32.add
    i32.load8_s offset=0 align=1
    i32.const 92
    i32.eq
    else
    i32.const 0
    end
    if
    i32.const 92
    global.set $fcntl:preopen_sep
    end
    local.get $fd
    local.get $prefix
    call $fcntl:register_preopened_fd
    drop
    local.get $prefix
    call $stdlib:free
    end
    end $3$
    local.get $fd
    i32.const 1
    i32.add
    local.set $fd
    br $1$
    end $1$
    end $2$
    i32.const 0
    local.get $bp$
    global.set $crt:sp$
    return
  )
  (func $fcntl:prefix_matches
    (param $prefix i32) (param $prefix_len i32) (param $path i32) (result i32) 
    (local $i i32) (local $last i32) 
    local.get $path
    i32.load8_s offset=0 align=1
    global.get $fcntl:preopen_sep
    i32.ne
    if (result i32)
    local.get $prefix_len
    i32.const 0
    i32.eq
    else
    i32.const 0
    end
    if
    i32.const 1
    return
    end
    local.get $path
    local.get $prefix
    local.get $prefix_len
    call $string:memcmp
    i32.const 0
    i32.ne
    if
    i32.const 0
    return
    end
    local.get $prefix_len
    local.set $i
    block $1$
    loop $2$
    local.get $i
    i32.const 0
    i32.gt_u
    if (result i32)
    local.get $prefix
    local.get $i
    i32.const 1
    i32.sub
    i32.add
    i32.load8_s offset=0 align=1
    global.get $fcntl:preopen_sep
    i32.eq
    else
    i32.const 0
    end
    if
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    br $2$
    end
    end $2$
    end $1$
    local.get $path
    local.get $i
    i32.add
    i32.load8_s offset=0 align=1
    i32.extend8_s
    local.tee $last
    i32.extend8_s
    global.get $fcntl:preopen_sep
    i32.eq
    if (result i32)
    i32.const 1
    else
    local.get $last
    i32.extend8_s
    i32.const 0
    i32.eq
    end
    return
  )
  (func $fcntl:find_abspath
    (param $path i32) (param $abs_prefix i32) (param $relative_path i32) (result i32) 
    (local $match_len i32) (local $i i32) (local $fd i32) (local $pre i32) (local $prefix i32) (local $len i32) (local $computed i32) (local $i1$ i32) (local $i2$ i32) 
    block $1$
    loop $2$
    local.get $path
    i32.load8_s offset=0 align=1
    global.get $fcntl:preopen_sep
    i32.eq
    if
    local.get $path
    i32.const 1
    i32.add
    local.set $path
    br $2$
    end
    end $2$
    end $1$
    i32.const 0
    local.set $match_len
    i32.const -1
    local.set $fd
    block $4$
    global.get $fcntl:num_preopens
    local.set $i
    loop $3$
    local.get $i
    i32.const 0
    i32.gt_u
    i32.eqz
    br_if $4$
    block $5$
    global.get $fcntl:preopens
    local.get $i
    i32.const 1
    i32.sub
    i32.const 8
    i32.mul
    i32.add
    local.tee $pre
    i32.load offset=0 align=4
    local.tee $prefix
    call $string:strlen
    local.set $len
    local.get $fd
    i32.const -1
    i32.eq
    if (result i32)
    i32.const 1
    else
    local.get $len
    local.get $match_len
    i32.gt_u
    end
    if (result i32)
    local.get $prefix
    local.get $len
    local.get $path
    call $fcntl:prefix_matches
    else
    i32.const 0
    end
    if
    local.get $pre
    i32.load offset=4 align=4
    local.set $fd
    local.get $len
    local.set $match_len
    local.get $abs_prefix
    local.tee $i1$
    local.get $prefix
    i32.store offset=0 align=4
    end
    end $5$
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    br $3$
    end $3$
    end $4$
    local.get $fd
    i32.const -1
    i32.eq
    if
    i32.const 44
    global.set $errno:errno
    i32.const -1
    return
    end
    local.get $path
    local.get $match_len
    i32.add
    local.set $computed
    block $6$
    loop $7$
    local.get $computed
    i32.load8_s offset=0 align=1
    global.get $fcntl:preopen_sep
    i32.eq
    if
    local.get $computed
    i32.const 1
    i32.add
    local.set $computed
    br $7$
    end
    end $7$
    end $6$
    local.get $computed
    i32.load8_s offset=0 align=1
    i32.const 0
    i32.eq
    if
    ref.data $fcntl:ds10$
    local.set $computed
    end
    local.get $relative_path
    local.tee $i2$
    local.get $computed
    i32.store offset=0 align=4
    local.get $fd
    return
  )
  (func $fcntl:find_relpath (export "find_relpath")
    (param $path i32) (param $relative_path i32) (result i32) 
    (local $bp$ i32) (local $fp$ i32) 
    global.get $crt:sp$
    local.set $bp$
    global.get $crt:sp$
    i32.const 16
    i32.sub
    global.set $crt:sp$
    global.get $crt:sp$
    local.set $fp$
    global.get $fcntl:preopens_populated
    i32.eqz
    if
    call $fcntl:populate_preopens
    drop
    end
    local.get $path
    local.get $fp$
    local.get $relative_path
    call $fcntl:find_abspath
    local.get $bp$
    global.set $crt:sp$
    return
  )
  (func $fcntl:openat (export "openat")
    (param $fd i32) (param $path i32) (param $oflags i32) (result i32) 
    (local $max i64) (local $error i32) (local $lookup_flags i32) (local $fs_flags i32) (local $fs_rights_base i64) (local $fs_rights_inheriting i64) (local $bp$ i32) (local $fp$ i32) (local $i1$ i32) 
    global.get $crt:sp$
    local.set $bp$
    global.get $crt:sp$
    i32.const 32
    i32.sub
    global.set $crt:sp$
    global.get $crt:sp$
    local.set $fp$
    i64.const -4211012
    local.set $max
    block $1$
    block $7$
    block $6$
    block $5$
    block $4$
    block $3$
    block $2$
    local.get $oflags
    i32.const 503316480
    i32.and
    local.set $i1$
    i32.const 33554432
    local.get $i1$
    i32.eq
    br_if $5$
    i32.const 67108864
    local.get $i1$
    i32.eq
    br_if $2$
    i32.const 134217728
    local.get $i1$
    i32.eq
    br_if $6$
    i32.const 268435456
    local.get $i1$
    i32.eq
    br_if $4$
    i32.const 335544320
    local.get $i1$
    i32.eq
    br_if $3$
    br $7$
    end $2$
    end $3$
    end $4$
    local.get $oflags
    i32.const 67108864
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $max
    i64.const 16386
    i64.or
    local.set $max
    end
    local.get $oflags
    i32.const 268435456
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $max
    i64.const 4194625
    i64.or
    local.set $max
    end
    br $1$
    end $5$
    br $1$
    end $6$
    br $1$
    end $7$
    i32.const 28
    global.set $errno:errno
    i32.const -1
    local.get $bp$
    global.set $crt:sp$
    return
    end $1$
    local.get $fd
    local.get $fp$
    call $wasi_snapshot_preview1:fd_fdstat_get
    local.tee $error
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $error
    i32.const 65535
    i32.and
    global.set $errno:errno
    i32.const -1
    local.get $bp$
    global.set $crt:sp$
    return
    end
    i32.const 0
    local.set $lookup_flags
    local.get $oflags
    i32.const 16777216
    i32.and
    i32.const 0
    i32.eq
    if
    local.get $lookup_flags
    i32.const 1
    i32.or
    local.set $lookup_flags
    end
    local.get $oflags
    i32.const 4095
    i32.and
    i32.const 65535
    i32.and
    local.set $fs_flags
    local.get $max
    local.get $fp$
    i64.load offset=16 align=8
    i64.and
    local.set $fs_rights_base
    local.get $fp$
    i64.load offset=16 align=8
    local.set $fs_rights_inheriting
    local.get $fd
    local.get $lookup_flags
    local.get $path
    local.get $path
    call $string:strlen
    local.get $oflags
    i32.const 12
    i32.shr_s
    i32.const 4095
    i32.and
    i32.const 65535
    i32.and
    local.get $fs_rights_base
    local.get $fs_rights_inheriting
    local.get $fs_flags
    i32.const 65535
    i32.and
    local.get $fp$
    i32.const 24
    i32.add
    call $wasi_snapshot_preview1:path_open
    local.tee $error
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $error
    i32.const 65535
    i32.and
    global.set $errno:errno
    i32.const -1
    local.get $bp$
    global.set $crt:sp$
    return
    end
    local.get $fp$
    i32.load offset=24 align=4
    local.get $bp$
    global.set $crt:sp$
    return
  )
  (func $fcntl:open (export "open")
    (param $path i32) (param $oflags i32) (result i32) 
    (local $dirfd i32) (local $bp$ i32) (local $fp$ i32) 
    global.get $crt:sp$
    local.set $bp$
    global.get $crt:sp$
    i32.const 16
    i32.sub
    global.set $crt:sp$
    global.get $crt:sp$
    local.set $fp$
    local.get $path
    local.get $fp$
    call $fcntl:find_relpath
    local.tee $dirfd
    i32.const -1
    i32.eq
    if
    i32.const 76
    global.set $errno:errno
    i32.const -1
    local.get $bp$
    global.set $crt:sp$
    return
    end
    local.get $dirfd
    local.get $fp$
    i32.load offset=0 align=4
    local.get $oflags
    call $fcntl:openat
    local.get $bp$
    global.set $crt:sp$
    return
  )
  (func $fcntl:fcntl (export "fcntl")
    (param $fd i32) (param $cmd i32) (param $ap$ i32) (result i32) 
    (local $error i32) (local $oflags i32) (local $ap i32) (local $flags i32) (local $fs_flags i32) (local $error#6 i32) (local $bp$ i32) (local $fp$ i32) 
    global.get $crt:sp$
    local.set $bp$
    global.get $crt:sp$
    i32.const 32
    i32.sub
    global.set $crt:sp$
    global.get $crt:sp$
    local.set $fp$
    block $1$
    block $5$
    block $4$
    block $3$
    block $2$
    local.get $cmd
    i32.const 1
    i32.sub
    br_table $2$ $3$ $4$ $5$ $1$
    end $2$
    i32.const 1
    local.get $bp$
    global.set $crt:sp$
    return
    end $3$
    i32.const 0
    local.get $bp$
    global.set $crt:sp$
    return
    end $4$
    local.get $fd
    local.get $fp$
    call $wasi_snapshot_preview1:fd_fdstat_get
    local.tee $error
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $error
    i32.const 65535
    i32.and
    global.set $errno:errno
    i32.const -1
    local.get $bp$
    global.set $crt:sp$
    return
    end
    local.get $fp$
    i32.load16_u offset=2 align=2
    local.set $oflags
    local.get $fp$
    i64.load offset=8 align=8
    i64.const 16386
    i64.and
    i32.const 0
    i64.extend_i32_s
    i64.ne
    if
    local.get $fp$
    i64.load offset=8 align=8
    i64.const 64
    i64.and
    i32.const 0
    i64.extend_i32_s
    i64.ne
    if
    local.get $oflags
    i32.const 335544320
    i32.or
    local.set $oflags
    else
    local.get $oflags
    i32.const 67108864
    i32.or
    local.set $oflags
    end
    else
    local.get $fp$
    i64.load offset=8 align=8
    i64.const 64
    i64.and
    i32.const 0
    i64.extend_i32_s
    i64.ne
    if
    local.get $oflags
    i32.const 268435456
    i32.or
    local.set $oflags
    else
    local.get $oflags
    i32.const 134217728
    i32.or
    local.set $oflags
    end
    end
    local.get $oflags
    local.get $bp$
    global.set $crt:sp$
    return
    end $5$
    local.get $ap$
    local.tee $ap
    local.get $ap
    i32.const 16
    i32.add
    local.set $ap
    i32.load offset=0 align=4
    local.set $flags
    i32.const 0
    local.set $ap
    local.get $flags
    i32.const 4095
    i32.and
    i32.const 65535
    i32.and
    local.set $fs_flags
    local.get $fd
    local.get $fs_flags
    i32.const 65535
    i32.and
    call $wasi_snapshot_preview1:fd_fdstat_set_flags
    local.tee $error#6
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $error#6
    i32.const 65535
    i32.and
    global.set $errno:errno
    i32.const -1
    local.get $bp$
    global.set $crt:sp$
    return
    end
    i32.const 0
    local.get $bp$
    global.set $crt:sp$
    return
    end $1$
    i32.const 28
    global.set $errno:errno
    i32.const -1
    local.get $bp$
    global.set $crt:sp$
    return
  )
  (func $fcntl:posix_fadvise (export "posix_fadvise")
    (param $fd i32) (param $offset i64) (param $len i64) (param $advice i32) (result i32) 
    local.get $offset
    i32.const 0
    i64.extend_i32_s
    i64.lt_s
    if (result i32)
    i32.const 1
    else
    local.get $len
    i32.const 0
    i64.extend_i32_s
    i64.lt_s
    end
    if
    i32.const 28
    return
    end
    local.get $fd
    local.get $offset
    local.get $len
    local.get $advice
    i32.const 255
    i32.and
    call $wasi_snapshot_preview1:fd_advise
    return
  )
  (func $fcntl:posix_fallocate (export "posix_fallocate")
    (param $fd i32) (param $offset i64) (param $len i64) (result i32) 
    local.get $offset
    i32.const 0
    i64.extend_i32_s
    i64.lt_s
    if (result i32)
    i32.const 1
    else
    local.get $len
    i32.const 0
    i64.extend_i32_s
    i64.lt_s
    end
    if
    i32.const 28
    return
    end
    local.get $fd
    local.get $offset
    local.get $len
    call $wasi_snapshot_preview1:fd_allocate
    return
  )
)
