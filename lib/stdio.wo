(module $stdio
  (import "env" "__stack_pointer" (global $env:__stack_pointer (mut i32)))
  (import "env" "__linear_memory" (memory $env:__linear_memory 0))
  (import "wasi_snapshot_preview1" "path_rename" (func $wasi_snapshot_preview1:path_rename (param i32) (param i32) (param i32) (param i32) (param i32) (param i32) (result i32)))
  (import "errno" "errno" (global $errno:errno i32))
  (import "string" "memcpy" (func $string:memcpy (param i32) (param i32) (param i32) (result i32)))
  (import "string" "memchr" (func $string:memchr (param i32) (param i32) (param i32) (result i32)))
  (import "string" "strlen" (func $string:strlen (param i32) (result i32)))
  (import "string" "memccpy" (func $string:memccpy (param i32) (param i32) (param i32) (param i32) (result i32)))
  (import "string" "bzero" (func $string:bzero (param i32) (param i32)))
  (import "stdlib" "free" (func $stdlib:free (param i32)))
  (import "stdlib" "malloc" (func $stdlib:malloc (param i32) (result i32)))
  (import "stdlib" "atexit" (func $stdlib:atexit (param i32) (result i32)))
  (import "fcntl" "open" (func $fcntl:open (param i32) (param i32) (result i32)))
  (import "fcntl" "find_relpath" (func $fcntl:find_relpath (param i32) (param i32) (result i32)))
  (import "unistd" "read" (func $unistd:read (param i32) (param i32) (param i32) (result i32)))
  (import "unistd" "write" (func $unistd:write (param i32) (param i32) (param i32) (result i32)))
  (import "unistd" "lseek" (func $unistd:lseek (param i32) (param i64) (param i32) (result i64)))
  (import "unistd" "close" (func $unistd:close (param i32) (result i32)))
  (import "unistd" "unlinkat" (func $unistd:unlinkat (param i32) (param i32) (param i32) (result i32)))
  (import "unistd" "rmdirat" (func $unistd:rmdirat (param i32) (param i32) (result i32)))
  (global $stdio:closeall_set (mut i32) (i32.const 0))
  (data $stdio:_iob (export "_iob") var align
  (data $stdio:pow10 var align=8 "\01\00\00\00\00\00\00\00\n\00\00\00\00\00\00\00d\00\00\00\00\00\00\00\e8\03\00\00\00\00\00\00\10\'\00\00\00\00\00\00\a0\86\01\00\00\00\00\00@B\0f\00\00\00\00\00\80\96\98\00\00\00\00\00\00\e1\f5\05\00\00\00\00\00\ca\9a;\00\00\00\00")
  (data $stdio:ds40$ const align=1 "nan\00")
  (data $stdio:ds41$ const align=1 "fni-\00")
  (data $stdio:ds42$ const align=1 "fni+\00")
  (data $stdio:ds43$ const align=1 "fni\00")
  (func $stdio:findfp
    (result i32) 
    (local $fp i32) 
    block $2$
    ref.data $stdio:_iob
    local.set $fp
    loop $1$
    local.get $fp
    ref.data $stdio:_iob
    i32.const 640
    i32.add
    i32.lt_u
    i32.eqz
    br_if $2$
    block $3$
    local.get $fp
    i32.load offset=16 align=4
    i32.const 131
    i32.and
    i32.const 0
    i32.eq
    if
    local.get $fp
    return
    end
    end $3$
    local.get $fp
    i32.const 32
    i32.add
    local.set $fp
    br $1$
    end $1$
    end $2$
    i32.const 0
    return
  )
  (func $stdio:closeall
    (local $fpi i32) 
    block $2$
    ref.data $stdio:_iob
    local.set $fpi
    loop $1$
    local.get $fpi
    ref.data $stdio:_iob
    i32.const 640
    i32.add
    i32.lt_u
    i32.eqz
    br_if $2$
    block $3$
    local.get $fpi
    i32.load offset=16 align=4
    i32.const 131
    i32.and
    if
    local.get $fpi
    call $stdio:fclose
    drop
    end
    end $3$
    local.get $fpi
    i32.const 32
    i32.add
    local.set $fpi
    br $1$
    end $1$
    end $2$
  )
  (func $stdio:freopen (export "freopen")
    (param $filename i32) (param $mode i32) (param $fp i32) (result i32) 
    (local $plus i32) (local $oflags i32) (local $fd i32) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) (local $i6$ i32) (local $i5$ i32) (local $i4$ i32) (local $i7$ i32) 
    local.get $fp
    i32.const 0
    i32.ne
    if
    local.get $fp
    call $stdio:fclose
    drop
    else
    call $stdio:findfp
    local.set $fp
    end
    local.get $fp
    i32.const 0
    i32.eq
    if (result i32)
    i32.const 1
    else
    local.get $filename
    i32.const 0
    i32.eq
    end
    if (result i32)
    i32.const 1
    else
    local.get $mode
    i32.const 0
    i32.eq
    end
    if
    i32.const 0
    return
    end
    block $1$
    block $5$
    block $4$
    block $3$
    block $2$
    local.get $mode
    i32.load8_s offset=0 align=1
    local.set $i1$
    i32.const 97
    local.get $i1$
    i32.eq
    br_if $3$
    i32.const 114
    local.get $i1$
    i32.eq
    br_if $4$
    i32.const 119
    local.get $i1$
    i32.eq
    br_if $2$
    br $5$
    end $2$
    i32.const 335544320
    i32.const 268435456
    local.get $mode
    i32.load8_s offset=1 align=1
    i32.const 43
    i32.eq
    select
    i32.const 32768
    i32.or
    i32.const 4096
    i32.or
    local.set $oflags
    br $1$
    end $3$
    i32.const 335544320
    i32.const 268435456
    local.get $mode
    i32.load8_s offset=1 align=1
    i32.const 43
    i32.eq
    select
    i32.const 1
    i32.or
    i32.const 4096
    i32.or
    local.set $oflags
    br $1$
    end $4$
    i32.const 335544320
    i32.const 67108864
    local.get $mode
    i32.load8_s offset=1 align=1
    i32.const 43
    i32.eq
    select
    local.set $oflags
    br $1$
    end $5$
    i32.const 0
    return
    end $1$
    local.get $filename
    local.get $oflags
    call $fcntl:open
    local.tee $fd
    i32.const 0
    i32.lt_s
    if
    i32.const 0
    return
    end
    local.get $fp
    i32.const 20
    i32.add
    local.tee $i2$
    local.get $fd
    i32.store offset=0 align=4
    local.get $fp
    local.tee $i3$
    i32.const 0
    i32.store offset=0 align=4
    local.get $fp
    i32.const 4
    i32.add
    local.tee $i6$
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i5$
    local.get $fp
    i32.const 12
    i32.add
    local.tee $i4$
    i32.const 0
    i32.store offset=0 align=4
    local.get $i4$
    i32.load offset=0 align=4
    i32.store offset=0 align=4
    local.get $i5$
    i32.load offset=0 align=4
    i32.store offset=0 align=4
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i7$
    local.get $oflags
    i32.const 335544320
    i32.and
    if (result i32)
    i32.const 128
    else
    i32.const 1
    i32.const 2
    local.get $oflags
    i32.const 67108864
    i32.and
    select
    end
    i32.store offset=0 align=4
    local.get $oflags
    i32.const 1
    i32.and
    if (result i32)
    local.get $oflags
    i32.const 335544320
    i32.and
    i32.eqz
    else
    i32.const 0
    end
    if (result i32)
    local.get $fd
    i32.const 0
    i64.extend_i32_s
    i32.const 2
    call $unistd:lseek
    i32.const 0
    i64.extend_i32_s
    i64.lt_s
    else
    i32.const 0
    end
    if
    local.get $fp
    call $stdio:fclose
    drop
    i32.const 0
    local.set $fp
    end
    global.get $stdio:closeall_set
    i32.extend8_s
    i32.eqz
    if
    ref.func $stdio:closeall
    call $stdlib:atexit
    drop
    i32.const 1
    global.set $stdio:closeall_set
    end
    local.get $fp
    return
  )
  (func $stdio:fopen (export "fopen")
    (param $name i32) (param $mode i32) (result i32) 
    local.get $name
    local.get $mode
    i32.const 0
    call $stdio:freopen
    return
  )
  (func $stdio:fdopen (export "fdopen")
    (param $fd i32) (param $mode i32) (result i32) 
    (local $fp i32) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) (local $i6$ i32) (local $i5$ i32) (local $i4$ i32) (local $i7$ i32) (local $i8$ i32) (local $i9$ i32) (local $i10$ i32) (local $i11$ i32) 
    call $stdio:findfp
    local.tee $fp
    i32.const 0
    i32.eq
    if
    i32.const 0
    return
    end
    local.get $fp
    i32.const 20
    i32.add
    local.tee $i1$
    local.get $fd
    i32.store offset=0 align=4
    local.get $fp
    local.tee $i2$
    i32.const 0
    i32.store offset=0 align=4
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i3$
    i32.const 0
    i32.store offset=0 align=4
    local.get $fp
    i32.const 4
    i32.add
    local.tee $i6$
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i5$
    local.get $fp
    i32.const 12
    i32.add
    local.tee $i4$
    i32.const 0
    i32.store offset=0 align=4
    local.get $i4$
    i32.load offset=0 align=4
    i32.store offset=0 align=4
    local.get $i5$
    i32.load offset=0 align=4
    i32.store offset=0 align=4
    block $1$
    block $5$
    block $4$
    block $3$
    block $2$
    local.get $mode
    i32.load8_s offset=0 align=1
    local.set $i7$
    i32.const 97
    local.get $i7$
    i32.eq
    br_if $3$
    i32.const 114
    local.get $i7$
    i32.eq
    br_if $2$
    i32.const 119
    local.get $i7$
    i32.eq
    br_if $4$
    br $5$
    end $2$
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i8$
    local.get $i8$
    i32.load offset=0 align=4
    i32.const 1
    i32.or
    i32.store offset=0 align=4
    br $1$
    end $3$
    local.get $fd
    i32.const 0
    i64.extend_i32_s
    i32.const 2
    call $unistd:lseek
    drop
    end $4$
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i9$
    local.get $i9$
    i32.load offset=0 align=4
    i32.const 2
    i32.or
    i32.store offset=0 align=4
    br $1$
    end $5$
    i32.const 0
    return
    end $1$
    local.get $mode
    i32.load8_s offset=1 align=1
    i32.const 43
    i32.eq
    if
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i10$
    local.get $i10$
    i32.load offset=0 align=4
    i32.const -4
    i32.and
    i32.store offset=0 align=4
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i11$
    local.get $i11$
    i32.load offset=0 align=4
    i32.const 128
    i32.or
    i32.store offset=0 align=4
    end
    global.get $stdio:closeall_set
    i32.extend8_s
    i32.eqz
    if
    ref.func $stdio:closeall
    call $stdlib:atexit
    drop
    i32.const 1
    global.set $stdio:closeall_set
    end
    local.get $fp
    return
  )
  (func $stdio:fclose (export "fclose")
    (param $fp i32) (result i32) 
    (local $res i32) 
    i32.const -1
    local.set $res
    local.get $fp
    i32.const 0
    i32.eq
    if
    local.get $res
    return
    end
    local.get $fp
    i32.load offset=16 align=4
    i32.const 131
    i32.and
    if
    local.get $fp
    i32.load offset=16 align=4
    i32.const 4
    i32.and
    if (result i32)
    i32.const 0
    else
    local.get $fp
    call $stdio:fflush
    end
    local.set $res
    local.get $fp
    i32.load offset=20 align=4
    call $unistd:close
    i32.const 0
    i32.lt_s
    if
    i32.const 44
    global.set $errno:errno
    i32.const -1
    local.set $res
    end
    end
    local.get $fp
    i32.load offset=4 align=4
    i32.const 0
    i32.ne
    if (result i32)
    local.get $fp
    i32.load offset=4 align=4
    local.get $fp
    i32.const 24
    i32.add
    i32.ne
    else
    i32.const 0
    end
    if
    local.get $fp
    i32.load offset=16 align=4
    i32.const 256
    i32.and
    if
    local.get $fp
    i32.load offset=4 align=4
    call $stdlib:free
    end
    end
    local.get $fp
    i32.const 32
    call $string:bzero
    local.get $res
    return
  )
  (func $stdio:addbuf
    (param $fp i32) 
    (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) (local $i4$ i32) (local $i5$ i32) (local $i6$ i32) (local $i7$ i32) (local $i8$ i32) 
    local.get $fp
    i32.load offset=16 align=4
    i32.const 4
    i32.and
    if
    local.get $fp
    i32.const 4
    i32.add
    local.tee $i1$
    local.get $fp
    i32.const 24
    i32.add
    i32.store offset=0 align=4
    local.get $fp
    i32.const 12
    i32.add
    local.tee $i2$
    local.get $fp
    i32.load offset=4 align=4
    i32.const 8
    i32.add
    i32.store offset=0 align=4
    else
    local.get $fp
    i32.const 4
    i32.add
    local.tee $i3$
    i32.const 1032
    call $stdlib:malloc
    i32.store offset=0 align=4
    local.get $fp
    i32.load offset=4 align=4
    i32.const 0
    i32.ne
    if
    local.get $fp
    i32.const 12
    i32.add
    local.tee $i4$
    local.get $fp
    i32.load offset=4 align=4
    i32.const 1024
    i32.add
    i32.const 8
    i32.add
    i32.store offset=0 align=4
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i5$
    local.get $i5$
    i32.load offset=0 align=4
    i32.const 256
    i32.or
    i32.store offset=0 align=4
    else
    local.get $fp
    i32.const 4
    i32.add
    local.tee $i6$
    local.get $fp
    i32.const 24
    i32.add
    i32.store offset=0 align=4
    local.get $fp
    i32.const 12
    i32.add
    local.tee $i7$
    local.get $fp
    i32.load offset=4 align=4
    i32.const 8
    i32.add
    i32.store offset=0 align=4
    end
    end
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i8$
    local.get $fp
    i32.load offset=4 align=4
    i32.store offset=0 align=4
  )
  (func $stdio:_fillbuf (export "_fillbuf")
    (param $fp i32) (result i32) 
    (local $fpi i32) (local $readc i32) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) (local $i4$ i32) (local $i5$ i32) (local $i6$ i32) (local $i7$ i32) (local $i8$ i32) (local $i9$ i32) 
    local.get $fp
    i32.load offset=4 align=4
    i32.const 0
    i32.eq
    if
    local.get $fp
    call $stdio:addbuf
    end
    local.get $fp
    i32.load offset=16 align=4
    i32.const 1
    i32.and
    i32.eqz
    if
    local.get $fp
    i32.load offset=16 align=4
    i32.const 128
    i32.and
    if
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i1$
    local.get $i1$
    i32.load offset=0 align=4
    i32.const 1
    i32.or
    i32.store offset=0 align=4
    else
    i32.const -1
    return
    end
    end
    local.get $fp
    i32.load offset=16 align=4
    i32.const 68
    i32.and
    if
    block $2$
    ref.data $stdio:_iob
    local.set $fpi
    loop $1$
    local.get $fpi
    ref.data $stdio:_iob
    i32.const 640
    i32.add
    i32.lt_u
    i32.eqz
    br_if $2$
    block $3$
    local.get $fpi
    i32.load offset=16 align=4
    i32.const 0
    i32.and
    if
    local.get $fpi
    call $stdio:fflush
    drop
    end
    end $3$
    local.get $fpi
    i32.const 32
    i32.add
    local.set $fpi
    br $1$
    end $1$
    end $2$
    end
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i2$
    local.get $fp
    i32.load offset=4 align=4
    i32.store offset=0 align=4
    local.get $fp
    i32.load offset=16 align=4
    i32.const 4
    i32.and
    if (result i32)
    i32.const 1
    else
    local.get $fp
    i32.load offset=12 align=4
    local.get $fp
    i32.load offset=4 align=4
    i32.sub
    end
    local.set $readc
    local.get $fp
    local.tee $i3$
    local.get $fp
    i32.load offset=20 align=4
    local.get $fp
    i32.load offset=4 align=4
    local.get $readc
    call $unistd:read
    i32.store offset=0 align=4
    local.get $fp
    local.tee $i4$
    local.get $i4$
    i32.load offset=0 align=4
    i32.const 1
    i32.sub
    i32.store offset=0 align=4
    local.get $i4$
    i32.load offset=0 align=4
    i32.const 0
    i32.ge_s
    if
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i5$
    i32.load offset=0 align=4
    local.get $i5$
    local.get $i5$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    i32.load8_u offset=0 align=1
    return
    else
    local.get $fp
    i32.load offset=0 align=4
    i32.const -1
    i32.ne
    if
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i6$
    local.get $i6$
    i32.load offset=0 align=4
    i32.const 32
    i32.or
    i32.store offset=0 align=4
    else
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i7$
    local.get $i7$
    i32.load offset=0 align=4
    i32.const 16
    i32.or
    i32.store offset=0 align=4
    local.get $fp
    i32.load offset=16 align=4
    i32.const 128
    i32.and
    if
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i8$
    local.get $i8$
    i32.load offset=0 align=4
    i32.const -2
    i32.and
    i32.store offset=0 align=4
    end
    end
    end
    local.get $fp
    local.tee $i9$
    i32.const 0
    i32.store offset=0 align=4
    i32.const -1
    return
  )
  (func $stdio:fread (export "fread")
    (param $buf i32) (param $size i32) (param $count i32) (param $fp i32) (result i32) 
    (local $ptr i32) (local $nleft i32) (local $n i32) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) (local $i4$ i32) 
    local.get $buf
    local.set $ptr
    local.get $size
    i32.const 0
    i32.eq
    if (result i32)
    i32.const 1
    else
    local.get $count
    i32.const 0
    i32.eq
    end
    if
    i32.const 0
    return
    end
    local.get $count
    local.get $size
    i32.mul
    local.set $nleft
    block $2$
    loop $1$
    i32.const 0
    br_if $2$
    block $3$
    local.get $fp
    i32.load offset=0 align=4
    i32.const 0
    i32.le_s
    if
    local.get $fp
    call $stdio:_fillbuf
    i32.const -1
    i32.eq
    if
    local.get $count
    local.get $nleft
    local.get $size
    i32.add
    i32.const 1
    i32.sub
    local.get $size
    i32.div_u
    i32.sub
    return
    end
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i1$
    i32.load offset=0 align=4
    local.get $i1$
    local.get $i1$
    i32.load offset=0 align=4
    i32.const 1
    i32.sub
    i32.store offset=0 align=4
    drop
    local.get $fp
    local.tee $i2$
    i32.load offset=0 align=4
    local.get $i2$
    local.get $i2$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    drop
    end
    local.get $fp
    i32.load offset=0 align=4
    local.set $n
    local.get $nleft
    local.get $n
    i32.lt_u
    if
    local.get $nleft
    local.set $n
    end
    local.get $ptr
    local.get $fp
    i32.load offset=8 align=4
    local.get $n
    call $string:memcpy
    drop
    local.get $ptr
    local.get $n
    i32.add
    local.set $ptr
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i3$
    local.get $i3$
    i32.load offset=0 align=4
    local.get $n
    i32.add
    i32.store offset=0 align=4
    local.get $fp
    local.tee $i4$
    local.get $i4$
    i32.load offset=0 align=4
    local.get $n
    i32.sub
    i32.store offset=0 align=4
    local.get $nleft
    local.get $n
    i32.le_u
    if
    local.get $count
    return
    end
    local.get $nleft
    local.get $n
    i32.sub
    local.set $nleft
    end $3$
    br $1$
    end $1$
    end $2$
    i32.const 0
    return
  )
  (func $stdio:writebuf
    (param $fp i32) (result i32) 
    (local $base i32) (local $n i32) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) 
    local.get $fp
    i32.load offset=4 align=4
    local.set $base
    local.get $fp
    i32.load offset=8 align=4
    local.get $base
    i32.sub
    local.set $n
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i1$
    local.get $base
    i32.store offset=0 align=4
    local.get $fp
    local.tee $i2$
    local.get $fp
    i32.load offset=16 align=4
    i32.const 68
    i32.and
    if (result i32)
    i32.const 0
    else
    local.get $fp
    i32.load offset=12 align=4
    local.get $base
    i32.sub
    end
    i32.store offset=0 align=4
    local.get $n
    i32.const 0
    i32.gt_s
    if (result i32)
    local.get $n
    local.get $fp
    i32.load offset=20 align=4
    local.get $base
    local.get $n
    call $unistd:write
    i32.ne
    else
    i32.const 0
    end
    if
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i3$
    local.get $i3$
    i32.load offset=0 align=4
    i32.const 32
    i32.or
    i32.store offset=0 align=4
    i32.const -1
    return
    end
    i32.const 0
    return
  )
  (func $stdio:wrtchk
    (param $fp i32) (result i32) 
    (local $i1$ i32) (local $i2$ i32) 
    local.get $fp
    i32.load offset=16 align=4
    i32.const 18
    i32.and
    i32.const 2
    i32.ne
    if
    local.get $fp
    i32.load offset=16 align=4
    i32.const 130
    i32.and
    i32.eqz
    if
    i32.const -1
    return
    end
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i1$
    local.get $i1$
    i32.load offset=0 align=4
    i32.const -17
    i32.and
    i32.store offset=0 align=4
    end
    local.get $fp
    i32.load offset=4 align=4
    i32.const 0
    i32.eq
    if
    local.get $fp
    call $stdio:addbuf
    global.get $stdio:closeall_set
    i32.extend8_s
    i32.eqz
    if
    ref.func $stdio:closeall
    call $stdlib:atexit
    drop
    i32.const 1
    global.set $stdio:closeall_set
    end
    end
    local.get $fp
    i32.load offset=8 align=4
    local.get $fp
    i32.load offset=4 align=4
    i32.eq
    if (result i32)
    local.get $fp
    i32.load offset=16 align=4
    i32.const 68
    i32.and
    i32.eqz
    else
    i32.const 0
    end
    if
    local.get $fp
    local.tee $i2$
    local.get $fp
    i32.load offset=12 align=4
    local.get $fp
    i32.load offset=4 align=4
    i32.sub
    i32.store offset=0 align=4
    end
    i32.const 0
    return
  )
  (func $stdio:_flushbuf (export "_flushbuf")
    (param $c i32) (param $fp i32) (result i32) 
    (local $fp$ i32) (local $i2$ i32) (local $i1$ i32) (local $i3$ i32) (local $i4$ i32) (local $i5$ i32) (local $i6$ i32) (local $i8$ i32) (local $i7$ i32) 
    global.get $env:__stack_pointer
    global.get $env:__stack_pointer
    i32.const 16
    i32.sub
    global.set $env:__stack_pointer
    local.set $fp$
    block $2$
    loop $1$
    block $3$
    local.get $fp
    i32.load offset=16 align=4
    i32.const 82
    i32.and
    i32.const 66
    i32.eq
    if
    local.get $fp
    i32.load offset=8 align=4
    local.get $fp
    i32.load offset=12 align=4
    i32.ge_u
    br_if $2$
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i1$
    i32.load offset=0 align=4
    local.get $i1$
    local.get $i1$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    local.tee $i2$
    local.get $c
    i32.store8 offset=0 align=1
    local.get $i2$
    i32.load8_u offset=0 align=1
    i32.const 10
    i32.ne
    if
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $c
    return
    end
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    local.get $c
    local.get $fp
    call $stdio:writebuf
    i32.const -1
    i32.eq
    select
    return
    end
    local.get $fp
    i32.load offset=16 align=4
    i32.const 22
    i32.and
    i32.const 6
    i32.eq
    if
    local.get $fp$
    local.tee $i3$
    local.get $c
    i32.store8 offset=0 align=1
    local.get $fp
    local.tee $i4$
    i32.const 0
    i32.store offset=0 align=4
    local.get $fp
    i32.load offset=20 align=4
    local.get $fp$
    i32.const 1
    call $unistd:write
    i32.const 1
    i32.eq
    if
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $c
    return
    end
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i5$
    local.get $i5$
    i32.load offset=0 align=4
    i32.const 32
    i32.or
    i32.store offset=0 align=4
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    return
    end
    local.get $fp
    call $stdio:wrtchk
    i32.const 0
    i32.ne
    if
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    return
    end
    end $3$
    local.get $fp
    i32.load offset=16 align=4
    i32.const 68
    i32.and
    br_if $1$
    end $1$
    end $2$
    local.get $fp
    call $stdio:writebuf
    drop
    local.get $fp
    local.tee $i6$
    local.get $i6$
    i32.load offset=0 align=4
    i32.const 1
    i32.sub
    i32.store offset=0 align=4
    local.get $i6$
    i32.load offset=0 align=4
    i32.const 0
    i32.ge_s
    if (result i32)
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i7$
    i32.load offset=0 align=4
    local.get $i7$
    local.get $i7$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    local.tee $i8$
    local.get $c
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    i32.store8 offset=0 align=1
    local.get $i8$
    i32.load8_u offset=0 align=1
    else
    local.get $c
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    local.get $fp
    call $stdio:_flushbuf
    end
    drop
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    local.get $c
    local.get $fp
    i32.load offset=16 align=4
    i32.const 32
    i32.and
    select
    return
  )
  (func $stdio:fwrite (export "fwrite")
    (param $buf i32) (param $size i32) (param $count i32) (param $fp i32) (result i32) 
    (local $ptr i32) (local $nleft i32) (local $n i32) (local $cptr i32) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) 
    local.get $buf
    local.set $ptr
    local.get $size
    i32.const 0
    i32.eq
    if (result i32)
    i32.const 1
    else
    local.get $count
    i32.const 0
    i32.eq
    end
    if (result i32)
    i32.const 1
    else
    local.get $fp
    call $stdio:wrtchk
    end
    if
    i32.const 0
    return
    end
    local.get $count
    local.get $size
    i32.mul
    local.set $nleft
    local.get $fp
    i32.load offset=4 align=4
    local.get $fp
    i32.load offset=8 align=4
    i32.ge_u
    if
    local.get $fp
    i32.load offset=16 align=4
    i32.const 4
    i32.and
    i32.const 0
    i32.ne
    if (result i32)
    i32.const 1
    else
    local.get $nleft
    i32.const 1024
    i32.ge_u
    end
    if
    local.get $fp
    i32.load offset=20 align=4
    local.get $ptr
    local.get $nleft
    call $unistd:write
    local.tee $n
    local.get $nleft
    i32.ne
    if
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i1$
    local.get $i1$
    i32.load offset=0 align=4
    i32.const 32
    i32.or
    i32.store offset=0 align=4
    local.get $n
    i32.const 0
    local.get $n
    i32.const 0
    i32.ge_s
    select
    local.set $n
    end
    local.get $n
    local.get $size
    i32.div_u
    return
    end
    end
    block $2$
    loop $1$
    i32.const 0
    br_if $2$
    block $3$
    block $4$
    loop $5$
    local.get $fp
    i32.load offset=12 align=4
    local.get $fp
    i32.load offset=8 align=4
    local.tee $cptr
    i32.sub
    local.tee $n
    i32.const 0
    i32.le_s
    if
    local.get $fp
    call $stdio:writebuf
    i32.const -1
    i32.eq
    if
    local.get $count
    local.get $nleft
    local.get $size
    i32.add
    i32.const 1
    i32.sub
    local.get $size
    i32.div_u
    i32.sub
    return
    end
    br $5$
    end
    end $5$
    end $4$
    local.get $nleft
    local.get $n
    i32.lt_u
    if
    local.get $nleft
    local.set $n
    end
    local.get $cptr
    local.get $ptr
    local.get $n
    call $string:memcpy
    drop
    local.get $fp
    local.tee $i2$
    local.get $i2$
    i32.load offset=0 align=4
    local.get $n
    i32.sub
    i32.store offset=0 align=4
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i3$
    local.get $i3$
    i32.load offset=0 align=4
    local.get $n
    i32.add
    i32.store offset=0 align=4
    local.get $nleft
    local.get $n
    i32.sub
    local.tee $nleft
    i32.const 0
    i32.eq
    if
    local.get $fp
    i32.load offset=16 align=4
    i32.const 68
    i32.and
    if
    local.get $fp
    i32.load offset=16 align=4
    i32.const 4
    i32.and
    if (result i32)
    i32.const 1
    else
    local.get $fp
    i32.load offset=4 align=4
    i32.const 10
    local.get $count
    local.get $size
    i32.mul
    call $string:memchr
    i32.const 0
    i32.ne
    end
    if
    local.get $fp
    call $stdio:writebuf
    drop
    end
    end
    local.get $count
    return
    end
    end $3$
    local.get $ptr
    local.get $n
    i32.add
    local.set $ptr
    br $1$
    end $1$
    end $2$
    i32.const 0
    return
  )
  (func $stdio:fputs (export "fputs")
    (param $s i32) (param $fp i32) (result i32) 
    (local $ndone i32) (local $n i32) (local $cptr i32) (local $p i32) (local $cnt i32) (local $i1$ i32) (local $i2$ i32) 
    i32.const 0
    local.set $ndone
    local.get $fp
    call $stdio:wrtchk
    if
    i32.const 0
    return
    end
    local.get $fp
    i32.load offset=16 align=4
    i32.const 4
    i32.and
    i32.const 0
    i32.eq
    if
    block $2$
    loop $1$
    i32.const 0
    br_if $2$
    block $3$
    block $4$
    loop $5$
    local.get $fp
    i32.load offset=12 align=4
    local.get $fp
    i32.load offset=8 align=4
    local.tee $cptr
    i32.sub
    local.tee $n
    i32.const 0
    i32.le_s
    if
    local.get $fp
    call $stdio:writebuf
    i32.const -1
    i32.eq
    if
    i32.const -1
    return
    end
    br $5$
    end
    end $5$
    end $4$
    local.get $cptr
    local.get $s
    i32.const 0
    local.get $n
    call $string:memccpy
    local.tee $p
    i32.const 0
    i32.ne
    if
    local.get $p
    local.get $cptr
    i32.sub
    i32.const 1
    i32.sub
    local.set $n
    end
    local.get $fp
    local.tee $i1$
    local.get $i1$
    i32.load offset=0 align=4
    local.get $n
    i32.sub
    i32.store offset=0 align=4
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i2$
    local.get $i2$
    i32.load offset=0 align=4
    local.get $n
    i32.add
    i32.store offset=0 align=4
    local.get $ndone
    local.get $n
    i32.add
    local.set $ndone
    local.get $p
    i32.const 0
    i32.ne
    if
    local.get $fp
    i32.load offset=16 align=4
    i32.const 64
    i32.and
    if
    local.get $fp
    call $stdio:writebuf
    i32.const -1
    i32.eq
    if
    i32.const -1
    return
    end
    end
    local.get $ndone
    return
    end
    end $3$
    local.get $s
    local.get $n
    i32.add
    local.set $s
    br $1$
    end $1$
    end $2$
    else
    local.get $s
    call $string:strlen
    local.set $cnt
    local.get $fp
    i32.load offset=20 align=4
    local.get $s
    local.get $cnt
    call $unistd:write
    drop
    local.get $cnt
    return
    end
    i32.const 0
    return
  )
  (func $stdio:fgetc (export "fgetc")
    (param $fp i32) (result i32) 
    (local $i1$ i32) (local $i2$ i32) 
    local.get $fp
    local.tee $i1$
    local.get $i1$
    i32.load offset=0 align=4
    i32.const 1
    i32.sub
    i32.store offset=0 align=4
    local.get $i1$
    i32.load offset=0 align=4
    i32.const 0
    i32.ge_s
    if (result i32)
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i2$
    i32.load offset=0 align=4
    local.get $i2$
    local.get $i2$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    i32.load8_u offset=0 align=1
    i32.const 255
    i32.and
    else
    local.get $fp
    call $stdio:_fillbuf
    end
    return
  )
  (func $stdio:fputc (export "fputc")
    (param $c i32) (param $fp i32) (result i32) 
    (local $i1$ i32) (local $i3$ i32) (local $i2$ i32) 
    local.get $fp
    local.tee $i1$
    local.get $i1$
    i32.load offset=0 align=4
    i32.const 1
    i32.sub
    i32.store offset=0 align=4
    local.get $i1$
    i32.load offset=0 align=4
    i32.const 0
    i32.ge_s
    if (result i32)
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i2$
    i32.load offset=0 align=4
    local.get $i2$
    local.get $i2$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    local.tee $i3$
    local.get $c
    i32.store8 offset=0 align=1
    local.get $i3$
    i32.load8_u offset=0 align=1
    else
    local.get $c
    local.get $fp
    call $stdio:_flushbuf
    end
    return
  )
  (func $stdio:fgets (export "fgets")
    (param $s i32) (param $size i32) (param $fp i32) (result i32) 
    (local $p i32) (local $s0 i32) (local $n i32) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) (local $i4$ i32) (local $i5$ i32) 
    local.get $s
    local.set $s0
    block $2$
    local.get $size
    local.get $size
    i32.const 1
    i32.sub
    local.set $size
    drop
    loop $1$
    local.get $size
    i32.const 0
    i32.gt_s
    i32.eqz
    br_if $2$
    block $3$
    local.get $fp
    i32.load offset=0 align=4
    i32.const 0
    i32.le_s
    if
    local.get $fp
    call $stdio:_fillbuf
    i32.const -1
    i32.eq
    if
    local.get $s0
    local.get $s
    i32.eq
    if
    i32.const 0
    return
    end
    br $2$
    end
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i1$
    i32.load offset=0 align=4
    local.get $i1$
    local.get $i1$
    i32.load offset=0 align=4
    i32.const 1
    i32.sub
    i32.store offset=0 align=4
    drop
    local.get $fp
    local.tee $i2$
    i32.load offset=0 align=4
    local.get $i2$
    local.get $i2$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    drop
    end
    local.get $size
    local.get $fp
    i32.load offset=0 align=4
    i32.lt_s
    if (result i32)
    local.get $size
    else
    local.get $fp
    i32.load offset=0 align=4
    end
    local.set $n
    local.get $s
    local.get $fp
    i32.load offset=8 align=4
    i32.const 10
    local.get $n
    call $string:memccpy
    local.tee $p
    i32.const 0
    i32.ne
    if
    local.get $p
    local.get $s
    i32.sub
    local.set $n
    end
    local.get $s
    local.get $n
    i32.add
    local.set $s
    local.get $fp
    local.tee $i3$
    local.get $i3$
    i32.load offset=0 align=4
    local.get $n
    i32.sub
    i32.store offset=0 align=4
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i4$
    local.get $i4$
    i32.load offset=0 align=4
    local.get $n
    i32.add
    i32.store offset=0 align=4
    local.get $p
    i32.const 0
    i32.ne
    br_if $2$
    end $3$
    local.get $size
    local.get $n
    i32.sub
    local.set $size
    br $1$
    end $1$
    end $2$
    local.get $s
    local.tee $i5$
    i32.const 0
    i32.store8 offset=0 align=1
    local.get $s0
    return
  )
  (func $stdio:ungetc (export "ungetc")
    (param $c i32) (param $fp i32) (result i32) 
    (local $i1$ i32) (local $i3$ i32) (local $i2$ i32) (local $i4$ i32) 
    local.get $c
    i32.const -1
    i32.eq
    if
    i32.const -1
    return
    end
    local.get $fp
    i32.load offset=16 align=4
    i32.const 1
    i32.and
    i32.const 0
    i32.eq
    if (result i32)
    i32.const 1
    else
    local.get $fp
    i32.load offset=8 align=4
    local.get $fp
    i32.load offset=4 align=4
    i32.le_u
    end
    if
    local.get $fp
    i32.load offset=8 align=4
    local.get $fp
    i32.load offset=4 align=4
    i32.eq
    if (result i32)
    local.get $fp
    i32.load offset=0 align=4
    i32.const 0
    i32.eq
    else
    i32.const 0
    end
    if
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i1$
    local.get $i1$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    else
    i32.const -1
    return
    end
    end
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i2$
    local.get $i2$
    i32.load offset=0 align=4
    i32.const 1
    i32.sub
    i32.store offset=0 align=4
    local.get $i2$
    i32.load offset=0 align=4
    local.tee $i3$
    local.get $c
    i32.store8 offset=0 align=1
    local.get $fp
    local.tee $i4$
    local.get $i4$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    local.get $c
    return
  )
  (func $stdio:fseek (export "fseek")
    (param $fp i32) (param $offset i32) (param $origin i32) (result i32) 
    (local $c i32) (local $p i32) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) (local $i4$ i32) (local $i5$ i32) (local $i6$ i32) (local $i7$ i32) (local $i8$ i32) (local $i9$ i32) 
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i1$
    local.get $i1$
    i32.load offset=0 align=4
    i32.const -17
    i32.and
    i32.store offset=0 align=4
    local.get $fp
    i32.load offset=16 align=4
    i32.const 1
    i32.and
    if
    local.get $origin
    i32.const 2
    i32.lt_s
    if (result i32)
    local.get $fp
    i32.load offset=4 align=4
    i32.const 0
    i32.ne
    else
    i32.const 0
    end
    if (result i32)
    local.get $fp
    i32.load offset=16 align=4
    i32.const 4
    i32.and
    i32.eqz
    else
    i32.const 0
    end
    if
    local.get $fp
    i32.load offset=0 align=4
    local.set $c
    local.get $offset
    local.set $p
    local.get $origin
    i32.const 0
    i32.eq
    if
    local.get $p
    local.get $c
    local.get $fp
    i32.load offset=20 align=4
    i32.const 0
    i64.extend_i32_s
    i32.const 1
    call $unistd:lseek
    i32.wrap_i64
    i32.sub
    i32.add
    local.set $p
    else
    local.get $offset
    local.get $c
    i32.sub
    local.set $offset
    end
    local.get $fp
    i32.load offset=16 align=4
    i32.const 128
    i32.and
    i32.eqz
    if (result i32)
    local.get $c
    i32.const 0
    i32.gt_s
    else
    i32.const 0
    end
    if (result i32)
    local.get $p
    local.get $c
    i32.le_s
    else
    i32.const 0
    end
    if (result i32)
    local.get $p
    local.get $fp
    i32.load offset=4 align=4
    local.get $fp
    i32.load offset=8 align=4
    i32.sub
    i32.ge_s
    else
    i32.const 0
    end
    if
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i2$
    local.get $i2$
    i32.load offset=0 align=4
    local.get $p
    i32.add
    i32.store offset=0 align=4
    local.get $fp
    local.tee $i3$
    local.get $i3$
    i32.load offset=0 align=4
    local.get $p
    i32.sub
    i32.store offset=0 align=4
    i32.const 0
    return
    end
    end
    local.get $fp
    i32.load offset=16 align=4
    i32.const 128
    i32.and
    if
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i4$
    local.get $fp
    i32.load offset=4 align=4
    i32.store offset=0 align=4
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i5$
    local.get $i5$
    i32.load offset=0 align=4
    i32.const -2
    i32.and
    i32.store offset=0 align=4
    end
    local.get $fp
    i32.load offset=20 align=4
    local.get $offset
    i64.extend_i32_s
    local.get $origin
    call $unistd:lseek
    i32.wrap_i64
    local.set $p
    local.get $fp
    local.tee $i6$
    i32.const 0
    i32.store offset=0 align=4
    else
    local.get $fp
    i32.load offset=16 align=4
    i32.const 130
    i32.and
    if
    local.get $fp
    call $stdio:fflush
    drop
    local.get $fp
    local.tee $i7$
    i32.const 0
    i32.store offset=0 align=4
    local.get $fp
    i32.load offset=16 align=4
    i32.const 128
    i32.and
    if
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i8$
    local.get $i8$
    i32.load offset=0 align=4
    i32.const -3
    i32.and
    i32.store offset=0 align=4
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i9$
    local.get $fp
    i32.load offset=4 align=4
    i32.store offset=0 align=4
    end
    local.get $fp
    i32.load offset=20 align=4
    local.get $offset
    i64.extend_i32_s
    local.get $origin
    call $unistd:lseek
    i32.wrap_i64
    local.set $p
    end
    end
    i32.const -1
    i32.const 0
    local.get $p
    i32.const -1
    i32.eq
    select
    return
  )
  (func $stdio:ftell (export "ftell")
    (param $fp i32) (result i32) 
    (local $offset i32) (local $adjust i32) (local $i1$ i32) 
    local.get $fp
    i32.load offset=0 align=4
    i32.const 0
    i32.lt_s
    if
    local.get $fp
    local.tee $i1$
    i32.const 0
    i32.store offset=0 align=4
    end
    local.get $fp
    i32.load offset=16 align=4
    i32.const 1
    i32.and
    if
    i32.const 0
    local.get $fp
    i32.load offset=0 align=4
    i32.sub
    local.set $adjust
    else
    local.get $fp
    i32.load offset=16 align=4
    i32.const 130
    i32.and
    if
    i32.const 0
    local.set $adjust
    local.get $fp
    i32.load offset=16 align=4
    i32.const 2
    i32.and
    if (result i32)
    local.get $fp
    i32.load offset=4 align=4
    i32.const 0
    i32.ne
    else
    i32.const 0
    end
    if (result i32)
    local.get $fp
    i32.load offset=16 align=4
    i32.const 4
    i32.and
    i32.const 0
    i32.eq
    else
    i32.const 0
    end
    if
    local.get $fp
    i32.load offset=8 align=4
    local.get $fp
    i32.load offset=4 align=4
    i32.sub
    local.set $adjust
    end
    else
    i32.const -1
    return
    end
    end
    local.get $fp
    i32.load offset=20 align=4
    i32.const 0
    i64.extend_i32_s
    i32.const 1
    call $unistd:lseek
    i32.wrap_i64
    local.tee $offset
    i32.const 0
    i32.ge_s
    if
    local.get $offset
    local.get $adjust
    i32.add
    local.set $offset
    end
    local.get $offset
    return
  )
  (func $stdio:rewind (export "rewind")
    (param $fp i32) 
    (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) (local $i4$ i32) 
    local.get $fp
    call $stdio:fflush
    drop
    local.get $fp
    i32.load offset=20 align=4
    i32.const 0
    i64.extend_i32_s
    i32.const 0
    call $unistd:lseek
    drop
    local.get $fp
    local.tee $i1$
    i32.const 0
    i32.store offset=0 align=4
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i2$
    local.get $fp
    i32.load offset=4 align=4
    i32.store offset=0 align=4
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i3$
    local.get $i3$
    i32.load offset=0 align=4
    i32.const -49
    i32.and
    i32.store offset=0 align=4
    local.get $fp
    i32.load offset=16 align=4
    i32.const 128
    i32.and
    if
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i4$
    local.get $i4$
    i32.load offset=0 align=4
    i32.const -4
    i32.and
    i32.store offset=0 align=4
    end
  )
  (func $stdio:fgetpos (export "fgetpos")
    (param $fp i32) (param $ptr i32) (result i32) 
    (local $offset i64) (local $adjust i32) (local $i1$ i32) (local $i2$ i32) 
    local.get $fp
    i32.load offset=0 align=4
    i32.const 0
    i32.lt_s
    if
    local.get $fp
    local.tee $i1$
    i32.const 0
    i32.store offset=0 align=4
    end
    local.get $fp
    i32.load offset=16 align=4
    i32.const 1
    i32.and
    if
    i32.const 0
    local.get $fp
    i32.load offset=0 align=4
    i32.sub
    local.set $adjust
    else
    local.get $fp
    i32.load offset=16 align=4
    i32.const 130
    i32.and
    if
    i32.const 0
    local.set $adjust
    local.get $fp
    i32.load offset=16 align=4
    i32.const 2
    i32.and
    if (result i32)
    local.get $fp
    i32.load offset=4 align=4
    i32.const 0
    i32.ne
    else
    i32.const 0
    end
    if (result i32)
    local.get $fp
    i32.load offset=16 align=4
    i32.const 4
    i32.and
    i32.const 0
    i32.eq
    else
    i32.const 0
    end
    if
    local.get $fp
    i32.load offset=8 align=4
    local.get $fp
    i32.load offset=4 align=4
    i32.sub
    local.set $adjust
    end
    else
    i32.const -1
    return
    end
    end
    local.get $fp
    i32.load offset=20 align=4
    i32.const 0
    i64.extend_i32_s
    i32.const 1
    call $unistd:lseek
    local.tee $offset
    i32.const 0
    i64.extend_i32_s
    i64.ge_s
    if
    local.get $offset
    local.get $adjust
    i64.extend_i32_s
    i64.add
    local.set $offset
    end
    local.get $ptr
    local.tee $i2$
    local.get $offset
    i64.store offset=0 align=8
    i32.const 0
    return
  )
  (func $stdio:fsetpos (export "fsetpos")
    (param $fp i32) (param $ptr i32) (result i32) 
    (local $c i32) (local $offset i64) (local $p i64) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) (local $i4$ i32) (local $i5$ i32) (local $i6$ i32) (local $i7$ i32) (local $i8$ i32) (local $i9$ i32) 
    local.get $ptr
    i64.load offset=0 align=8
    local.set $offset
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i1$
    local.get $i1$
    i32.load offset=0 align=4
    i32.const -17
    i32.and
    i32.store offset=0 align=4
    local.get $fp
    i32.load offset=16 align=4
    i32.const 1
    i32.and
    if
    local.get $fp
    i32.load offset=4 align=4
    i32.const 0
    i32.ne
    if (result i32)
    local.get $fp
    i32.load offset=16 align=4
    i32.const 4
    i32.and
    i32.eqz
    else
    i32.const 0
    end
    if
    local.get $fp
    i32.load offset=0 align=4
    local.set $c
    local.get $offset
    local.tee $p
    local.get $c
    i64.extend_i32_s
    local.get $fp
    i32.load offset=20 align=4
    i32.const 0
    i64.extend_i32_s
    i32.const 1
    call $unistd:lseek
    i64.sub
    i64.add
    local.set $p
    local.get $fp
    i32.load offset=16 align=4
    i32.const 128
    i32.and
    i32.eqz
    if (result i32)
    local.get $c
    i32.const 0
    i32.gt_s
    else
    i32.const 0
    end
    if (result i32)
    local.get $p
    local.get $c
    i64.extend_i32_s
    i64.le_s
    else
    i32.const 0
    end
    if (result i32)
    local.get $p
    local.get $fp
    i32.load offset=4 align=4
    local.get $fp
    i32.load offset=8 align=4
    i32.sub
    i64.extend_i32_s
    i64.ge_s
    else
    i32.const 0
    end
    if
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i2$
    local.get $i2$
    i32.load offset=0 align=4
    local.get $p
    i32.wrap_i64
    i32.add
    i32.store offset=0 align=4
    local.get $fp
    local.tee $i3$
    local.get $i3$
    i32.load offset=0 align=4
    local.get $p
    i32.wrap_i64
    i32.sub
    i32.store offset=0 align=4
    i32.const 0
    return
    end
    end
    local.get $fp
    i32.load offset=16 align=4
    i32.const 128
    i32.and
    if
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i4$
    local.get $fp
    i32.load offset=4 align=4
    i32.store offset=0 align=4
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i5$
    local.get $i5$
    i32.load offset=0 align=4
    i32.const -2
    i32.and
    i32.store offset=0 align=4
    end
    local.get $fp
    i32.load offset=20 align=4
    local.get $offset
    i32.const 0
    call $unistd:lseek
    local.set $p
    local.get $fp
    local.tee $i6$
    i32.const 0
    i32.store offset=0 align=4
    else
    local.get $fp
    i32.load offset=16 align=4
    i32.const 130
    i32.and
    if
    local.get $fp
    call $stdio:fflush
    drop
    local.get $fp
    local.tee $i7$
    i32.const 0
    i32.store offset=0 align=4
    local.get $fp
    i32.load offset=16 align=4
    i32.const 128
    i32.and
    if
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i8$
    local.get $i8$
    i32.load offset=0 align=4
    i32.const -3
    i32.and
    i32.store offset=0 align=4
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i9$
    local.get $fp
    i32.load offset=4 align=4
    i32.store offset=0 align=4
    end
    local.get $fp
    i32.load offset=20 align=4
    local.get $offset
    i32.const 0
    call $unistd:lseek
    local.set $p
    end
    end
    i32.const -1
    i32.const 0
    local.get $p
    i32.const -1
    i64.extend_i32_s
    i64.eq
    select
    return
  )
  (func $stdio:fflush (export "fflush")
    (param $fp i32) (result i32) 
    (local $i1$ i32) 
    local.get $fp
    i32.load offset=16 align=4
    i32.const 2
    i32.and
    i32.eqz
    if
    local.get $fp
    local.tee $i1$
    i32.const 0
    i32.store offset=0 align=4
    i32.const 0
    return
    end
    block $1$
    loop $2$
    local.get $fp
    i32.load offset=16 align=4
    i32.const 4
    i32.and
    i32.eqz
    if (result i32)
    local.get $fp
    i32.load offset=16 align=4
    i32.const 2
    i32.and
    else
    i32.const 0
    end
    if (result i32)
    local.get $fp
    i32.load offset=4 align=4
    i32.const 0
    i32.ne
    else
    i32.const 0
    end
    if (result i32)
    local.get $fp
    i32.load offset=8 align=4
    local.get $fp
    i32.load offset=4 align=4
    i32.gt_u
    else
    i32.const 0
    end
    if
    local.get $fp
    call $stdio:writebuf
    drop
    br $2$
    end
    end $2$
    end $1$
    i32.const -1
    i32.const 0
    local.get $fp
    i32.load offset=16 align=4
    i32.const 32
    i32.and
    select
    return
  )
  (func $stdio:setvbuf (export "setvbuf")
    (param $fp i32) (param $buf i32) (param $mode i32) (param $size i32) (result i32) 
    (local $i2$ i32) (local $i1$ i32) (local $i3$ i32) (local $i4$ i32) (local $i6$ i32) (local $i5$ i32) (local $i7$ i32) (local $i8$ i32) (local $i9$ i32) (local $i10$ i32) (local $i11$ i32) (local $i12$ i32) (local $i13$ i32) (local $i14$ i32) (local $i15$ i32) (local $i16$ i32) 
    local.get $fp
    i32.load offset=4 align=4
    i32.const 0
    i32.ne
    if (result i32)
    local.get $fp
    i32.load offset=4 align=4
    local.get $fp
    i32.const 24
    i32.add
    i32.ne
    else
    i32.const 0
    end
    if
    local.get $fp
    i32.load offset=16 align=4
    i32.const 256
    i32.and
    if
    local.get $fp
    i32.load offset=4 align=4
    call $stdlib:free
    end
    local.get $fp
    i32.const 4
    i32.add
    local.tee $i2$
    local.get $fp
    i32.const 12
    i32.add
    local.tee $i1$
    i32.const 0
    i32.store offset=0 align=4
    local.get $i1$
    i32.load offset=0 align=4
    i32.store offset=0 align=4
    end
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i3$
    local.get $i3$
    i32.load offset=0 align=4
    i32.const -325
    i32.and
    i32.store offset=0 align=4
    block $1$
    block $5$
    block $4$
    block $3$
    block $2$
    i32.const 0
    local.get $mode
    i32.eq
    br_if $4$
    i32.const 4
    local.get $mode
    i32.eq
    br_if $2$
    i32.const 64
    local.get $mode
    i32.eq
    br_if $3$
    br $5$
    end $2$
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i4$
    local.get $i4$
    i32.load offset=0 align=4
    i32.const 4
    i32.or
    i32.store offset=0 align=4
    local.get $fp
    i32.const 4
    i32.add
    local.tee $i6$
    local.get $fp
    i32.const 12
    i32.add
    local.tee $i5$
    i32.const 0
    i32.store offset=0 align=4
    local.get $i5$
    i32.load offset=0 align=4
    i32.store offset=0 align=4
    br $1$
    end $3$
    end $4$
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i7$
    local.get $i7$
    i32.load offset=0 align=4
    local.get $mode
    i32.or
    i32.store offset=0 align=4
    i32.const 1024
    local.get $size
    local.get $size
    i32.const 0
    i32.eq
    select
    local.set $size
    local.get $buf
    i32.const 0
    i32.ne
    if (result i32)
    local.get $size
    i32.const 8
    i32.gt_u
    else
    i32.const 0
    end
    if
    local.get $fp
    i32.const 4
    i32.add
    local.tee $i8$
    local.get $buf
    i32.store offset=0 align=4
    local.get $fp
    i32.const 12
    i32.add
    local.tee $i9$
    local.get $fp
    i32.load offset=4 align=4
    local.get $size
    i32.add
    i32.const 8
    i32.sub
    i32.store offset=0 align=4
    else
    local.get $size
    i32.const 8
    i32.gt_u
    if (result i32)
    local.get $fp
    i32.const 4
    i32.add
    local.tee $i10$
    local.get $size
    i32.const 8
    i32.add
    call $stdlib:malloc
    i32.store offset=0 align=4
    local.get $i10$
    i32.load offset=0 align=4
    i32.const 0
    i32.ne
    else
    i32.const 0
    end
    if
    local.get $fp
    i32.const 12
    i32.add
    local.tee $i11$
    local.get $fp
    i32.load offset=4 align=4
    local.get $size
    i32.add
    i32.const 8
    i32.add
    i32.store offset=0 align=4
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i12$
    local.get $i12$
    i32.load offset=0 align=4
    i32.const 256
    i32.or
    i32.store offset=0 align=4
    else
    local.get $fp
    i32.const 4
    i32.add
    local.tee $i13$
    local.get $fp
    i32.const 24
    i32.add
    i32.store offset=0 align=4
    local.get $fp
    i32.const 12
    i32.add
    local.tee $i14$
    local.get $fp
    i32.load offset=4 align=4
    i32.const 8
    i32.add
    i32.store offset=0 align=4
    end
    end
    br $1$
    end $5$
    i32.const -1
    return
    end $1$
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i15$
    local.get $fp
    i32.load offset=4 align=4
    i32.store offset=0 align=4
    local.get $fp
    local.tee $i16$
    i32.const 0
    i32.store offset=0 align=4
    i32.const 0
    return
  )
  (func $stdio:setbuf (export "setbuf")
    (param $fp i32) (param $buf i32) 
    local.get $fp
    local.get $buf
    i32.const 4
    i32.const 0
    local.get $buf
    i32.const 0
    i32.eq
    select
    i32.const 1024
    call $stdio:setvbuf
    drop
  )
  (func $stdio:_out_buffer
    (param $c i32) (param $buffer i32) (param $idx i32) (param $maxlen i32) 
    (local $i1$ i32) 
    local.get $idx
    local.get $maxlen
    i32.lt_u
    if
    local.get $buffer
    local.get $idx
    i32.add
    local.tee $i1$
    local.get $c
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    i32.store8 offset=0 align=1
    end
  )
  (func $stdio:_out_null
    (param $c i32) (param $buffer i32) (param $idx i32) (param $maxlen i32) 
  )
  (func $stdio:_out_char
    (param $c i32) (param $buffer i32) (param $idx i32) (param $maxlen i32) 
    (local $fp i32) (local $i1$ i32) (local $i3$ i32) (local $i2$ i32) 
    local.get $buffer
    local.set $fp
    local.get $c
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    i32.const 0
    i32.ne
    if
    local.get $fp
    local.tee $i1$
    local.get $i1$
    i32.load offset=0 align=4
    i32.const 1
    i32.sub
    i32.store offset=0 align=4
    local.get $i1$
    i32.load offset=0 align=4
    i32.const 0
    i32.ge_s
    if (result i32)
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i2$
    i32.load offset=0 align=4
    local.get $i2$
    local.get $i2$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    local.tee $i3$
    local.get $c
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    i32.store8 offset=0 align=1
    local.get $i3$
    i32.load8_u offset=0 align=1
    else
    local.get $c
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    local.get $fp
    call $stdio:_flushbuf
    end
    drop
    end
  )
  (func $stdio:_out_fct
    (param $c i32) (param $buffer i32) (param $idx i32) (param $maxlen i32) 
    (local $pw i32) 
    local.get $buffer
    local.set $pw
    local.get $c
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    i32.const 0
    i32.ne
    if
    local.get $c
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    local.get $pw
    i32.load offset=4 align=4
    local.get $pw
    i32.load offset=0 align=4
    call_indirect (param i32 i32) (result)
    end
  )
  (func $stdio:_strnlen_s
    (param $str i32) (param $maxsize i32) (result i32) 
    (local $s i32) 
    block $2$
    local.get $str
    local.set $s
    loop $1$
    local.get $s
    i32.load8_s offset=0 align=1
    if (result i32)
    local.get $maxsize
    local.get $maxsize
    i32.const 1
    i32.sub
    local.set $maxsize
    else
    i32.const 0
    end
    i32.eqz
    br_if $2$
    block $3$
    end $3$
    local.get $s
    i32.const 1
    i32.add
    local.set $s
    br $1$
    end $1$
    end $2$
    local.get $s
    local.get $str
    i32.sub
    return
  )
  (func $stdio:_is_digit
    (param $ch i32) (result i32) 
    local.get $ch
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    i32.const 48
    i32.ge_s
    if (result i32)
    local.get $ch
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    i32.const 57
    i32.le_s
    else
    i32.const 0
    end
    return
  )
  (func $stdio:_atoi
    (param $str i32) (result i32) 
    (local $i i32) (local $i1$ i32) 
    i32.const 0
    local.set $i
    block $1$
    loop $2$
    local.get $str
    i32.load offset=0 align=4
    i32.load8_s offset=0 align=1
    call $stdio:_is_digit
    i32.extend8_s
    i32.const 0
    i32.ne
    if
    local.get $i
    i32.const 10
    i32.mul
    local.get $str
    local.tee $i1$
    i32.load offset=0 align=4
    local.get $i1$
    local.get $i1$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    i32.load8_s offset=0 align=1
    i32.const 48
    i32.sub
    i32.add
    local.set $i
    br $2$
    end
    end $2$
    end $1$
    local.get $i
    return
  )
  (func $stdio:_out_rev
    (param $out i32) (param $buffer i32) (param $idx i32) (param $maxlen i32) (param $buf i32) (param $len i32) (param $width i32) (param $flags i32) (result i32) 
    (local $start_idx i32) (local $i i32) 
    local.get $idx
    local.set $start_idx
    local.get $flags
    i32.const 2
    i32.and
    i32.eqz
    if (result i32)
    local.get $flags
    i32.const 1
    i32.and
    i32.eqz
    else
    i32.const 0
    end
    if
    block $2$
    local.get $len
    local.set $i
    loop $1$
    local.get $i
    local.get $width
    i32.lt_u
    i32.eqz
    br_if $2$
    block $3$
    i32.const 32
    local.get $buffer
    local.get $idx
    local.get $idx
    i32.const 1
    i32.add
    local.set $idx
    local.get $maxlen
    local.get $out
    call_indirect (param i32 i32 i32 i32) (result)
    end $3$
    local.get $i
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    drop
    br $1$
    end $1$
    end $2$
    end
    block $4$
    loop $5$
    local.get $len
    if
    local.get $buf
    local.get $len
    i32.const 1
    i32.sub
    local.tee $len
    i32.add
    i32.load8_s offset=0 align=1
    local.get $buffer
    local.get $idx
    local.get $idx
    i32.const 1
    i32.add
    local.set $idx
    local.get $maxlen
    local.get $out
    call_indirect (param i32 i32 i32 i32) (result)
    br $5$
    end
    end $5$
    end $4$
    local.get $flags
    i32.const 2
    i32.and
    if
    block $6$
    loop $7$
    local.get $idx
    local.get $start_idx
    i32.sub
    local.get $width
    i32.lt_u
    if
    i32.const 32
    local.get $buffer
    local.get $idx
    local.get $idx
    i32.const 1
    i32.add
    local.set $idx
    local.get $maxlen
    local.get $out
    call_indirect (param i32 i32 i32 i32) (result)
    br $7$
    end
    end $7$
    end $6$
    end
    local.get $idx
    return
  )
  (func $stdio:_ntoa_format
    (param $out i32) (param $buffer i32) (param $idx i32) (param $maxlen i32) (param $buf i32) (param $len i32) (param $negative i32) (param $base i32) (param $prec i32) (param $width i32) (param $flags i32) (result i32) 
    (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) (local $i4$ i32) (local $i5$ i32) (local $i6$ i32) (local $i7$ i32) (local $i8$ i32) (local $i9$ i32) 
    local.get $flags
    i32.const 2
    i32.and
    i32.eqz
    if
    local.get $width
    if (result i32)
    local.get $flags
    i32.const 1
    i32.and
    else
    i32.const 0
    end
    if (result i32)
    local.get $negative
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    i32.const 0
    i32.ne
    if (result i32)
    i32.const 1
    else
    local.get $flags
    i32.const 12
    i32.and
    end
    else
    i32.const 0
    end
    if
    local.get $width
    i32.const 1
    i32.sub
    local.set $width
    end
    block $1$
    loop $2$
    local.get $len
    local.get $prec
    i32.lt_u
    if (result i32)
    local.get $len
    i32.const 32
    i32.lt_u
    else
    i32.const 0
    end
    if
    local.get $buf
    local.get $len
    local.get $len
    i32.const 1
    i32.add
    local.set $len
    i32.add
    local.tee $i1$
    i32.const 48
    i32.store8 offset=0 align=1
    br $2$
    end
    end $2$
    end $1$
    block $3$
    loop $4$
    local.get $flags
    i32.const 1
    i32.and
    if (result i32)
    local.get $len
    local.get $width
    i32.lt_u
    else
    i32.const 0
    end
    if (result i32)
    local.get $len
    i32.const 32
    i32.lt_u
    else
    i32.const 0
    end
    if
    local.get $buf
    local.get $len
    local.get $len
    i32.const 1
    i32.add
    local.set $len
    i32.add
    local.tee $i2$
    i32.const 48
    i32.store8 offset=0 align=1
    br $4$
    end
    end $4$
    end $3$
    end
    local.get $flags
    i32.const 16
    i32.and
    if
    local.get $len
    i32.const 0
    local.get $flags
    i32.const 1024
    i32.and
    i32.eqz
    select
    if (result i32)
    local.get $len
    local.get $prec
    i32.eq
    if (result i32)
    i32.const 1
    else
    local.get $len
    local.get $width
    i32.eq
    end
    else
    i32.const 0
    end
    if
    local.get $len
    i32.const 1
    i32.sub
    local.tee $len
    if (result i32)
    local.get $base
    i32.const 16
    i32.eq
    else
    i32.const 0
    end
    if
    local.get $len
    i32.const 1
    i32.sub
    local.set $len
    end
    end
    local.get $base
    i32.const 16
    i32.eq
    if (result i32)
    local.get $flags
    i32.const 32
    i32.and
    i32.eqz
    else
    i32.const 0
    end
    if (result i32)
    local.get $len
    i32.const 32
    i32.lt_u
    else
    i32.const 0
    end
    if
    local.get $buf
    local.get $len
    local.get $len
    i32.const 1
    i32.add
    local.set $len
    i32.add
    local.tee $i3$
    i32.const 120
    i32.store8 offset=0 align=1
    else
    local.get $base
    i32.const 16
    i32.eq
    if (result i32)
    local.get $flags
    i32.const 32
    i32.and
    else
    i32.const 0
    end
    if (result i32)
    local.get $len
    i32.const 32
    i32.lt_u
    else
    i32.const 0
    end
    if
    local.get $buf
    local.get $len
    local.get $len
    i32.const 1
    i32.add
    local.set $len
    i32.add
    local.tee $i4$
    i32.const 88
    i32.store8 offset=0 align=1
    else
    local.get $base
    i32.const 2
    i32.eq
    if (result i32)
    local.get $len
    i32.const 32
    i32.lt_u
    else
    i32.const 0
    end
    if
    local.get $buf
    local.get $len
    local.get $len
    i32.const 1
    i32.add
    local.set $len
    i32.add
    local.tee $i5$
    i32.const 98
    i32.store8 offset=0 align=1
    end
    end
    end
    local.get $len
    i32.const 32
    i32.lt_u
    if
    local.get $buf
    local.get $len
    local.get $len
    i32.const 1
    i32.add
    local.set $len
    i32.add
    local.tee $i6$
    i32.const 48
    i32.store8 offset=0 align=1
    end
    end
    local.get $len
    i32.const 32
    i32.lt_u
    if
    local.get $negative
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    i32.const 0
    i32.ne
    if
    local.get $buf
    local.get $len
    local.get $len
    i32.const 1
    i32.add
    local.set $len
    i32.add
    local.tee $i7$
    i32.const 45
    i32.store8 offset=0 align=1
    else
    local.get $flags
    i32.const 4
    i32.and
    if
    local.get $buf
    local.get $len
    local.get $len
    i32.const 1
    i32.add
    local.set $len
    i32.add
    local.tee $i8$
    i32.const 43
    i32.store8 offset=0 align=1
    else
    local.get $flags
    i32.const 8
    i32.and
    if
    local.get $buf
    local.get $len
    local.get $len
    i32.const 1
    i32.add
    local.set $len
    i32.add
    local.tee $i9$
    i32.const 32
    i32.store8 offset=0 align=1
    end
    end
    end
    end
    local.get $out
    local.get $buffer
    local.get $idx
    local.get $maxlen
    local.get $buf
    local.get $len
    local.get $width
    local.get $flags
    call $stdio:_out_rev
    return
  )
  (func $stdio:_ntoa_long
    (param $out i32) (param $buffer i32) (param $idx i32) (param $maxlen i32) (param $value i32) (param $negative i32) (param $base i32) (param $prec i32) (param $width i32) (param $flags i32) (result i32) 
    (local $len i32) (local $digit i32) (local $fp$ i32) (local $i1$ i32) 
    global.get $env:__stack_pointer
    global.get $env:__stack_pointer
    i32.const 32
    i32.sub
    global.set $env:__stack_pointer
    local.set $fp$
    i32.const 0
    local.set $len
    local.get $value
    i32.eqz
    if
    local.get $flags
    i32.const -17
    i32.and
    local.set $flags
    end
    i32.const 1
    local.get $value
    local.get $flags
    i32.const 1024
    i32.and
    i32.eqz
    select
    if
    block $2$
    loop $1$
    block $3$
    local.get $value
    local.get $base
    i32.rem_u
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    local.set $digit
    local.get $fp$
    local.get $len
    local.get $len
    i32.const 1
    i32.add
    local.set $len
    i32.add
    local.tee $i1$
    local.get $digit
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    i32.const 10
    i32.lt_s
    if (result i32)
    i32.const 48
    local.get $digit
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    i32.add
    else
    i32.const 65
    i32.const 97
    local.get $flags
    i32.const 32
    i32.and
    select
    local.get $digit
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    i32.add
    i32.const 10
    i32.sub
    end
    i32.store8 offset=0 align=1
    local.get $value
    local.get $base
    i32.div_u
    local.set $value
    end $3$
    local.get $value
    if (result i32)
    local.get $len
    i32.const 32
    i32.lt_u
    else
    i32.const 0
    end
    br_if $1$
    end $1$
    end $2$
    end
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $out
    local.get $buffer
    local.get $idx
    local.get $maxlen
    local.get $fp$
    local.get $len
    local.get $negative
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    local.get $base
    local.get $prec
    local.get $width
    local.get $flags
    call $stdio:_ntoa_format
    return
  )
  (func $stdio:_ntoa_long_long
    (param $out i32) (param $buffer i32) (param $idx i32) (param $maxlen i32) (param $value i64) (param $negative i32) (param $base i64) (param $prec i32) (param $width i32) (param $flags i32) (result i32) 
    (local $len i32) (local $digit i32) (local $fp$ i32) (local $i1$ i32) 
    global.get $env:__stack_pointer
    global.get $env:__stack_pointer
    i32.const 32
    i32.sub
    global.set $env:__stack_pointer
    local.set $fp$
    i32.const 0
    local.set $len
    local.get $value
    i64.eqz
    if
    local.get $flags
    i32.const -17
    i32.and
    local.set $flags
    end
    i32.const 1
    local.get $value
    local.get $flags
    i32.const 1024
    i32.and
    i32.eqz
    select
    i32.const 0
    i64.extend_i32_u
    i64.ne
    if
    block $2$
    loop $1$
    block $3$
    local.get $value
    local.get $base
    i64.rem_u
    i32.wrap_i64
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    local.set $digit
    local.get $fp$
    local.get $len
    local.get $len
    i32.const 1
    i32.add
    local.set $len
    i32.add
    local.tee $i1$
    local.get $digit
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    i32.const 10
    i32.lt_s
    if (result i32)
    i32.const 48
    local.get $digit
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    i32.add
    else
    i32.const 65
    i32.const 97
    local.get $flags
    i32.const 32
    i32.and
    select
    local.get $digit
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    i32.add
    i32.const 10
    i32.sub
    end
    i32.store8 offset=0 align=1
    local.get $value
    local.get $base
    i64.div_u
    local.set $value
    end $3$
    local.get $value
    i32.const 0
    i64.extend_i32_u
    i64.ne
    if (result i32)
    local.get $len
    i32.const 32
    i32.lt_u
    else
    i32.const 0
    end
    br_if $1$
    end $1$
    end $2$
    end
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $out
    local.get $buffer
    local.get $idx
    local.get $maxlen
    local.get $fp$
    local.get $len
    local.get $negative
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    local.get $base
    i32.wrap_i64
    local.get $prec
    local.get $width
    local.get $flags
    call $stdio:_ntoa_format
    return
  )
  (func $stdio:_ftoa
    (param $out i32) (param $buffer i32) (param $idx i32) (param $maxlen i32) (param $value f64) (param $prec i32) (param $width i32) (param $flags i32) (result i32) 
    (local $len i32) (local $diff f64) (local $negative i32) (local $whole i32) (local $tmp f64) (local $frac i32) (local $count i32) (local $fp$ i32) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) (local $i4$ i32) (local $i5$ i32) (local $i6$ i32) (local $i7$ i32) (local $i8$ i32) (local $i9$ i32) 
    global.get $env:__stack_pointer
    global.get $env:__stack_pointer
    i32.const 32
    i32.sub
    global.set $env:__stack_pointer
    local.set $fp$
    i32.const 0
    local.set $len
    f64.const 0
    local.set $diff
    local.get $value
    local.get $value
    f64.ne
    if
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $out
    local.get $buffer
    local.get $idx
    local.get $maxlen
    ref.data $stdio:ds40$
    i32.const 3
    local.get $width
    local.get $flags
    call $stdio:_out_rev
    return
    end
    local.get $value
    f64.const -1.7976931348623157e+308
    f64.lt
    if
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $out
    local.get $buffer
    local.get $idx
    local.get $maxlen
    ref.data $stdio:ds41$
    i32.const 4
    local.get $width
    local.get $flags
    call $stdio:_out_rev
    return
    end
    local.get $value
    f64.const 1.7976931348623157e+308
    f64.gt
    if
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $out
    local.get $buffer
    local.get $idx
    local.get $maxlen
    local.get $flags
    i32.const 4
    i32.and
    if (result i32)
    ref.data $stdio:ds42$
    else
    ref.data $stdio:ds43$
    end
    i32.const 4
    i32.const 3
    local.get $flags
    i32.const 4
    i32.and
    select
    local.get $width
    local.get $flags
    call $stdio:_out_rev
    return
    end
    local.get $value
    f64.const 1000000000
    f64.gt
    if (result i32)
    i32.const 1
    else
    local.get $value
    f64.const -1000000000
    f64.lt
    end
    if
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $out
    local.get $buffer
    local.get $idx
    local.get $maxlen
    local.get $value
    local.get $prec
    local.get $width
    local.get $flags
    call $stdio:_etoa
    return
    end
    i32.const 0
    i32.extend8_s
    local.set $negative
    local.get $value
    i32.const 0
    f64.convert_i32_s
    f64.lt
    if
    i32.const 1
    i32.extend8_s
    local.set $negative
    local.get $value
    f64.neg
    local.set $value
    end
    local.get $flags
    i32.const 1024
    i32.and
    i32.eqz
    if
    i32.const 6
    local.set $prec
    end
    block $1$
    loop $2$
    local.get $len
    i32.const 32
    i32.lt_u
    if (result i32)
    local.get $prec
    i32.const 9
    i32.gt_u
    else
    i32.const 0
    end
    if
    local.get $fp$
    local.get $len
    local.get $len
    i32.const 1
    i32.add
    local.set $len
    i32.add
    local.tee $i1$
    i32.const 48
    i32.store8 offset=0 align=1
    local.get $prec
    local.get $prec
    i32.const 1
    i32.sub
    local.set $prec
    drop
    br $2$
    end
    end $2$
    end $1$
    local.get $value
    i32.trunc_f64_s
    local.set $whole
    local.get $value
    local.get $whole
    f64.convert_i32_s
    f64.sub
    ref.data $stdio:pow10
    local.get $prec
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    f64.mul
    local.tee $tmp
    i32.trunc_f64_u
    local.set $frac
    local.get $tmp
    local.get $frac
    f64.convert_i32_u
    f64.sub
    local.tee $diff
    f64.const 0.5
    f64.gt
    if
    local.get $frac
    i32.const 1
    i32.add
    local.tee $frac
    f64.convert_i32_u
    ref.data $stdio:pow10
    local.get $prec
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    f64.ge
    if
    i32.const 0
    local.set $frac
    local.get $whole
    i32.const 1
    i32.add
    local.set $whole
    end
    else
    local.get $diff
    f64.const 0.5
    f64.lt
    if
    else
    local.get $frac
    i32.const 0
    i32.eq
    if (result i32)
    i32.const 1
    else
    local.get $frac
    i32.const 1
    i32.and
    end
    if
    local.get $frac
    i32.const 1
    i32.add
    local.set $frac
    end
    end
    end
    local.get $prec
    i32.const 0
    i32.eq
    if
    local.get $value
    local.get $whole
    f64.convert_i32_s
    f64.sub
    local.tee $diff
    f64.const 0.5
    f64.lt
    i32.eqz
    if (result i32)
    i32.const 1
    else
    local.get $diff
    f64.const 0.5
    f64.gt
    end
    if (result i32)
    local.get $whole
    i32.const 1
    i32.and
    else
    i32.const 0
    end
    if
    local.get $whole
    i32.const 1
    i32.add
    local.set $whole
    end
    else
    local.get $prec
    local.set $count
    block $3$
    loop $4$
    local.get $len
    i32.const 32
    i32.lt_u
    if
    local.get $count
    i32.const 1
    i32.sub
    local.set $count
    local.get $fp$
    local.get $len
    local.get $len
    i32.const 1
    i32.add
    local.set $len
    i32.add
    local.tee $i2$
    i32.const 48
    local.get $frac
    i32.const 10
    i32.rem_u
    i32.add
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    i32.store8 offset=0 align=1
    local.get $frac
    i32.const 10
    i32.div_u
    local.tee $frac
    i32.eqz
    br_if $3$
    br $4$
    end
    end $4$
    end $3$
    block $5$
    loop $6$
    local.get $len
    i32.const 32
    i32.lt_u
    if (result i32)
    local.get $count
    local.get $count
    i32.const 1
    i32.sub
    local.set $count
    i32.const 0
    i32.gt_u
    else
    i32.const 0
    end
    if
    local.get $fp$
    local.get $len
    local.get $len
    i32.const 1
    i32.add
    local.set $len
    i32.add
    local.tee $i3$
    i32.const 48
    i32.store8 offset=0 align=1
    br $6$
    end
    end $6$
    end $5$
    local.get $len
    i32.const 32
    i32.lt_u
    if
    local.get $fp$
    local.get $len
    local.get $len
    i32.const 1
    i32.add
    local.set $len
    i32.add
    local.tee $i4$
    i32.const 46
    i32.store8 offset=0 align=1
    end
    end
    block $7$
    loop $8$
    local.get $len
    i32.const 32
    i32.lt_u
    if
    local.get $fp$
    local.get $len
    local.get $len
    i32.const 1
    i32.add
    local.set $len
    i32.add
    local.tee $i5$
    i32.const 48
    local.get $whole
    i32.const 10
    i32.rem_s
    i32.add
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    i32.store8 offset=0 align=1
    local.get $whole
    i32.const 10
    i32.div_s
    local.tee $whole
    i32.eqz
    br_if $7$
    br $8$
    end
    end $8$
    end $7$
    local.get $flags
    i32.const 2
    i32.and
    i32.eqz
    if (result i32)
    local.get $flags
    i32.const 1
    i32.and
    else
    i32.const 0
    end
    if
    local.get $width
    if (result i32)
    local.get $negative
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    i32.const 0
    i32.ne
    if (result i32)
    i32.const 1
    else
    local.get $flags
    i32.const 12
    i32.and
    end
    else
    i32.const 0
    end
    if
    local.get $width
    i32.const 1
    i32.sub
    local.set $width
    end
    block $9$
    loop $10$
    local.get $len
    local.get $width
    i32.lt_u
    if (result i32)
    local.get $len
    i32.const 32
    i32.lt_u
    else
    i32.const 0
    end
    if
    local.get $fp$
    local.get $len
    local.get $len
    i32.const 1
    i32.add
    local.set $len
    i32.add
    local.tee $i6$
    i32.const 48
    i32.store8 offset=0 align=1
    br $10$
    end
    end $10$
    end $9$
    end
    local.get $len
    i32.const 32
    i32.lt_u
    if
    local.get $negative
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    i32.const 0
    i32.ne
    if
    local.get $fp$
    local.get $len
    local.get $len
    i32.const 1
    i32.add
    local.set $len
    i32.add
    local.tee $i7$
    i32.const 45
    i32.store8 offset=0 align=1
    else
    local.get $flags
    i32.const 4
    i32.and
    if
    local.get $fp$
    local.get $len
    local.get $len
    i32.const 1
    i32.add
    local.set $len
    i32.add
    local.tee $i8$
    i32.const 43
    i32.store8 offset=0 align=1
    else
    local.get $flags
    i32.const 8
    i32.and
    if
    local.get $fp$
    local.get $len
    local.get $len
    i32.const 1
    i32.add
    local.set $len
    i32.add
    local.tee $i9$
    i32.const 32
    i32.store8 offset=0 align=1
    end
    end
    end
    end
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $out
    local.get $buffer
    local.get $idx
    local.get $maxlen
    local.get $fp$
    local.get $len
    local.get $width
    local.get $flags
    call $stdio:_out_rev
    return
  )
  (func $stdio:_etoa
    (param $out i32) (param $buffer i32) (param $idx i32) (param $maxlen i32) (param $value f64) (param $prec i32) (param $width i32) (param $flags i32) (result i32) 
    (local $negative i32) (local $exp2 i32) (local $expval i32) (local $z f64) (local $z2 f64) (local $minwidth i32) (local $fwidth i32) (local $start_idx i32) (local $fp$ i32) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) (local $i4$ i32) (local $i5$ i32) 
    global.get $env:__stack_pointer
    global.get $env:__stack_pointer
    i32.const 16
    i32.sub
    global.set $env:__stack_pointer
    local.set $fp$
    local.get $value
    local.get $value
    f64.ne
    if (result i32)
    i32.const 1
    else
    local.get $value
    f64.const 1.7976931348623157e+308
    f64.gt
    end
    if (result i32)
    i32.const 1
    else
    local.get $value
    f64.const -1.7976931348623157e+308
    f64.lt
    end
    if
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $out
    local.get $buffer
    local.get $idx
    local.get $maxlen
    local.get $value
    local.get $prec
    local.get $width
    local.get $flags
    call $stdio:_ftoa
    return
    end
    local.get $value
    i32.const 0
    f64.convert_i32_s
    f64.lt
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    local.tee $negative
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    i32.const 0
    i32.ne
    if
    local.get $value
    f64.neg
    local.set $value
    end
    local.get $flags
    i32.const 1024
    i32.and
    i32.eqz
    if
    i32.const 6
    local.set $prec
    end
    local.get $fp$
    local.tee $i1$
    local.get $value
    f64.store offset=0 align=8
    local.get $fp$
    i64.load offset=0 align=8
    i32.const 52
    i64.extend_i32_u
    i64.shr_u
    i32.const 2047
    i64.extend_i32_u
    i64.and
    i32.wrap_i64
    i32.const 1023
    i32.sub
    local.set $exp2
    local.get $fp$
    local.tee $i2$
    local.get $fp$
    i64.load offset=0 align=8
    i64.const 4503599627370495
    i64.and
    i64.const 4607182418800017408
    i64.or
    i64.store offset=0 align=8
    f64.const 0.1760912590558
    local.get $exp2
    f64.convert_i32_s
    f64.const 0.30102999566398098
    f64.mul
    f64.add
    local.get $fp$
    f64.load offset=0 align=8
    f64.const 1.5
    f64.sub
    f64.const 0.28952965460216801
    f64.mul
    f64.add
    i32.trunc_f64_s
    local.tee $expval
    f64.convert_i32_s
    f64.const 3.3219280948873622
    f64.mul
    f64.const 0.5
    f64.add
    i32.trunc_f64_s
    local.set $exp2
    local.get $expval
    f64.convert_i32_s
    f64.const 2.3025850929940459
    f64.mul
    local.get $exp2
    f64.convert_i32_s
    f64.const 0.69314718055994529
    f64.mul
    f64.sub
    local.tee $z
    local.get $z
    f64.mul
    local.set $z2
    local.get $fp$
    local.tee $i3$
    local.get $exp2
    i32.const 1023
    i32.add
    i64.extend_i32_s
    i32.const 52
    i64.extend_i32_u
    i64.shl
    i64.store offset=0 align=8
    local.get $fp$
    local.tee $i4$
    local.get $i4$
    f64.load offset=0 align=8
    i32.const 1
    f64.convert_i32_s
    i32.const 2
    f64.convert_i32_s
    local.get $z
    f64.mul
    i32.const 2
    f64.convert_i32_s
    local.get $z
    f64.sub
    local.get $z2
    i32.const 6
    f64.convert_i32_s
    local.get $z2
    i32.const 10
    f64.convert_i32_s
    local.get $z2
    i32.const 14
    f64.convert_i32_s
    f64.div
    f64.add
    f64.div
    f64.add
    f64.div
    f64.add
    f64.div
    f64.add
    f64.mul
    f64.store offset=0 align=8
    local.get $value
    local.get $fp$
    f64.load offset=0 align=8
    f64.lt
    if
    local.get $expval
    i32.const 1
    i32.sub
    local.set $expval
    local.get $fp$
    local.tee $i5$
    local.get $i5$
    f64.load offset=0 align=8
    i32.const 10
    f64.convert_i32_s
    f64.div
    f64.store offset=0 align=8
    end
    i32.const 4
    i32.const 5
    local.get $expval
    i32.const 100
    i32.lt_s
    if (result i32)
    local.get $expval
    i32.const -100
    i32.gt_s
    else
    i32.const 0
    end
    select
    local.set $minwidth
    local.get $flags
    i32.const 2048
    i32.and
    if
    local.get $value
    f64.const 0.0001
    f64.ge
    if (result i32)
    local.get $value
    f64.const 1000000
    f64.lt
    else
    i32.const 0
    end
    if
    local.get $prec
    local.get $expval
    i32.gt_s
    if
    local.get $prec
    local.get $expval
    i32.sub
    i32.const 1
    i32.sub
    local.set $prec
    else
    i32.const 0
    local.set $prec
    end
    local.get $flags
    i32.const 1024
    i32.or
    local.set $flags
    i32.const 0
    local.set $minwidth
    i32.const 0
    local.set $expval
    else
    local.get $prec
    i32.const 0
    i32.gt_u
    if (result i32)
    local.get $flags
    i32.const 1024
    i32.and
    else
    i32.const 0
    end
    if
    local.get $prec
    i32.const 1
    i32.sub
    local.set $prec
    end
    end
    end
    local.get $width
    local.set $fwidth
    local.get $width
    local.get $minwidth
    i32.gt_u
    if
    local.get $fwidth
    local.get $minwidth
    i32.sub
    local.set $fwidth
    else
    i32.const 0
    local.set $fwidth
    end
    local.get $minwidth
    i32.const 0
    local.get $flags
    i32.const 2
    i32.and
    select
    if
    i32.const 0
    local.set $fwidth
    end
    local.get $expval
    if
    local.get $value
    local.get $fp$
    f64.load offset=0 align=8
    f64.div
    local.set $value
    end
    local.get $idx
    local.set $start_idx
    local.get $out
    local.get $buffer
    local.get $idx
    local.get $maxlen
    local.get $negative
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    i32.const 0
    i32.ne
    if (result f64)
    local.get $value
    f64.neg
    else
    local.get $value
    end
    local.get $prec
    local.get $fwidth
    local.get $flags
    i32.const -2049
    i32.and
    call $stdio:_ftoa
    local.set $idx
    local.get $minwidth
    if
    i32.const 69
    i32.const 101
    local.get $flags
    i32.const 32
    i32.and
    select
    local.get $buffer
    local.get $idx
    local.get $idx
    i32.const 1
    i32.add
    local.set $idx
    local.get $maxlen
    local.get $out
    call_indirect (param i32 i32 i32 i32) (result)
    local.get $out
    local.get $buffer
    local.get $idx
    local.get $maxlen
    local.get $expval
    i32.const 0
    i32.lt_s
    if (result i32)
    i32.const 0
    local.get $expval
    i32.sub
    else
    local.get $expval
    end
    local.get $expval
    i32.const 0
    i32.lt_s
    i32.const 10
    i32.const 0
    local.get $minwidth
    i32.const 1
    i32.sub
    i32.const 5
    call $stdio:_ntoa_long
    local.set $idx
    local.get $flags
    i32.const 2
    i32.and
    if
    block $1$
    loop $2$
    local.get $idx
    local.get $start_idx
    i32.sub
    local.get $width
    i32.lt_u
    if
    i32.const 32
    local.get $buffer
    local.get $idx
    local.get $idx
    i32.const 1
    i32.add
    local.set $idx
    local.get $maxlen
    local.get $out
    call_indirect (param i32 i32 i32 i32) (result)
    br $2$
    end
    end $2$
    end $1$
    end
    end
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $idx
    return
  )
  (func $stdio:_vsnprintf
    (param $out i32) (param $buffer i32) (param $maxlen i32) (param $format# i32) (param $va i32) (result i32) 
    (local $flags i32) (local $width i32) (local $precision i32) (local $n i32) (local $idx i32) (local $w i32) (local $prec i32) (local $base i32) (local $value i64) (local $value#9 i32) (local $value#10 i32) (local $value#11 i32) (local $l i32) (local $p i32) (local $l#14 i32) (local $is_ll i32) (local $fp$ i32) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) (local $i4$ i32) (local $i5$ i32) (local $i6$ i32) (local $i7$ i32) (local $i8$ i32) (local $i9$ i32) (local $i10$ i32) (local $i11$ i32) (local $i12$ i32) (local $i13$ i32) (local $i14$ i32) (local $i15$ i32) (local $i16$ i32) (local $i17$ i32) (local $i18$ i32) (local $i19$ i32) (local $i20$ i32) (local $i21$ i32) (local $i22$ i32) (local $i23$ i32) (local $i24$ i32) (local $i25$ i32) (local $i26$ i32) (local $i27$ i32) (local $i28$ i32) (local $i29$ i32) 
    global.get $env:__stack_pointer
    global.get $env:__stack_pointer
    i32.const 16
    i32.sub
    global.set $env:__stack_pointer
    local.tee $fp$
    local.tee $i1$
    local.get $format#
    i32.store offset=0 align=4
    i32.const 0
    local.set $idx
    local.get $buffer
    i32.eqz
    if
    ref.func $stdio:_out_null
    local.set $out
    end
    block $1$
    loop $2$
    local.get $fp$
    i32.load offset=0 align=4
    i32.load8_s offset=0 align=1
    if
    local.get $fp$
    i32.load offset=0 align=4
    i32.load8_s offset=0 align=1
    i32.const 37
    i32.ne
    if
    local.get $fp$
    i32.load offset=0 align=4
    i32.load8_s offset=0 align=1
    local.get $buffer
    local.get $idx
    local.get $idx
    i32.const 1
    i32.add
    local.set $idx
    local.get $maxlen
    local.get $out
    call_indirect (param i32 i32 i32 i32) (result)
    local.get $fp$
    local.tee $i2$
    local.get $i2$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    br $2$
    else
    local.get $fp$
    local.tee $i3$
    local.get $i3$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    end
    i32.const 0
    local.set $flags
    block $4$
    loop $3$
    block $5$
    block $6$
    block $12$
    block $11$
    block $10$
    block $9$
    block $8$
    block $7$
    local.get $fp$
    i32.load offset=0 align=4
    i32.load8_s offset=0 align=1
    local.set $i4$
    i32.const 32
    local.get $i4$
    i32.eq
    br_if $10$
    i32.const 35
    local.get $i4$
    i32.eq
    br_if $11$
    i32.const 43
    local.get $i4$
    i32.eq
    br_if $9$
    i32.const 45
    local.get $i4$
    i32.eq
    br_if $8$
    i32.const 48
    local.get $i4$
    i32.eq
    br_if $7$
    br $12$
    end $7$
    local.get $flags
    i32.const 1
    i32.or
    local.set $flags
    local.get $fp$
    local.tee $i5$
    i32.load offset=0 align=4
    local.get $i5$
    local.get $i5$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    drop
    i32.const 1
    local.set $n
    br $6$
    end $8$
    local.get $flags
    i32.const 2
    i32.or
    local.set $flags
    local.get $fp$
    local.tee $i6$
    i32.load offset=0 align=4
    local.get $i6$
    local.get $i6$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    drop
    i32.const 1
    local.set $n
    br $6$
    end $9$
    local.get $flags
    i32.const 4
    i32.or
    local.set $flags
    local.get $fp$
    local.tee $i7$
    i32.load offset=0 align=4
    local.get $i7$
    local.get $i7$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    drop
    i32.const 1
    local.set $n
    br $6$
    end $10$
    local.get $flags
    i32.const 8
    i32.or
    local.set $flags
    local.get $fp$
    local.tee $i8$
    i32.load offset=0 align=4
    local.get $i8$
    local.get $i8$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    drop
    i32.const 1
    local.set $n
    br $6$
    end $11$
    local.get $flags
    i32.const 16
    i32.or
    local.set $flags
    local.get $fp$
    local.tee $i9$
    i32.load offset=0 align=4
    local.get $i9$
    local.get $i9$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    drop
    i32.const 1
    local.set $n
    br $6$
    end $12$
    i32.const 0
    local.set $n
    br $6$
    end $6$
    end $5$
    local.get $n
    br_if $3$
    end $3$
    end $4$
    i32.const 0
    local.set $width
    local.get $fp$
    i32.load offset=0 align=4
    i32.load8_s offset=0 align=1
    call $stdio:_is_digit
    i32.extend8_s
    i32.const 0
    i32.ne
    if
    local.get $fp$
    call $stdio:_atoi
    local.set $width
    else
    local.get $fp$
    i32.load offset=0 align=4
    i32.load8_s offset=0 align=1
    i32.const 42
    i32.eq
    if
    local.get $va
    local.get $va
    i32.const 8
    i32.add
    local.set $va
    i32.load offset=0 align=4
    local.tee $w
    i32.const 0
    i32.lt_s
    if
    local.get $flags
    i32.const 2
    i32.or
    local.set $flags
    i32.const 0
    local.get $w
    i32.sub
    local.set $width
    else
    local.get $w
    local.set $width
    end
    local.get $fp$
    local.tee $i10$
    i32.load offset=0 align=4
    local.get $i10$
    local.get $i10$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    drop
    end
    end
    i32.const 0
    local.set $precision
    local.get $fp$
    i32.load offset=0 align=4
    i32.load8_s offset=0 align=1
    i32.const 46
    i32.eq
    if
    local.get $flags
    i32.const 1024
    i32.or
    local.set $flags
    local.get $fp$
    local.tee $i11$
    i32.load offset=0 align=4
    local.get $i11$
    local.get $i11$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    drop
    local.get $fp$
    i32.load offset=0 align=4
    i32.load8_s offset=0 align=1
    call $stdio:_is_digit
    i32.extend8_s
    i32.const 0
    i32.ne
    if
    local.get $fp$
    call $stdio:_atoi
    local.set $precision
    else
    local.get $fp$
    i32.load offset=0 align=4
    i32.load8_s offset=0 align=1
    i32.const 42
    i32.eq
    if
    local.get $va
    local.get $va
    i32.const 8
    i32.add
    local.set $va
    i32.load offset=0 align=4
    local.tee $prec
    i32.const 0
    i32.gt_s
    if (result i32)
    local.get $prec
    else
    i32.const 0
    end
    local.set $precision
    local.get $fp$
    local.tee $i12$
    local.get $i12$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    end
    end
    end
    block $13$
    block $19$
    block $18$
    block $17$
    block $16$
    block $15$
    block $14$
    local.get $fp$
    i32.load offset=0 align=4
    i32.load8_s offset=0 align=1
    local.set $i13$
    i32.const 104
    local.get $i13$
    i32.eq
    br_if $15$
    i32.const 106
    local.get $i13$
    i32.eq
    br_if $17$
    i32.const 108
    local.get $i13$
    i32.eq
    br_if $14$
    i32.const 116
    local.get $i13$
    i32.eq
    br_if $16$
    i32.const 122
    local.get $i13$
    i32.eq
    br_if $18$
    br $19$
    end $14$
    local.get $flags
    i32.const 256
    i32.or
    local.set $flags
    local.get $fp$
    local.tee $i14$
    local.get $i14$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    local.get $fp$
    i32.load offset=0 align=4
    i32.load8_s offset=0 align=1
    i32.const 108
    i32.eq
    if
    local.get $flags
    i32.const 512
    i32.or
    local.set $flags
    local.get $fp$
    local.tee $i15$
    local.get $i15$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    end
    br $13$
    end $15$
    local.get $flags
    i32.const 128
    i32.or
    local.set $flags
    local.get $fp$
    local.tee $i16$
    local.get $i16$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    local.get $fp$
    i32.load offset=0 align=4
    i32.load8_s offset=0 align=1
    i32.const 104
    i32.eq
    if
    local.get $flags
    i32.const 64
    i32.or
    local.set $flags
    local.get $fp$
    local.tee $i17$
    local.get $i17$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    end
    br $13$
    end $16$
    local.get $flags
    i32.const 256
    i32.or
    local.set $flags
    local.get $fp$
    local.tee $i18$
    local.get $i18$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    br $13$
    end $17$
    local.get $flags
    i32.const 512
    i32.or
    local.set $flags
    local.get $fp$
    local.tee $i19$
    i32.load offset=0 align=4
    local.get $i19$
    local.get $i19$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    drop
    br $13$
    end $18$
    local.get $flags
    i32.const 256
    i32.or
    local.set $flags
    local.get $fp$
    local.tee $i20$
    i32.load offset=0 align=4
    local.get $i20$
    local.get $i20$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    drop
    br $13$
    end $19$
    br $13$
    end $13$
    block $20$
    block $48$
    block $47$
    block $46$
    block $39$
    block $34$
    block $33$
    block $32$
    block $31$
    block $30$
    block $29$
    block $28$
    block $27$
    block $26$
    block $25$
    block $24$
    block $23$
    block $22$
    block $21$
    local.get $fp$
    i32.load offset=0 align=4
    i32.load8_s offset=0 align=1
    local.set $i21$
    i32.const 37
    local.get $i21$
    i32.eq
    br_if $47$
    i32.const 69
    local.get $i21$
    i32.eq
    br_if $31$
    i32.const 70
    local.get $i21$
    i32.eq
    br_if $29$
    i32.const 71
    local.get $i21$
    i32.eq
    br_if $33$
    i32.const 88
    local.get $i21$
    i32.eq
    br_if $25$
    i32.const 98
    local.get $i21$
    i32.eq
    br_if $27$
    i32.const 99
    local.get $i21$
    i32.eq
    br_if $34$
    i32.const 100
    local.get $i21$
    i32.eq
    br_if $21$
    i32.const 101
    local.get $i21$
    i32.eq
    br_if $30$
    i32.const 102
    local.get $i21$
    i32.eq
    br_if $28$
    i32.const 103
    local.get $i21$
    i32.eq
    br_if $32$
    i32.const 105
    local.get $i21$
    i32.eq
    br_if $22$
    i32.const 111
    local.get $i21$
    i32.eq
    br_if $26$
    i32.const 112
    local.get $i21$
    i32.eq
    br_if $46$
    i32.const 115
    local.get $i21$
    i32.eq
    br_if $39$
    i32.const 117
    local.get $i21$
    i32.eq
    br_if $23$
    i32.const 120
    local.get $i21$
    i32.eq
    br_if $24$
    br $48$
    end $21$
    end $22$
    end $23$
    end $24$
    end $25$
    end $26$
    end $27$
    local.get $fp$
    i32.load offset=0 align=4
    i32.load8_s offset=0 align=1
    i32.const 120
    i32.eq
    if (result i32)
    i32.const 1
    else
    local.get $fp$
    i32.load offset=0 align=4
    i32.load8_s offset=0 align=1
    i32.const 88
    i32.eq
    end
    if
    i32.const 16
    local.set $base
    else
    local.get $fp$
    i32.load offset=0 align=4
    i32.load8_s offset=0 align=1
    i32.const 111
    i32.eq
    if
    i32.const 8
    local.set $base
    else
    local.get $fp$
    i32.load offset=0 align=4
    i32.load8_s offset=0 align=1
    i32.const 98
    i32.eq
    if
    i32.const 2
    local.set $base
    else
    i32.const 10
    local.set $base
    local.get $flags
    i32.const -17
    i32.and
    local.set $flags
    end
    end
    end
    local.get $fp$
    i32.load offset=0 align=4
    i32.load8_s offset=0 align=1
    i32.const 88
    i32.eq
    if
    local.get $flags
    i32.const 32
    i32.or
    local.set $flags
    end
    local.get $fp$
    i32.load offset=0 align=4
    i32.load8_s offset=0 align=1
    i32.const 105
    i32.ne
    if (result i32)
    local.get $fp$
    i32.load offset=0 align=4
    i32.load8_s offset=0 align=1
    i32.const 100
    i32.ne
    else
    i32.const 0
    end
    if
    local.get $flags
    i32.const -13
    i32.and
    local.set $flags
    end
    local.get $flags
    i32.const 1024
    i32.and
    if
    local.get $flags
    i32.const -2
    i32.and
    local.set $flags
    end
    local.get $fp$
    i32.load offset=0 align=4
    i32.load8_s offset=0 align=1
    i32.const 105
    i32.eq
    if (result i32)
    i32.const 1
    else
    local.get $fp$
    i32.load offset=0 align=4
    i32.load8_s offset=0 align=1
    i32.const 100
    i32.eq
    end
    if
    local.get $flags
    i32.const 512
    i32.and
    if
    local.get $va
    local.get $va
    i32.const 8
    i32.add
    local.set $va
    i64.load offset=0 align=8
    local.set $value
    local.get $out
    local.get $buffer
    local.get $idx
    local.get $maxlen
    local.get $value
    i32.const 0
    i64.extend_i32_s
    i64.gt_s
    if (result i64)
    local.get $value
    else
    i32.const 0
    i64.extend_i32_s
    local.get $value
    i64.sub
    end
    local.get $value
    i32.const 0
    i64.extend_i32_s
    i64.lt_s
    local.get $base
    i64.extend_i32_u
    local.get $precision
    local.get $width
    local.get $flags
    call $stdio:_ntoa_long_long
    local.set $idx
    else
    local.get $flags
    i32.const 256
    i32.and
    if
    local.get $va
    local.get $va
    i32.const 8
    i32.add
    local.set $va
    i32.load offset=0 align=4
    local.set $value#9
    local.get $out
    local.get $buffer
    local.get $idx
    local.get $maxlen
    local.get $value#9
    i32.const 0
    i32.gt_s
    if (result i32)
    local.get $value#9
    else
    i32.const 0
    local.get $value#9
    i32.sub
    end
    local.get $value#9
    i32.const 0
    i32.lt_s
    local.get $base
    local.get $precision
    local.get $width
    local.get $flags
    call $stdio:_ntoa_long
    local.set $idx
    else
    local.get $flags
    i32.const 64
    i32.and
    if (result i32)
    local.get $va
    local.get $va
    i32.const 8
    i32.add
    local.set $va
    i32.load offset=0 align=4
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    else
    local.get $flags
    i32.const 128
    i32.and
    if (result i32)
    local.get $va
    local.get $va
    i32.const 8
    i32.add
    local.set $va
    i32.load offset=0 align=4
    i32.const 16
    i32.shl
    i32.const 16
    i32.shr_s
    else
    local.get $va
    local.get $va
    i32.const 8
    i32.add
    local.set $va
    i32.load offset=0 align=4
    end
    end
    local.set $value#10
    local.get $out
    local.get $buffer
    local.get $idx
    local.get $maxlen
    local.get $value#10
    i32.const 0
    i32.gt_s
    if (result i32)
    local.get $value#10
    else
    i32.const 0
    local.get $value#10
    i32.sub
    end
    local.get $value#10
    i32.const 0
    i32.lt_s
    local.get $base
    local.get $precision
    local.get $width
    local.get $flags
    call $stdio:_ntoa_long
    local.set $idx
    end
    end
    else
    local.get $flags
    i32.const 512
    i32.and
    if
    local.get $out
    local.get $buffer
    local.get $idx
    local.get $maxlen
    local.get $va
    local.get $va
    i32.const 8
    i32.add
    local.set $va
    i64.load offset=0 align=8
    i32.const 0
    i32.extend8_s
    local.get $base
    i64.extend_i32_u
    local.get $precision
    local.get $width
    local.get $flags
    call $stdio:_ntoa_long_long
    local.set $idx
    else
    local.get $flags
    i32.const 256
    i32.and
    if
    local.get $out
    local.get $buffer
    local.get $idx
    local.get $maxlen
    local.get $va
    local.get $va
    i32.const 8
    i32.add
    local.set $va
    i32.load offset=0 align=4
    i32.const 0
    i32.extend8_s
    local.get $base
    local.get $precision
    local.get $width
    local.get $flags
    call $stdio:_ntoa_long
    local.set $idx
    else
    local.get $flags
    i32.const 64
    i32.and
    if (result i32)
    local.get $va
    local.get $va
    i32.const 8
    i32.add
    local.set $va
    i32.load offset=0 align=4
    i32.const 255
    i32.and
    else
    local.get $flags
    i32.const 128
    i32.and
    if (result i32)
    local.get $va
    local.get $va
    i32.const 8
    i32.add
    local.set $va
    i32.load offset=0 align=4
    i32.const 65535
    i32.and
    else
    local.get $va
    local.get $va
    i32.const 8
    i32.add
    local.set $va
    i32.load offset=0 align=4
    end
    end
    local.set $value#11
    local.get $out
    local.get $buffer
    local.get $idx
    local.get $maxlen
    local.get $value#11
    i32.const 0
    i32.extend8_s
    local.get $base
    local.get $precision
    local.get $width
    local.get $flags
    call $stdio:_ntoa_long
    local.set $idx
    end
    end
    end
    local.get $fp$
    local.tee $i22$
    local.get $i22$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    br $20$
    end $28$
    end $29$
    local.get $fp$
    i32.load offset=0 align=4
    i32.load8_s offset=0 align=1
    i32.const 70
    i32.eq
    if
    local.get $flags
    i32.const 32
    i32.or
    local.set $flags
    end
    local.get $out
    local.get $buffer
    local.get $idx
    local.get $maxlen
    local.get $va
    local.get $va
    i32.const 8
    i32.add
    local.set $va
    f64.load offset=0 align=8
    local.get $precision
    local.get $width
    local.get $flags
    call $stdio:_ftoa
    local.set $idx
    local.get $fp$
    local.tee $i23$
    i32.load offset=0 align=4
    local.get $i23$
    local.get $i23$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    drop
    br $20$
    end $30$
    end $31$
    end $32$
    end $33$
    local.get $fp$
    i32.load offset=0 align=4
    i32.load8_s offset=0 align=1
    i32.const 103
    i32.eq
    if (result i32)
    i32.const 1
    else
    local.get $fp$
    i32.load offset=0 align=4
    i32.load8_s offset=0 align=1
    i32.const 71
    i32.eq
    end
    if
    local.get $flags
    i32.const 2048
    i32.or
    local.set $flags
    end
    local.get $fp$
    i32.load offset=0 align=4
    i32.load8_s offset=0 align=1
    i32.const 69
    i32.eq
    if (result i32)
    i32.const 1
    else
    local.get $fp$
    i32.load offset=0 align=4
    i32.load8_s offset=0 align=1
    i32.const 71
    i32.eq
    end
    if
    local.get $flags
    i32.const 32
    i32.or
    local.set $flags
    end
    local.get $out
    local.get $buffer
    local.get $idx
    local.get $maxlen
    local.get $va
    local.get $va
    i32.const 8
    i32.add
    local.set $va
    f64.load offset=0 align=8
    local.get $precision
    local.get $width
    local.get $flags
    call $stdio:_etoa
    local.set $idx
    local.get $fp$
    local.tee $i24$
    local.get $i24$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    br $20$
    end $34$
    i32.const 1
    local.set $l
    local.get $flags
    i32.const 2
    i32.and
    i32.eqz
    if
    block $35$
    loop $36$
    local.get $l
    local.get $l
    i32.const 1
    i32.add
    local.set $l
    local.get $width
    i32.lt_u
    if
    i32.const 32
    local.get $buffer
    local.get $idx
    local.get $idx
    i32.const 1
    i32.add
    local.set $idx
    local.get $maxlen
    local.get $out
    call_indirect (param i32 i32 i32 i32) (result)
    br $36$
    end
    end $36$
    end $35$
    end
    local.get $va
    local.get $va
    i32.const 8
    i32.add
    local.set $va
    i32.load offset=0 align=4
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    local.get $buffer
    local.get $idx
    local.get $idx
    i32.const 1
    i32.add
    local.set $idx
    local.get $maxlen
    local.get $out
    call_indirect (param i32 i32 i32 i32) (result)
    local.get $flags
    i32.const 2
    i32.and
    if
    block $37$
    loop $38$
    local.get $l
    local.get $l
    i32.const 1
    i32.add
    local.set $l
    local.get $width
    i32.lt_u
    if
    i32.const 32
    local.get $buffer
    local.get $idx
    local.get $idx
    i32.const 1
    i32.add
    local.set $idx
    local.get $maxlen
    local.get $out
    call_indirect (param i32 i32 i32 i32) (result)
    br $38$
    end
    end $38$
    end $37$
    end
    local.get $fp$
    local.tee $i25$
    local.get $i25$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    br $20$
    end $39$
    local.get $va
    local.get $va
    i32.const 8
    i32.add
    local.set $va
    i32.load offset=0 align=4
    local.tee $p
    local.get $precision
    i32.const -1
    local.get $precision
    select
    call $stdio:_strnlen_s
    local.set $l#14
    local.get $flags
    i32.const 1024
    i32.and
    if
    local.get $l#14
    local.get $precision
    local.get $l#14
    local.get $precision
    i32.lt_u
    select
    local.set $l#14
    end
    local.get $flags
    i32.const 2
    i32.and
    i32.eqz
    if
    block $40$
    loop $41$
    local.get $l#14
    local.get $l#14
    i32.const 1
    i32.add
    local.set $l#14
    local.get $width
    i32.lt_u
    if
    i32.const 32
    local.get $buffer
    local.get $idx
    local.get $idx
    i32.const 1
    i32.add
    local.set $idx
    local.get $maxlen
    local.get $out
    call_indirect (param i32 i32 i32 i32) (result)
    br $41$
    end
    end $41$
    end $40$
    end
    block $42$
    loop $43$
    local.get $p
    i32.load8_s offset=0 align=1
    i32.const 0
    i32.ne
    if (result i32)
    local.get $flags
    i32.const 1024
    i32.and
    i32.eqz
    if (result i32)
    i32.const 1
    else
    local.get $precision
    local.get $precision
    i32.const 1
    i32.sub
    local.set $precision
    end
    else
    i32.const 0
    end
    if
    local.get $p
    local.get $p
    i32.const 1
    i32.add
    local.set $p
    i32.load8_s offset=0 align=1
    local.get $buffer
    local.get $idx
    local.get $idx
    i32.const 1
    i32.add
    local.set $idx
    local.get $maxlen
    local.get $out
    call_indirect (param i32 i32 i32 i32) (result)
    br $43$
    end
    end $43$
    end $42$
    local.get $flags
    i32.const 2
    i32.and
    if
    block $44$
    loop $45$
    local.get $l#14
    local.get $l#14
    i32.const 1
    i32.add
    local.set $l#14
    local.get $width
    i32.lt_u
    if
    i32.const 32
    local.get $buffer
    local.get $idx
    local.get $idx
    i32.const 1
    i32.add
    local.set $idx
    local.get $maxlen
    local.get $out
    call_indirect (param i32 i32 i32 i32) (result)
    br $45$
    end
    end $45$
    end $44$
    end
    local.get $fp$
    local.tee $i26$
    local.get $i26$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    br $20$
    end $46$
    i32.const 8
    local.set $width
    local.get $flags
    i32.const 33
    i32.or
    local.set $flags
    i32.const 0
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    local.tee $is_ll
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    i32.const 0
    i32.ne
    if
    local.get $out
    local.get $buffer
    local.get $idx
    local.get $maxlen
    local.get $va
    local.get $va
    i32.const 8
    i32.add
    local.set $va
    i32.load offset=0 align=4
    i64.extend_i32_u
    i32.const 0
    i32.extend8_s
    i32.const 16
    i64.extend_i32_u
    local.get $precision
    local.get $width
    local.get $flags
    call $stdio:_ntoa_long_long
    local.set $idx
    else
    local.get $out
    local.get $buffer
    local.get $idx
    local.get $maxlen
    local.get $va
    local.get $va
    i32.const 8
    i32.add
    local.set $va
    i32.load offset=0 align=4
    i32.const 0
    i32.extend8_s
    i32.const 16
    local.get $precision
    local.get $width
    local.get $flags
    call $stdio:_ntoa_long
    local.set $idx
    end
    local.get $fp$
    local.tee $i27$
    local.get $i27$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    br $20$
    end $47$
    i32.const 37
    local.get $buffer
    local.get $idx
    local.get $idx
    i32.const 1
    i32.add
    local.set $idx
    local.get $maxlen
    local.get $out
    call_indirect (param i32 i32 i32 i32) (result)
    local.get $fp$
    local.tee $i28$
    i32.load offset=0 align=4
    local.get $i28$
    local.get $i28$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    drop
    br $20$
    end $48$
    local.get $fp$
    i32.load offset=0 align=4
    i32.load8_s offset=0 align=1
    local.get $buffer
    local.get $idx
    local.get $idx
    i32.const 1
    i32.add
    local.set $idx
    local.get $maxlen
    local.get $out
    call_indirect (param i32 i32 i32 i32) (result)
    local.get $fp$
    local.tee $i29$
    i32.load offset=0 align=4
    local.get $i29$
    local.get $i29$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    drop
    br $20$
    end $20$
    br $2$
    end
    end $2$
    end $1$
    i32.const 0
    i32.extend8_s
    local.get $buffer
    local.get $idx
    local.get $maxlen
    i32.lt_u
    if (result i32)
    local.get $idx
    else
    local.get $maxlen
    i32.const 1
    i32.sub
    end
    local.get $maxlen
    local.get $out
    call_indirect (param i32 i32 i32 i32) (result)
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $idx
    return
  )
  (func $stdio:fprintf (export "fprintf")
    (param $stream i32) (param $format i32) (param $ap$ i32) (result i32) 
    (local $va i32) (local $ret i32) 
    local.get $ap$
    local.set $va
    ref.func $stdio:_out_char
    local.get $stream
    i32.const -1
    local.get $format
    local.get $va
    call $stdio:_vsnprintf
    local.set $ret
    i32.const 0
    local.set $va
    local.get $ret
    return
  )
  (func $stdio:printf (export "printf")
    (param $format i32) (param $ap$ i32) (result i32) 
    (local $va i32) (local $ret i32) 
    local.get $ap$
    local.set $va
    ref.func $stdio:_out_char
    ref.data $stdio:_iob
    i32.const 32
    i32.add
    i32.const -1
    local.get $format
    local.get $va
    call $stdio:_vsnprintf
    local.set $ret
    i32.const 0
    local.set $va
    local.get $ret
    return
  )
  (func $stdio:sprintf (export "sprintf")
    (param $buffer i32) (param $format i32) (param $ap$ i32) (result i32) 
    (local $va i32) (local $ret i32) 
    local.get $ap$
    local.set $va
    ref.func $stdio:_out_buffer
    local.get $buffer
    i32.const -1
    local.get $format
    local.get $va
    call $stdio:_vsnprintf
    local.set $ret
    i32.const 0
    local.set $va
    local.get $ret
    return
  )
  (func $stdio:snprintf (export "snprintf")
    (param $buffer i32) (param $count i32) (param $format i32) (param $ap$ i32) (result i32) 
    (local $va i32) (local $ret i32) 
    local.get $ap$
    local.set $va
    ref.func $stdio:_out_buffer
    local.get $buffer
    local.get $count
    local.get $format
    local.get $va
    call $stdio:_vsnprintf
    local.set $ret
    i32.const 0
    local.set $va
    local.get $ret
    return
  )
  (func $stdio:vprintf (export "vprintf")
    (param $format i32) (param $va i32) (result i32) 
    ref.func $stdio:_out_char
    ref.data $stdio:_iob
    i32.const 32
    i32.add
    i32.const -1
    local.get $format
    local.get $va
    call $stdio:_vsnprintf
    return
  )
  (func $stdio:vfprintf (export "vfprintf")
    (param $stream i32) (param $format i32) (param $va i32) (result i32) 
    ref.func $stdio:_out_char
    local.get $stream
    i32.const -1
    local.get $format
    local.get $va
    call $stdio:_vsnprintf
    return
  )
  (func $stdio:vsprintf (export "vsprintf")
    (param $buffer i32) (param $format i32) (param $va i32) (result i32) 
    ref.func $stdio:_out_buffer
    local.get $buffer
    i32.const -1
    local.get $format
    local.get $va
    call $stdio:_vsnprintf
    return
  )
  (func $stdio:vsnprintf (export "vsnprintf")
    (param $buffer i32) (param $count i32) (param $format i32) (param $va i32) (result i32) 
    ref.func $stdio:_out_buffer
    local.get $buffer
    local.get $count
    local.get $format
    local.get $va
    call $stdio:_vsnprintf
    return
  )
  (func $stdio:renameat (export "renameat")
    (param $oldfd i32) (param $oldpath i32) (param $newfd i32) (param $newpath i32) (result i32) 
    (local $error i32) 
    local.get $oldfd
    local.get $oldpath
    local.get $oldpath
    call $string:strlen
    local.get $newfd
    local.get $newpath
    local.get $newpath
    call $string:strlen
    call $wasi_snapshot_preview1:path_rename
    local.tee $error
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $error
    i32.const 65535
    i32.and
    global.set $errno:errno
    i32.const -1
    return
    end
    i32.const 0
    return
  )
  (func $stdio:rename (export "rename")
    (param $oldpath i32) (param $newpath i32) (result i32) 
    (local $olddirfd i32) (local $newdirfd i32) (local $fp$ i32) 
    global.get $env:__stack_pointer
    global.get $env:__stack_pointer
    i32.const 16
    i32.sub
    global.set $env:__stack_pointer
    local.set $fp$
    local.get $oldpath
    local.get $fp$
    call $fcntl:find_relpath
    local.tee $olddirfd
    i32.const -1
    i32.ne
    if
    local.get $newpath
    local.get $fp$
    i32.const 4
    i32.add
    call $fcntl:find_relpath
    local.tee $newdirfd
    i32.const -1
    i32.ne
    if
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $olddirfd
    local.get $fp$
    i32.load offset=0 align=4
    local.get $newdirfd
    local.get $fp$
    i32.load offset=4 align=4
    call $stdio:renameat
    return
    end
    end
    i32.const 76
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    return
  )
  (func $stdio:remove (export "remove")
    (param $path i32) (result i32) 
    (local $dirfd i32) (local $r i32) (local $fp$ i32) 
    global.get $env:__stack_pointer
    global.get $env:__stack_pointer
    i32.const 16
    i32.sub
    global.set $env:__stack_pointer
    local.set $fp$
    local.get $path
    local.get $fp$
    call $fcntl:find_relpath
    local.tee $dirfd
    i32.const -1
    i32.eq
    if
    i32.const 76
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    return
    end
    local.get $dirfd
    local.get $fp$
    i32.load offset=0 align=4
    i32.const 0
    call $unistd:unlinkat
    local.tee $r
    i32.const 0
    i32.ne
    if (result i32)
    global.get $errno:errno
    i32.const 31
    i32.eq
    if (result i32)
    i32.const 1
    else
    global.get $errno:errno
    i32.const 76
    i32.eq
    end
    else
    i32.const 0
    end
    if
    local.get $dirfd
    local.get $fp$
    i32.load offset=0 align=4
    call $unistd:rmdirat
    local.set $r
    global.get $errno:errno
    i32.const 54
    i32.eq
    if
    i32.const 76
    global.set $errno:errno
    end
    end
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $r
    return
  )
)
