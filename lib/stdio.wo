(module $stdio
  (import "env" "__stack_pointer" (global $env:__stack_pointer (mut i32)))
  (import "env" "__linear_memory" (memory $env:__linear_memory 0))
  (import "wasi_snapshot_preview1" "path_rename" (func $wasi_snapshot_preview1:path_rename (param i32) (param i32) (param i32) (param i32) (param i32) (param i32) (result i32)))
  (import "errno" "errno" (global $errno:errno i32))
  (import "string" "memcpy" (func $string:memcpy (param i32) (param i32) (param i32) (result i32)))
  (import "string" "memchr" (func $string:memchr (param i32) (param i32) (param i32) (result i32)))
  (import "string" "strlen" (func $string:strlen (param i32) (result i32)))
  (import "string" "memccpy" (func $string:memccpy (param i32) (param i32) (param i32) (param i32) (result i32)))
  (import "string" "bzero" (func $string:bzero (param i32) (param i32)))
  (import "stdlib" "free" (func $stdlib:free (param i32)))
  (import "stdlib" "malloc" (func $stdlib:malloc (param i32) (result i32)))
  (import "stdlib" "atexit" (func $stdlib:atexit (param i32) (result i32)))
  (import "fcntl" "open" (func $fcntl:open (param i32) (param i32) (result i32)))
  (import "fcntl" "find_relpath" (func $fcntl:find_relpath (param i32) (param i32) (result i32)))
  (import "unistd" "read" (func $unistd:read (param i32) (param i32) (param i32) (result i32)))
  (import "unistd" "write" (func $unistd:write (param i32) (param i32) (param i32) (result i32)))
  (import "unistd" "lseek" (func $unistd:lseek (param i32) (param i64) (param i32) (result i64)))
  (import "unistd" "close" (func $unistd:close (param i32) (result i32)))
  (import "unistd" "unlinkat" (func $unistd:unlinkat (param i32) (param i32) (param i32) (result i32)))
  (import "unistd" "rmdirat" (func $unistd:rmdirat (param i32) (param i32) (result i32)))
  (global $stdio:closeall_set (mut i32) (i32.const 0))
  (data $stdio:_iob (export "_iob") var align
  (func $stdio:findfp
    (result i32) 
    (local $fp i32) 
    block $2$
    ref.data $stdio:_iob
    local.set $fp
    loop $1$
    local.get $fp
    ref.data $stdio:_iob
    i32.const 640
    i32.add
    i32.lt_u
    i32.eqz
    br_if $2$
    block $3$
    local.get $fp
    i32.load offset=16 align=4
    i32.const 131
    i32.and
    i32.const 0
    i32.eq
    if
    local.get $fp
    return
    end
    end $3$
    local.get $fp
    i32.const 32
    i32.add
    local.set $fp
    br $1$
    end $1$
    end $2$
    i32.const 0
    return
  )
  (func $stdio:closeall
    (local $fpi i32) 
    block $2$
    ref.data $stdio:_iob
    local.set $fpi
    loop $1$
    local.get $fpi
    ref.data $stdio:_iob
    i32.const 640
    i32.add
    i32.lt_u
    i32.eqz
    br_if $2$
    block $3$
    local.get $fpi
    i32.load offset=16 align=4
    i32.const 131
    i32.and
    if
    local.get $fpi
    call $stdio:fclose
    drop
    end
    end $3$
    local.get $fpi
    i32.const 32
    i32.add
    local.set $fpi
    br $1$
    end $1$
    end $2$
  )
  (func $stdio:freopen (export "freopen")
    (param $filename i32) (param $mode i32) (param $fp i32) (result i32) 
    (local $plus i32) (local $oflags i32) (local $fd i32) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) (local $i6$ i32) (local $i5$ i32) (local $i4$ i32) (local $i7$ i32) 
    local.get $fp
    i32.const 0
    i32.ne
    if
    local.get $fp
    call $stdio:fclose
    drop
    else
    call $stdio:findfp
    local.set $fp
    end
    local.get $fp
    i32.const 0
    i32.eq
    if (result i32)
    i32.const 1
    else
    local.get $filename
    i32.const 0
    i32.eq
    end
    if (result i32)
    i32.const 1
    else
    local.get $mode
    i32.const 0
    i32.eq
    end
    if
    i32.const 0
    return
    end
    block $1$
    block $5$
    block $4$
    block $3$
    block $2$
    local.get $mode
    i32.load8_s offset=0 align=1
    local.set $i1$
    i32.const 97
    local.get $i1$
    i32.eq
    br_if $3$
    i32.const 114
    local.get $i1$
    i32.eq
    br_if $4$
    i32.const 119
    local.get $i1$
    i32.eq
    br_if $2$
    br $5$
    end $2$
    i32.const 335544320
    i32.const 268435456
    local.get $mode
    i32.load8_s offset=1 align=1
    i32.const 43
    i32.eq
    select
    i32.const 32768
    i32.or
    i32.const 4096
    i32.or
    local.set $oflags
    br $1$
    end $3$
    i32.const 335544320
    i32.const 268435456
    local.get $mode
    i32.load8_s offset=1 align=1
    i32.const 43
    i32.eq
    select
    i32.const 1
    i32.or
    i32.const 4096
    i32.or
    local.set $oflags
    br $1$
    end $4$
    i32.const 335544320
    i32.const 67108864
    local.get $mode
    i32.load8_s offset=1 align=1
    i32.const 43
    i32.eq
    select
    local.set $oflags
    br $1$
    end $5$
    i32.const 0
    return
    end $1$
    local.get $filename
    local.get $oflags
    call $fcntl:open
    local.tee $fd
    i32.const 0
    i32.lt_s
    if
    i32.const 0
    return
    end
    local.get $fp
    i32.const 20
    i32.add
    local.tee $i2$
    local.get $fd
    i32.store offset=0 align=4
    local.get $fp
    local.tee $i3$
    i32.const 0
    i32.store offset=0 align=4
    local.get $fp
    i32.const 4
    i32.add
    local.tee $i6$
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i5$
    local.get $fp
    i32.const 12
    i32.add
    local.tee $i4$
    i32.const 0
    i32.store offset=0 align=4
    local.get $i4$
    i32.load offset=0 align=4
    i32.store offset=0 align=4
    local.get $i5$
    i32.load offset=0 align=4
    i32.store offset=0 align=4
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i7$
    local.get $oflags
    i32.const 335544320
    i32.and
    if (result i32)
    i32.const 128
    else
    i32.const 1
    i32.const 2
    local.get $oflags
    i32.const 67108864
    i32.and
    select
    end
    i32.store offset=0 align=4
    local.get $oflags
    i32.const 1
    i32.and
    if (result i32)
    local.get $oflags
    i32.const 335544320
    i32.and
    i32.eqz
    else
    i32.const 0
    end
    if (result i32)
    local.get $fd
    i32.const 0
    i64.extend_i32_s
    i32.const 2
    call $unistd:lseek
    i32.const 0
    i64.extend_i32_s
    i64.lt_s
    else
    i32.const 0
    end
    if
    local.get $fp
    call $stdio:fclose
    drop
    i32.const 0
    local.set $fp
    end
    global.get $stdio:closeall_set
    i32.extend8_s
    i32.eqz
    if
    ref.func $stdio:closeall
    call $stdlib:atexit
    drop
    i32.const 1
    global.set $stdio:closeall_set
    end
    local.get $fp
    return
  )
  (func $stdio:fopen (export "fopen")
    (param $name i32) (param $mode i32) (result i32) 
    local.get $name
    local.get $mode
    i32.const 0
    call $stdio:freopen
    return
  )
  (func $stdio:fdopen (export "fdopen")
    (param $fd i32) (param $mode i32) (result i32) 
    (local $fp i32) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) (local $i6$ i32) (local $i5$ i32) (local $i4$ i32) (local $i7$ i32) (local $i8$ i32) (local $i9$ i32) (local $i10$ i32) (local $i11$ i32) 
    call $stdio:findfp
    local.tee $fp
    i32.const 0
    i32.eq
    if
    i32.const 0
    return
    end
    local.get $fp
    i32.const 20
    i32.add
    local.tee $i1$
    local.get $fd
    i32.store offset=0 align=4
    local.get $fp
    local.tee $i2$
    i32.const 0
    i32.store offset=0 align=4
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i3$
    i32.const 0
    i32.store offset=0 align=4
    local.get $fp
    i32.const 4
    i32.add
    local.tee $i6$
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i5$
    local.get $fp
    i32.const 12
    i32.add
    local.tee $i4$
    i32.const 0
    i32.store offset=0 align=4
    local.get $i4$
    i32.load offset=0 align=4
    i32.store offset=0 align=4
    local.get $i5$
    i32.load offset=0 align=4
    i32.store offset=0 align=4
    block $1$
    block $5$
    block $4$
    block $3$
    block $2$
    local.get $mode
    i32.load8_s offset=0 align=1
    local.set $i7$
    i32.const 97
    local.get $i7$
    i32.eq
    br_if $3$
    i32.const 114
    local.get $i7$
    i32.eq
    br_if $2$
    i32.const 119
    local.get $i7$
    i32.eq
    br_if $4$
    br $5$
    end $2$
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i8$
    local.get $i8$
    i32.load offset=0 align=4
    i32.const 1
    i32.or
    i32.store offset=0 align=4
    br $1$
    end $3$
    local.get $fd
    i32.const 0
    i64.extend_i32_s
    i32.const 2
    call $unistd:lseek
    drop
    end $4$
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i9$
    local.get $i9$
    i32.load offset=0 align=4
    i32.const 2
    i32.or
    i32.store offset=0 align=4
    br $1$
    end $5$
    i32.const 0
    return
    end $1$
    local.get $mode
    i32.load8_s offset=1 align=1
    i32.const 43
    i32.eq
    if
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i10$
    local.get $i10$
    i32.load offset=0 align=4
    i32.const -4
    i32.and
    i32.store offset=0 align=4
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i11$
    local.get $i11$
    i32.load offset=0 align=4
    i32.const 128
    i32.or
    i32.store offset=0 align=4
    end
    global.get $stdio:closeall_set
    i32.extend8_s
    i32.eqz
    if
    ref.func $stdio:closeall
    call $stdlib:atexit
    drop
    i32.const 1
    global.set $stdio:closeall_set
    end
    local.get $fp
    return
  )
  (func $stdio:fclose (export "fclose")
    (param $fp i32) (result i32) 
    (local $res i32) 
    i32.const -1
    local.set $res
    local.get $fp
    i32.const 0
    i32.eq
    if
    local.get $res
    return
    end
    local.get $fp
    i32.load offset=16 align=4
    i32.const 131
    i32.and
    if
    local.get $fp
    i32.load offset=16 align=4
    i32.const 4
    i32.and
    if (result i32)
    i32.const 0
    else
    local.get $fp
    call $stdio:fflush
    end
    local.set $res
    local.get $fp
    i32.load offset=20 align=4
    call $unistd:close
    i32.const 0
    i32.lt_s
    if
    i32.const 44
    global.set $errno:errno
    i32.const -1
    local.set $res
    end
    end
    local.get $fp
    i32.load offset=4 align=4
    i32.const 0
    i32.ne
    if (result i32)
    local.get $fp
    i32.load offset=4 align=4
    local.get $fp
    i32.const 24
    i32.add
    i32.ne
    else
    i32.const 0
    end
    if
    local.get $fp
    i32.load offset=16 align=4
    i32.const 256
    i32.and
    if
    local.get $fp
    i32.load offset=4 align=4
    call $stdlib:free
    end
    end
    local.get $fp
    i32.const 32
    call $string:bzero
    local.get $res
    return
  )
  (func $stdio:addbuf
    (param $fp i32) 
    (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) (local $i4$ i32) (local $i5$ i32) (local $i6$ i32) (local $i7$ i32) (local $i8$ i32) 
    local.get $fp
    i32.load offset=16 align=4
    i32.const 4
    i32.and
    if
    local.get $fp
    i32.const 4
    i32.add
    local.tee $i1$
    local.get $fp
    i32.const 24
    i32.add
    i32.store offset=0 align=4
    local.get $fp
    i32.const 12
    i32.add
    local.tee $i2$
    local.get $fp
    i32.load offset=4 align=4
    i32.const 8
    i32.add
    i32.store offset=0 align=4
    else
    local.get $fp
    i32.const 4
    i32.add
    local.tee $i3$
    i32.const 1032
    call $stdlib:malloc
    i32.store offset=0 align=4
    local.get $fp
    i32.load offset=4 align=4
    i32.const 0
    i32.ne
    if
    local.get $fp
    i32.const 12
    i32.add
    local.tee $i4$
    local.get $fp
    i32.load offset=4 align=4
    i32.const 1024
    i32.add
    i32.const 8
    i32.add
    i32.store offset=0 align=4
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i5$
    local.get $i5$
    i32.load offset=0 align=4
    i32.const 256
    i32.or
    i32.store offset=0 align=4
    else
    local.get $fp
    i32.const 4
    i32.add
    local.tee $i6$
    local.get $fp
    i32.const 24
    i32.add
    i32.store offset=0 align=4
    local.get $fp
    i32.const 12
    i32.add
    local.tee $i7$
    local.get $fp
    i32.load offset=4 align=4
    i32.const 8
    i32.add
    i32.store offset=0 align=4
    end
    end
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i8$
    local.get $fp
    i32.load offset=4 align=4
    i32.store offset=0 align=4
  )
  (func $stdio:_fillbuf (export "_fillbuf")
    (param $fp i32) (result i32) 
    (local $fpi i32) (local $readc i32) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) (local $i4$ i32) (local $i5$ i32) (local $i6$ i32) (local $i7$ i32) (local $i8$ i32) (local $i9$ i32) 
    local.get $fp
    i32.load offset=4 align=4
    i32.const 0
    i32.eq
    if
    local.get $fp
    call $stdio:addbuf
    end
    local.get $fp
    i32.load offset=16 align=4
    i32.const 1
    i32.and
    i32.eqz
    if
    local.get $fp
    i32.load offset=16 align=4
    i32.const 128
    i32.and
    if
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i1$
    local.get $i1$
    i32.load offset=0 align=4
    i32.const 1
    i32.or
    i32.store offset=0 align=4
    else
    i32.const -1
    return
    end
    end
    local.get $fp
    i32.load offset=16 align=4
    i32.const 68
    i32.and
    if
    block $2$
    ref.data $stdio:_iob
    local.set $fpi
    loop $1$
    local.get $fpi
    ref.data $stdio:_iob
    i32.const 640
    i32.add
    i32.lt_u
    i32.eqz
    br_if $2$
    block $3$
    local.get $fpi
    i32.load offset=16 align=4
    i32.const 0
    i32.and
    if
    local.get $fpi
    call $stdio:fflush
    drop
    end
    end $3$
    local.get $fpi
    i32.const 32
    i32.add
    local.set $fpi
    br $1$
    end $1$
    end $2$
    end
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i2$
    local.get $fp
    i32.load offset=4 align=4
    i32.store offset=0 align=4
    local.get $fp
    i32.load offset=16 align=4
    i32.const 4
    i32.and
    if (result i32)
    i32.const 1
    else
    local.get $fp
    i32.load offset=12 align=4
    local.get $fp
    i32.load offset=4 align=4
    i32.sub
    end
    local.set $readc
    local.get $fp
    local.tee $i3$
    local.get $fp
    i32.load offset=20 align=4
    local.get $fp
    i32.load offset=4 align=4
    local.get $readc
    call $unistd:read
    i32.store offset=0 align=4
    local.get $fp
    local.tee $i4$
    local.get $i4$
    i32.load offset=0 align=4
    i32.const 1
    i32.sub
    i32.store offset=0 align=4
    local.get $i4$
    i32.load offset=0 align=4
    i32.const 0
    i32.ge_s
    if
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i5$
    i32.load offset=0 align=4
    local.get $i5$
    local.get $i5$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    i32.load8_u offset=0 align=1
    return
    else
    local.get $fp
    i32.load offset=0 align=4
    i32.const -1
    i32.ne
    if
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i6$
    local.get $i6$
    i32.load offset=0 align=4
    i32.const 32
    i32.or
    i32.store offset=0 align=4
    else
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i7$
    local.get $i7$
    i32.load offset=0 align=4
    i32.const 16
    i32.or
    i32.store offset=0 align=4
    local.get $fp
    i32.load offset=16 align=4
    i32.const 128
    i32.and
    if
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i8$
    local.get $i8$
    i32.load offset=0 align=4
    i32.const -2
    i32.and
    i32.store offset=0 align=4
    end
    end
    end
    local.get $fp
    local.tee $i9$
    i32.const 0
    i32.store offset=0 align=4
    i32.const -1
    return
  )
  (func $stdio:fread (export "fread")
    (param $buf i32) (param $size i32) (param $count i32) (param $fp i32) (result i32) 
    (local $ptr i32) (local $nleft i32) (local $n i32) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) (local $i4$ i32) 
    local.get $buf
    local.set $ptr
    local.get $size
    i32.const 0
    i32.eq
    if (result i32)
    i32.const 1
    else
    local.get $count
    i32.const 0
    i32.eq
    end
    if
    i32.const 0
    return
    end
    local.get $count
    local.get $size
    i32.mul
    local.set $nleft
    block $2$
    loop $1$
    i32.const 0
    br_if $2$
    block $3$
    local.get $fp
    i32.load offset=0 align=4
    i32.const 0
    i32.le_s
    if
    local.get $fp
    call $stdio:_fillbuf
    i32.const -1
    i32.eq
    if
    local.get $count
    local.get $nleft
    local.get $size
    i32.add
    i32.const 1
    i32.sub
    local.get $size
    i32.div_u
    i32.sub
    return
    end
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i1$
    i32.load offset=0 align=4
    local.get $i1$
    local.get $i1$
    i32.load offset=0 align=4
    i32.const 1
    i32.sub
    i32.store offset=0 align=4
    drop
    local.get $fp
    local.tee $i2$
    i32.load offset=0 align=4
    local.get $i2$
    local.get $i2$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    drop
    end
    local.get $fp
    i32.load offset=0 align=4
    local.set $n
    local.get $nleft
    local.get $n
    i32.lt_u
    if
    local.get $nleft
    local.set $n
    end
    local.get $ptr
    local.get $fp
    i32.load offset=8 align=4
    local.get $n
    call $string:memcpy
    drop
    local.get $ptr
    local.get $n
    i32.add
    local.set $ptr
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i3$
    local.get $i3$
    i32.load offset=0 align=4
    local.get $n
    i32.add
    i32.store offset=0 align=4
    local.get $fp
    local.tee $i4$
    local.get $i4$
    i32.load offset=0 align=4
    local.get $n
    i32.sub
    i32.store offset=0 align=4
    local.get $nleft
    local.get $n
    i32.le_u
    if
    local.get $count
    return
    end
    local.get $nleft
    local.get $n
    i32.sub
    local.set $nleft
    end $3$
    br $1$
    end $1$
    end $2$
    i32.const 0
    return
  )
  (func $stdio:writebuf
    (param $fp i32) (result i32) 
    (local $base i32) (local $n i32) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) 
    local.get $fp
    i32.load offset=4 align=4
    local.set $base
    local.get $fp
    i32.load offset=8 align=4
    local.get $base
    i32.sub
    local.set $n
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i1$
    local.get $base
    i32.store offset=0 align=4
    local.get $fp
    local.tee $i2$
    local.get $fp
    i32.load offset=16 align=4
    i32.const 68
    i32.and
    if (result i32)
    i32.const 0
    else
    local.get $fp
    i32.load offset=12 align=4
    local.get $base
    i32.sub
    end
    i32.store offset=0 align=4
    local.get $n
    i32.const 0
    i32.gt_s
    if (result i32)
    local.get $n
    local.get $fp
    i32.load offset=20 align=4
    local.get $base
    local.get $n
    call $unistd:write
    i32.ne
    else
    i32.const 0
    end
    if
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i3$
    local.get $i3$
    i32.load offset=0 align=4
    i32.const 32
    i32.or
    i32.store offset=0 align=4
    i32.const -1
    return
    end
    i32.const 0
    return
  )
  (func $stdio:wrtchk
    (param $fp i32) (result i32) 
    (local $i1$ i32) (local $i2$ i32) 
    local.get $fp
    i32.load offset=16 align=4
    i32.const 18
    i32.and
    i32.const 2
    i32.ne
    if
    local.get $fp
    i32.load offset=16 align=4
    i32.const 130
    i32.and
    i32.eqz
    if
    i32.const -1
    return
    end
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i1$
    local.get $i1$
    i32.load offset=0 align=4
    i32.const -17
    i32.and
    i32.store offset=0 align=4
    end
    local.get $fp
    i32.load offset=4 align=4
    i32.const 0
    i32.eq
    if
    local.get $fp
    call $stdio:addbuf
    global.get $stdio:closeall_set
    i32.extend8_s
    i32.eqz
    if
    ref.func $stdio:closeall
    call $stdlib:atexit
    drop
    i32.const 1
    global.set $stdio:closeall_set
    end
    end
    local.get $fp
    i32.load offset=8 align=4
    local.get $fp
    i32.load offset=4 align=4
    i32.eq
    if (result i32)
    local.get $fp
    i32.load offset=16 align=4
    i32.const 68
    i32.and
    i32.eqz
    else
    i32.const 0
    end
    if
    local.get $fp
    local.tee $i2$
    local.get $fp
    i32.load offset=12 align=4
    local.get $fp
    i32.load offset=4 align=4
    i32.sub
    i32.store offset=0 align=4
    end
    i32.const 0
    return
  )
  (func $stdio:_flushbuf (export "_flushbuf")
    (param $c i32) (param $fp i32) (result i32) 
    (local $fp$ i32) (local $i2$ i32) (local $i1$ i32) (local $i3$ i32) (local $i4$ i32) (local $i5$ i32) (local $i6$ i32) (local $i8$ i32) (local $i7$ i32) 
    global.get $env:__stack_pointer
    global.get $env:__stack_pointer
    i32.const 16
    i32.sub
    global.set $env:__stack_pointer
    local.set $fp$
    block $2$
    loop $1$
    block $3$
    local.get $fp
    i32.load offset=16 align=4
    i32.const 82
    i32.and
    i32.const 66
    i32.eq
    if
    local.get $fp
    i32.load offset=8 align=4
    local.get $fp
    i32.load offset=12 align=4
    i32.ge_u
    br_if $2$
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i1$
    i32.load offset=0 align=4
    local.get $i1$
    local.get $i1$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    local.tee $i2$
    local.get $c
    i32.store8 offset=0 align=1
    local.get $i2$
    i32.load8_u offset=0 align=1
    i32.const 10
    i32.ne
    if
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $c
    return
    end
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    local.get $c
    local.get $fp
    call $stdio:writebuf
    i32.const -1
    i32.eq
    select
    return
    end
    local.get $fp
    i32.load offset=16 align=4
    i32.const 22
    i32.and
    i32.const 6
    i32.eq
    if
    local.get $fp$
    local.tee $i3$
    local.get $c
    i32.store8 offset=0 align=1
    local.get $fp
    local.tee $i4$
    i32.const 0
    i32.store offset=0 align=4
    local.get $fp
    i32.load offset=20 align=4
    local.get $fp$
    i32.const 1
    call $unistd:write
    i32.const 1
    i32.eq
    if
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $c
    return
    end
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i5$
    local.get $i5$
    i32.load offset=0 align=4
    i32.const 32
    i32.or
    i32.store offset=0 align=4
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    return
    end
    local.get $fp
    call $stdio:wrtchk
    i32.const 0
    i32.ne
    if
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    return
    end
    end $3$
    local.get $fp
    i32.load offset=16 align=4
    i32.const 68
    i32.and
    br_if $1$
    end $1$
    end $2$
    local.get $fp
    call $stdio:writebuf
    drop
    local.get $fp
    local.tee $i6$
    local.get $i6$
    i32.load offset=0 align=4
    i32.const 1
    i32.sub
    i32.store offset=0 align=4
    local.get $i6$
    i32.load offset=0 align=4
    i32.const 0
    i32.ge_s
    if (result i32)
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i7$
    i32.load offset=0 align=4
    local.get $i7$
    local.get $i7$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    local.tee $i8$
    local.get $c
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    i32.store8 offset=0 align=1
    local.get $i8$
    i32.load8_u offset=0 align=1
    else
    local.get $c
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    local.get $fp
    call $stdio:_flushbuf
    end
    drop
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    local.get $c
    local.get $fp
    i32.load offset=16 align=4
    i32.const 32
    i32.and
    select
    return
  )
  (func $stdio:fwrite (export "fwrite")
    (param $buf i32) (param $size i32) (param $count i32) (param $fp i32) (result i32) 
    (local $ptr i32) (local $nleft i32) (local $n i32) (local $cptr i32) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) 
    local.get $buf
    local.set $ptr
    local.get $size
    i32.const 0
    i32.eq
    if (result i32)
    i32.const 1
    else
    local.get $count
    i32.const 0
    i32.eq
    end
    if (result i32)
    i32.const 1
    else
    local.get $fp
    call $stdio:wrtchk
    end
    if
    i32.const 0
    return
    end
    local.get $count
    local.get $size
    i32.mul
    local.set $nleft
    local.get $fp
    i32.load offset=4 align=4
    local.get $fp
    i32.load offset=8 align=4
    i32.ge_u
    if
    local.get $fp
    i32.load offset=16 align=4
    i32.const 4
    i32.and
    i32.const 0
    i32.ne
    if (result i32)
    i32.const 1
    else
    local.get $nleft
    i32.const 1024
    i32.ge_u
    end
    if
    local.get $fp
    i32.load offset=20 align=4
    local.get $ptr
    local.get $nleft
    call $unistd:write
    local.tee $n
    local.get $nleft
    i32.ne
    if
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i1$
    local.get $i1$
    i32.load offset=0 align=4
    i32.const 32
    i32.or
    i32.store offset=0 align=4
    local.get $n
    i32.const 0
    local.get $n
    i32.const 0
    i32.ge_s
    select
    local.set $n
    end
    local.get $n
    local.get $size
    i32.div_u
    return
    end
    end
    block $2$
    loop $1$
    i32.const 0
    br_if $2$
    block $3$
    block $4$
    loop $5$
    local.get $fp
    i32.load offset=12 align=4
    local.get $fp
    i32.load offset=8 align=4
    local.tee $cptr
    i32.sub
    local.tee $n
    i32.const 0
    i32.le_s
    if
    local.get $fp
    call $stdio:writebuf
    i32.const -1
    i32.eq
    if
    local.get $count
    local.get $nleft
    local.get $size
    i32.add
    i32.const 1
    i32.sub
    local.get $size
    i32.div_u
    i32.sub
    return
    end
    br $5$
    end
    end $5$
    end $4$
    local.get $nleft
    local.get $n
    i32.lt_u
    if
    local.get $nleft
    local.set $n
    end
    local.get $cptr
    local.get $ptr
    local.get $n
    call $string:memcpy
    drop
    local.get $fp
    local.tee $i2$
    local.get $i2$
    i32.load offset=0 align=4
    local.get $n
    i32.sub
    i32.store offset=0 align=4
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i3$
    local.get $i3$
    i32.load offset=0 align=4
    local.get $n
    i32.add
    i32.store offset=0 align=4
    local.get $nleft
    local.get $n
    i32.sub
    local.tee $nleft
    i32.const 0
    i32.eq
    if
    local.get $fp
    i32.load offset=16 align=4
    i32.const 68
    i32.and
    if
    local.get $fp
    i32.load offset=16 align=4
    i32.const 4
    i32.and
    if (result i32)
    i32.const 1
    else
    local.get $fp
    i32.load offset=4 align=4
    i32.const 10
    local.get $count
    local.get $size
    i32.mul
    call $string:memchr
    i32.const 0
    i32.ne
    end
    if
    local.get $fp
    call $stdio:writebuf
    drop
    end
    end
    local.get $count
    return
    end
    end $3$
    local.get $ptr
    local.get $n
    i32.add
    local.set $ptr
    br $1$
    end $1$
    end $2$
    i32.const 0
    return
  )
  (func $stdio:fputs (export "fputs")
    (param $s i32) (param $fp i32) (result i32) 
    (local $ndone i32) (local $n i32) (local $cptr i32) (local $p i32) (local $cnt i32) (local $i1$ i32) (local $i2$ i32) 
    i32.const 0
    local.set $ndone
    local.get $fp
    call $stdio:wrtchk
    if
    i32.const 0
    return
    end
    local.get $fp
    i32.load offset=16 align=4
    i32.const 4
    i32.and
    i32.const 0
    i32.eq
    if
    block $2$
    loop $1$
    i32.const 0
    br_if $2$
    block $3$
    block $4$
    loop $5$
    local.get $fp
    i32.load offset=12 align=4
    local.get $fp
    i32.load offset=8 align=4
    local.tee $cptr
    i32.sub
    local.tee $n
    i32.const 0
    i32.le_s
    if
    local.get $fp
    call $stdio:writebuf
    i32.const -1
    i32.eq
    if
    i32.const -1
    return
    end
    br $5$
    end
    end $5$
    end $4$
    local.get $cptr
    local.get $s
    i32.const 0
    local.get $n
    call $string:memccpy
    local.tee $p
    i32.const 0
    i32.ne
    if
    local.get $p
    local.get $cptr
    i32.sub
    i32.const 1
    i32.sub
    local.set $n
    end
    local.get $fp
    local.tee $i1$
    local.get $i1$
    i32.load offset=0 align=4
    local.get $n
    i32.sub
    i32.store offset=0 align=4
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i2$
    local.get $i2$
    i32.load offset=0 align=4
    local.get $n
    i32.add
    i32.store offset=0 align=4
    local.get $ndone
    local.get $n
    i32.add
    local.set $ndone
    local.get $p
    i32.const 0
    i32.ne
    if
    local.get $fp
    i32.load offset=16 align=4
    i32.const 64
    i32.and
    if
    local.get $fp
    call $stdio:writebuf
    i32.const -1
    i32.eq
    if
    i32.const -1
    return
    end
    end
    local.get $ndone
    return
    end
    end $3$
    local.get $s
    local.get $n
    i32.add
    local.set $s
    br $1$
    end $1$
    end $2$
    else
    local.get $s
    call $string:strlen
    local.set $cnt
    local.get $fp
    i32.load offset=20 align=4
    local.get $s
    local.get $cnt
    call $unistd:write
    drop
    local.get $cnt
    return
    end
    i32.const 0
    return
  )
  (func $stdio:fgetc (export "fgetc")
    (param $fp i32) (result i32) 
    (local $i1$ i32) (local $i2$ i32) 
    local.get $fp
    local.tee $i1$
    local.get $i1$
    i32.load offset=0 align=4
    i32.const 1
    i32.sub
    i32.store offset=0 align=4
    local.get $i1$
    i32.load offset=0 align=4
    i32.const 0
    i32.ge_s
    if (result i32)
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i2$
    i32.load offset=0 align=4
    local.get $i2$
    local.get $i2$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    i32.load8_u offset=0 align=1
    i32.const 255
    i32.and
    else
    local.get $fp
    call $stdio:_fillbuf
    end
    return
  )
  (func $stdio:fputc (export "fputc")
    (param $c i32) (param $fp i32) (result i32) 
    (local $i1$ i32) (local $i3$ i32) (local $i2$ i32) 
    local.get $fp
    local.tee $i1$
    local.get $i1$
    i32.load offset=0 align=4
    i32.const 1
    i32.sub
    i32.store offset=0 align=4
    local.get $i1$
    i32.load offset=0 align=4
    i32.const 0
    i32.ge_s
    if (result i32)
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i2$
    i32.load offset=0 align=4
    local.get $i2$
    local.get $i2$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    local.tee $i3$
    local.get $c
    i32.store8 offset=0 align=1
    local.get $i3$
    i32.load8_u offset=0 align=1
    else
    local.get $c
    local.get $fp
    call $stdio:_flushbuf
    end
    return
  )
  (func $stdio:fgets (export "fgets")
    (param $s i32) (param $size i32) (param $fp i32) (result i32) 
    (local $p i32) (local $s0 i32) (local $n i32) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) (local $i4$ i32) (local $i5$ i32) 
    local.get $s
    local.set $s0
    block $2$
    local.get $size
    local.get $size
    i32.const 1
    i32.sub
    local.set $size
    drop
    loop $1$
    local.get $size
    i32.const 0
    i32.gt_s
    i32.eqz
    br_if $2$
    block $3$
    local.get $fp
    i32.load offset=0 align=4
    i32.const 0
    i32.le_s
    if
    local.get $fp
    call $stdio:_fillbuf
    i32.const -1
    i32.eq
    if
    local.get $s0
    local.get $s
    i32.eq
    if
    i32.const 0
    return
    end
    br $2$
    end
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i1$
    i32.load offset=0 align=4
    local.get $i1$
    local.get $i1$
    i32.load offset=0 align=4
    i32.const 1
    i32.sub
    i32.store offset=0 align=4
    drop
    local.get $fp
    local.tee $i2$
    i32.load offset=0 align=4
    local.get $i2$
    local.get $i2$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    drop
    end
    local.get $size
    local.get $fp
    i32.load offset=0 align=4
    i32.lt_s
    if (result i32)
    local.get $size
    else
    local.get $fp
    i32.load offset=0 align=4
    end
    local.set $n
    local.get $s
    local.get $fp
    i32.load offset=8 align=4
    i32.const 10
    local.get $n
    call $string:memccpy
    local.tee $p
    i32.const 0
    i32.ne
    if
    local.get $p
    local.get $s
    i32.sub
    local.set $n
    end
    local.get $s
    local.get $n
    i32.add
    local.set $s
    local.get $fp
    local.tee $i3$
    local.get $i3$
    i32.load offset=0 align=4
    local.get $n
    i32.sub
    i32.store offset=0 align=4
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i4$
    local.get $i4$
    i32.load offset=0 align=4
    local.get $n
    i32.add
    i32.store offset=0 align=4
    local.get $p
    i32.const 0
    i32.ne
    br_if $2$
    end $3$
    local.get $size
    local.get $n
    i32.sub
    local.set $size
    br $1$
    end $1$
    end $2$
    local.get $s
    local.tee $i5$
    i32.const 0
    i32.store8 offset=0 align=1
    local.get $s0
    return
  )
  (func $stdio:ungetc (export "ungetc")
    (param $c i32) (param $fp i32) (result i32) 
    (local $i1$ i32) (local $i3$ i32) (local $i2$ i32) (local $i4$ i32) 
    local.get $c
    i32.const -1
    i32.eq
    if
    i32.const -1
    return
    end
    local.get $fp
    i32.load offset=16 align=4
    i32.const 1
    i32.and
    i32.const 0
    i32.eq
    if (result i32)
    i32.const 1
    else
    local.get $fp
    i32.load offset=8 align=4
    local.get $fp
    i32.load offset=4 align=4
    i32.le_u
    end
    if
    local.get $fp
    i32.load offset=8 align=4
    local.get $fp
    i32.load offset=4 align=4
    i32.eq
    if (result i32)
    local.get $fp
    i32.load offset=0 align=4
    i32.const 0
    i32.eq
    else
    i32.const 0
    end
    if
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i1$
    local.get $i1$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    else
    i32.const -1
    return
    end
    end
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i2$
    local.get $i2$
    i32.load offset=0 align=4
    i32.const 1
    i32.sub
    i32.store offset=0 align=4
    local.get $i2$
    i32.load offset=0 align=4
    local.tee $i3$
    local.get $c
    i32.store8 offset=0 align=1
    local.get $fp
    local.tee $i4$
    local.get $i4$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    i32.store offset=0 align=4
    local.get $c
    return
  )
  (func $stdio:fseek (export "fseek")
    (param $fp i32) (param $offset i32) (param $origin i32) (result i32) 
    (local $c i32) (local $p i32) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) (local $i4$ i32) (local $i5$ i32) (local $i6$ i32) (local $i7$ i32) (local $i8$ i32) (local $i9$ i32) 
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i1$
    local.get $i1$
    i32.load offset=0 align=4
    i32.const -17
    i32.and
    i32.store offset=0 align=4
    local.get $fp
    i32.load offset=16 align=4
    i32.const 1
    i32.and
    if
    local.get $origin
    i32.const 2
    i32.lt_s
    if (result i32)
    local.get $fp
    i32.load offset=4 align=4
    i32.const 0
    i32.ne
    else
    i32.const 0
    end
    if (result i32)
    local.get $fp
    i32.load offset=16 align=4
    i32.const 4
    i32.and
    i32.eqz
    else
    i32.const 0
    end
    if
    local.get $fp
    i32.load offset=0 align=4
    local.set $c
    local.get $offset
    local.set $p
    local.get $origin
    i32.const 0
    i32.eq
    if
    local.get $p
    local.get $c
    local.get $fp
    i32.load offset=20 align=4
    i32.const 0
    i64.extend_i32_s
    i32.const 1
    call $unistd:lseek
    i32.wrap_i64
    i32.sub
    i32.add
    local.set $p
    else
    local.get $offset
    local.get $c
    i32.sub
    local.set $offset
    end
    local.get $fp
    i32.load offset=16 align=4
    i32.const 128
    i32.and
    i32.eqz
    if (result i32)
    local.get $c
    i32.const 0
    i32.gt_s
    else
    i32.const 0
    end
    if (result i32)
    local.get $p
    local.get $c
    i32.le_s
    else
    i32.const 0
    end
    if (result i32)
    local.get $p
    local.get $fp
    i32.load offset=4 align=4
    local.get $fp
    i32.load offset=8 align=4
    i32.sub
    i32.ge_s
    else
    i32.const 0
    end
    if
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i2$
    local.get $i2$
    i32.load offset=0 align=4
    local.get $p
    i32.add
    i32.store offset=0 align=4
    local.get $fp
    local.tee $i3$
    local.get $i3$
    i32.load offset=0 align=4
    local.get $p
    i32.sub
    i32.store offset=0 align=4
    i32.const 0
    return
    end
    end
    local.get $fp
    i32.load offset=16 align=4
    i32.const 128
    i32.and
    if
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i4$
    local.get $fp
    i32.load offset=4 align=4
    i32.store offset=0 align=4
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i5$
    local.get $i5$
    i32.load offset=0 align=4
    i32.const -2
    i32.and
    i32.store offset=0 align=4
    end
    local.get $fp
    i32.load offset=20 align=4
    local.get $offset
    i64.extend_i32_s
    local.get $origin
    call $unistd:lseek
    i32.wrap_i64
    local.set $p
    local.get $fp
    local.tee $i6$
    i32.const 0
    i32.store offset=0 align=4
    else
    local.get $fp
    i32.load offset=16 align=4
    i32.const 130
    i32.and
    if
    local.get $fp
    call $stdio:fflush
    drop
    local.get $fp
    local.tee $i7$
    i32.const 0
    i32.store offset=0 align=4
    local.get $fp
    i32.load offset=16 align=4
    i32.const 128
    i32.and
    if
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i8$
    local.get $i8$
    i32.load offset=0 align=4
    i32.const -3
    i32.and
    i32.store offset=0 align=4
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i9$
    local.get $fp
    i32.load offset=4 align=4
    i32.store offset=0 align=4
    end
    local.get $fp
    i32.load offset=20 align=4
    local.get $offset
    i64.extend_i32_s
    local.get $origin
    call $unistd:lseek
    i32.wrap_i64
    local.set $p
    end
    end
    i32.const -1
    i32.const 0
    local.get $p
    i32.const -1
    i32.eq
    select
    return
  )
  (func $stdio:ftell (export "ftell")
    (param $fp i32) (result i32) 
    (local $offset i32) (local $adjust i32) (local $i1$ i32) 
    local.get $fp
    i32.load offset=0 align=4
    i32.const 0
    i32.lt_s
    if
    local.get $fp
    local.tee $i1$
    i32.const 0
    i32.store offset=0 align=4
    end
    local.get $fp
    i32.load offset=16 align=4
    i32.const 1
    i32.and
    if
    i32.const 0
    local.get $fp
    i32.load offset=0 align=4
    i32.sub
    local.set $adjust
    else
    local.get $fp
    i32.load offset=16 align=4
    i32.const 130
    i32.and
    if
    i32.const 0
    local.set $adjust
    local.get $fp
    i32.load offset=16 align=4
    i32.const 2
    i32.and
    if (result i32)
    local.get $fp
    i32.load offset=4 align=4
    i32.const 0
    i32.ne
    else
    i32.const 0
    end
    if (result i32)
    local.get $fp
    i32.load offset=16 align=4
    i32.const 4
    i32.and
    i32.const 0
    i32.eq
    else
    i32.const 0
    end
    if
    local.get $fp
    i32.load offset=8 align=4
    local.get $fp
    i32.load offset=4 align=4
    i32.sub
    local.set $adjust
    end
    else
    i32.const -1
    return
    end
    end
    local.get $fp
    i32.load offset=20 align=4
    i32.const 0
    i64.extend_i32_s
    i32.const 1
    call $unistd:lseek
    i32.wrap_i64
    local.tee $offset
    i32.const 0
    i32.ge_s
    if
    local.get $offset
    local.get $adjust
    i32.add
    local.set $offset
    end
    local.get $offset
    return
  )
  (func $stdio:rewind (export "rewind")
    (param $fp i32) 
    (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) (local $i4$ i32) 
    local.get $fp
    call $stdio:fflush
    drop
    local.get $fp
    i32.load offset=20 align=4
    i32.const 0
    i64.extend_i32_s
    i32.const 0
    call $unistd:lseek
    drop
    local.get $fp
    local.tee $i1$
    i32.const 0
    i32.store offset=0 align=4
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i2$
    local.get $fp
    i32.load offset=4 align=4
    i32.store offset=0 align=4
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i3$
    local.get $i3$
    i32.load offset=0 align=4
    i32.const -49
    i32.and
    i32.store offset=0 align=4
    local.get $fp
    i32.load offset=16 align=4
    i32.const 128
    i32.and
    if
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i4$
    local.get $i4$
    i32.load offset=0 align=4
    i32.const -4
    i32.and
    i32.store offset=0 align=4
    end
  )
  (func $stdio:fgetpos (export "fgetpos")
    (param $fp i32) (param $ptr i32) (result i32) 
    (local $offset i64) (local $adjust i32) (local $i1$ i32) (local $i2$ i32) 
    local.get $fp
    i32.load offset=0 align=4
    i32.const 0
    i32.lt_s
    if
    local.get $fp
    local.tee $i1$
    i32.const 0
    i32.store offset=0 align=4
    end
    local.get $fp
    i32.load offset=16 align=4
    i32.const 1
    i32.and
    if
    i32.const 0
    local.get $fp
    i32.load offset=0 align=4
    i32.sub
    local.set $adjust
    else
    local.get $fp
    i32.load offset=16 align=4
    i32.const 130
    i32.and
    if
    i32.const 0
    local.set $adjust
    local.get $fp
    i32.load offset=16 align=4
    i32.const 2
    i32.and
    if (result i32)
    local.get $fp
    i32.load offset=4 align=4
    i32.const 0
    i32.ne
    else
    i32.const 0
    end
    if (result i32)
    local.get $fp
    i32.load offset=16 align=4
    i32.const 4
    i32.and
    i32.const 0
    i32.eq
    else
    i32.const 0
    end
    if
    local.get $fp
    i32.load offset=8 align=4
    local.get $fp
    i32.load offset=4 align=4
    i32.sub
    local.set $adjust
    end
    else
    i32.const -1
    return
    end
    end
    local.get $fp
    i32.load offset=20 align=4
    i32.const 0
    i64.extend_i32_s
    i32.const 1
    call $unistd:lseek
    local.tee $offset
    i32.const 0
    i64.extend_i32_s
    i64.ge_s
    if
    local.get $offset
    local.get $adjust
    i64.extend_i32_s
    i64.add
    local.set $offset
    end
    local.get $ptr
    local.tee $i2$
    local.get $offset
    i64.store offset=0 align=8
    i32.const 0
    return
  )
  (func $stdio:fsetpos (export "fsetpos")
    (param $fp i32) (param $ptr i32) (result i32) 
    (local $c i32) (local $offset i64) (local $p i64) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) (local $i4$ i32) (local $i5$ i32) (local $i6$ i32) (local $i7$ i32) (local $i8$ i32) (local $i9$ i32) 
    local.get $ptr
    i64.load offset=0 align=8
    local.set $offset
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i1$
    local.get $i1$
    i32.load offset=0 align=4
    i32.const -17
    i32.and
    i32.store offset=0 align=4
    local.get $fp
    i32.load offset=16 align=4
    i32.const 1
    i32.and
    if
    local.get $fp
    i32.load offset=4 align=4
    i32.const 0
    i32.ne
    if (result i32)
    local.get $fp
    i32.load offset=16 align=4
    i32.const 4
    i32.and
    i32.eqz
    else
    i32.const 0
    end
    if
    local.get $fp
    i32.load offset=0 align=4
    local.set $c
    local.get $offset
    local.tee $p
    local.get $c
    i64.extend_i32_s
    local.get $fp
    i32.load offset=20 align=4
    i32.const 0
    i64.extend_i32_s
    i32.const 1
    call $unistd:lseek
    i64.sub
    i64.add
    local.set $p
    local.get $fp
    i32.load offset=16 align=4
    i32.const 128
    i32.and
    i32.eqz
    if (result i32)
    local.get $c
    i32.const 0
    i32.gt_s
    else
    i32.const 0
    end
    if (result i32)
    local.get $p
    local.get $c
    i64.extend_i32_s
    i64.le_s
    else
    i32.const 0
    end
    if (result i32)
    local.get $p
    local.get $fp
    i32.load offset=4 align=4
    local.get $fp
    i32.load offset=8 align=4
    i32.sub
    i64.extend_i32_s
    i64.ge_s
    else
    i32.const 0
    end
    if
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i2$
    local.get $i2$
    i32.load offset=0 align=4
    local.get $p
    i32.wrap_i64
    i32.add
    i32.store offset=0 align=4
    local.get $fp
    local.tee $i3$
    local.get $i3$
    i32.load offset=0 align=4
    local.get $p
    i32.wrap_i64
    i32.sub
    i32.store offset=0 align=4
    i32.const 0
    return
    end
    end
    local.get $fp
    i32.load offset=16 align=4
    i32.const 128
    i32.and
    if
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i4$
    local.get $fp
    i32.load offset=4 align=4
    i32.store offset=0 align=4
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i5$
    local.get $i5$
    i32.load offset=0 align=4
    i32.const -2
    i32.and
    i32.store offset=0 align=4
    end
    local.get $fp
    i32.load offset=20 align=4
    local.get $offset
    i32.const 0
    call $unistd:lseek
    local.set $p
    local.get $fp
    local.tee $i6$
    i32.const 0
    i32.store offset=0 align=4
    else
    local.get $fp
    i32.load offset=16 align=4
    i32.const 130
    i32.and
    if
    local.get $fp
    call $stdio:fflush
    drop
    local.get $fp
    local.tee $i7$
    i32.const 0
    i32.store offset=0 align=4
    local.get $fp
    i32.load offset=16 align=4
    i32.const 128
    i32.and
    if
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i8$
    local.get $i8$
    i32.load offset=0 align=4
    i32.const -3
    i32.and
    i32.store offset=0 align=4
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i9$
    local.get $fp
    i32.load offset=4 align=4
    i32.store offset=0 align=4
    end
    local.get $fp
    i32.load offset=20 align=4
    local.get $offset
    i32.const 0
    call $unistd:lseek
    local.set $p
    end
    end
    i32.const -1
    i32.const 0
    local.get $p
    i32.const -1
    i64.extend_i32_s
    i64.eq
    select
    return
  )
  (func $stdio:fflush (export "fflush")
    (param $fp i32) (result i32) 
    (local $i1$ i32) 
    local.get $fp
    i32.load offset=16 align=4
    i32.const 2
    i32.and
    i32.eqz
    if
    local.get $fp
    local.tee $i1$
    i32.const 0
    i32.store offset=0 align=4
    i32.const 0
    return
    end
    block $1$
    loop $2$
    local.get $fp
    i32.load offset=16 align=4
    i32.const 4
    i32.and
    i32.eqz
    if (result i32)
    local.get $fp
    i32.load offset=16 align=4
    i32.const 2
    i32.and
    else
    i32.const 0
    end
    if (result i32)
    local.get $fp
    i32.load offset=4 align=4
    i32.const 0
    i32.ne
    else
    i32.const 0
    end
    if (result i32)
    local.get $fp
    i32.load offset=8 align=4
    local.get $fp
    i32.load offset=4 align=4
    i32.gt_u
    else
    i32.const 0
    end
    if
    local.get $fp
    call $stdio:writebuf
    drop
    br $2$
    end
    end $2$
    end $1$
    i32.const -1
    i32.const 0
    local.get $fp
    i32.load offset=16 align=4
    i32.const 32
    i32.and
    select
    return
  )
  (func $stdio:setvbuf (export "setvbuf")
    (param $fp i32) (param $buf i32) (param $mode i32) (param $size i32) (result i32) 
    (local $i2$ i32) (local $i1$ i32) (local $i3$ i32) (local $i4$ i32) (local $i6$ i32) (local $i5$ i32) (local $i7$ i32) (local $i8$ i32) (local $i9$ i32) (local $i10$ i32) (local $i11$ i32) (local $i12$ i32) (local $i13$ i32) (local $i14$ i32) (local $i15$ i32) (local $i16$ i32) 
    local.get $fp
    i32.load offset=4 align=4
    i32.const 0
    i32.ne
    if (result i32)
    local.get $fp
    i32.load offset=4 align=4
    local.get $fp
    i32.const 24
    i32.add
    i32.ne
    else
    i32.const 0
    end
    if
    local.get $fp
    i32.load offset=16 align=4
    i32.const 256
    i32.and
    if
    local.get $fp
    i32.load offset=4 align=4
    call $stdlib:free
    end
    local.get $fp
    i32.const 4
    i32.add
    local.tee $i2$
    local.get $fp
    i32.const 12
    i32.add
    local.tee $i1$
    i32.const 0
    i32.store offset=0 align=4
    local.get $i1$
    i32.load offset=0 align=4
    i32.store offset=0 align=4
    end
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i3$
    local.get $i3$
    i32.load offset=0 align=4
    i32.const -325
    i32.and
    i32.store offset=0 align=4
    block $1$
    block $5$
    block $4$
    block $3$
    block $2$
    i32.const 0
    local.get $mode
    i32.eq
    br_if $4$
    i32.const 4
    local.get $mode
    i32.eq
    br_if $2$
    i32.const 64
    local.get $mode
    i32.eq
    br_if $3$
    br $5$
    end $2$
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i4$
    local.get $i4$
    i32.load offset=0 align=4
    i32.const 4
    i32.or
    i32.store offset=0 align=4
    local.get $fp
    i32.const 4
    i32.add
    local.tee $i6$
    local.get $fp
    i32.const 12
    i32.add
    local.tee $i5$
    i32.const 0
    i32.store offset=0 align=4
    local.get $i5$
    i32.load offset=0 align=4
    i32.store offset=0 align=4
    br $1$
    end $3$
    end $4$
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i7$
    local.get $i7$
    i32.load offset=0 align=4
    local.get $mode
    i32.or
    i32.store offset=0 align=4
    i32.const 1024
    local.get $size
    local.get $size
    i32.const 0
    i32.eq
    select
    local.set $size
    local.get $buf
    i32.const 0
    i32.ne
    if (result i32)
    local.get $size
    i32.const 8
    i32.gt_u
    else
    i32.const 0
    end
    if
    local.get $fp
    i32.const 4
    i32.add
    local.tee $i8$
    local.get $buf
    i32.store offset=0 align=4
    local.get $fp
    i32.const 12
    i32.add
    local.tee $i9$
    local.get $fp
    i32.load offset=4 align=4
    local.get $size
    i32.add
    i32.const 8
    i32.sub
    i32.store offset=0 align=4
    else
    local.get $size
    i32.const 8
    i32.gt_u
    if (result i32)
    local.get $fp
    i32.const 4
    i32.add
    local.tee $i10$
    local.get $size
    i32.const 8
    i32.add
    call $stdlib:malloc
    i32.store offset=0 align=4
    local.get $i10$
    i32.load offset=0 align=4
    i32.const 0
    i32.ne
    else
    i32.const 0
    end
    if
    local.get $fp
    i32.const 12
    i32.add
    local.tee $i11$
    local.get $fp
    i32.load offset=4 align=4
    local.get $size
    i32.add
    i32.const 8
    i32.add
    i32.store offset=0 align=4
    local.get $fp
    i32.const 16
    i32.add
    local.tee $i12$
    local.get $i12$
    i32.load offset=0 align=4
    i32.const 256
    i32.or
    i32.store offset=0 align=4
    else
    local.get $fp
    i32.const 4
    i32.add
    local.tee $i13$
    local.get $fp
    i32.const 24
    i32.add
    i32.store offset=0 align=4
    local.get $fp
    i32.const 12
    i32.add
    local.tee $i14$
    local.get $fp
    i32.load offset=4 align=4
    i32.const 8
    i32.add
    i32.store offset=0 align=4
    end
    end
    br $1$
    end $5$
    i32.const -1
    return
    end $1$
    local.get $fp
    i32.const 8
    i32.add
    local.tee $i15$
    local.get $fp
    i32.load offset=4 align=4
    i32.store offset=0 align=4
    local.get $fp
    local.tee $i16$
    i32.const 0
    i32.store offset=0 align=4
    i32.const 0
    return
  )
  (func $stdio:setbuf (export "setbuf")
    (param $fp i32) (param $buf i32) 
    local.get $fp
    local.get $buf
    i32.const 4
    i32.const 0
    local.get $buf
    i32.const 0
    i32.eq
    select
    i32.const 1024
    call $stdio:setvbuf
    drop
  )
  (func $stdio:renameat (export "renameat")
    (param $oldfd i32) (param $oldpath i32) (param $newfd i32) (param $newpath i32) (result i32) 
    (local $error i32) 
    local.get $oldfd
    local.get $oldpath
    local.get $oldpath
    call $string:strlen
    local.get $newfd
    local.get $newpath
    local.get $newpath
    call $string:strlen
    call $wasi_snapshot_preview1:path_rename
    local.tee $error
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $error
    i32.const 65535
    i32.and
    global.set $errno:errno
    i32.const -1
    return
    end
    i32.const 0
    return
  )
  (func $stdio:rename (export "rename")
    (param $oldpath i32) (param $newpath i32) (result i32) 
    (local $olddirfd i32) (local $newdirfd i32) (local $fp$ i32) 
    global.get $env:__stack_pointer
    global.get $env:__stack_pointer
    i32.const 16
    i32.sub
    global.set $env:__stack_pointer
    local.set $fp$
    local.get $oldpath
    local.get $fp$
    call $fcntl:find_relpath
    local.tee $olddirfd
    i32.const -1
    i32.ne
    if
    local.get $newpath
    local.get $fp$
    i32.const 4
    i32.add
    call $fcntl:find_relpath
    local.tee $newdirfd
    i32.const -1
    i32.ne
    if
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $olddirfd
    local.get $fp$
    i32.load offset=0 align=4
    local.get $newdirfd
    local.get $fp$
    i32.load offset=4 align=4
    call $stdio:renameat
    return
    end
    end
    i32.const 76
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    return
  )
  (func $stdio:remove (export "remove")
    (param $path i32) (result i32) 
    (local $dirfd i32) (local $r i32) (local $fp$ i32) 
    global.get $env:__stack_pointer
    global.get $env:__stack_pointer
    i32.const 16
    i32.sub
    global.set $env:__stack_pointer
    local.set $fp$
    local.get $path
    local.get $fp$
    call $fcntl:find_relpath
    local.tee $dirfd
    i32.const -1
    i32.eq
    if
    i32.const 76
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    return
    end
    local.get $dirfd
    local.get $fp$
    i32.load offset=0 align=4
    i32.const 0
    call $unistd:unlinkat
    local.tee $r
    i32.const 0
    i32.ne
    if (result i32)
    global.get $errno:errno
    i32.const 31
    i32.eq
    if (result i32)
    i32.const 1
    else
    global.get $errno:errno
    i32.const 76
    i32.eq
    end
    else
    i32.const 0
    end
    if
    local.get $dirfd
    local.get $fp$
    i32.load offset=0 align=4
    call $unistd:rmdirat
    local.set $r
    global.get $errno:errno
    i32.const 54
    i32.eq
    if
    i32.const 76
    global.set $errno:errno
    end
    end
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $r
    return
  )
)
