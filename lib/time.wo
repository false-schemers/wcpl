(module $time
  (import "env" "__stack_pointer" (global $env:__stack_pointer (mut i32)))
  (import "env" "__linear_memory" (memory $env:__linear_memory 0))
  (import "env" "__stack_pointer" (global $env:__stack_pointer i32))
  (import "wasi_snapshot_preview1" "clock_time_get" (func $wasi_snapshot_preview1:clock_time_get (param i32) (param i64) (param i32) (result i32)))
  (func $time:time (export "time")
    (param $pt i32) (result i64) 
    (local $nsps i64) (local $error i32) (local $bp$ i32) (local $fp$ i32) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) (local $i4$ i32) 
    global.get $env:__stack_pointer
    local.set $bp$
    global.get $env:__stack_pointer
    i32.const 16
    i32.sub
    global.set $env:__stack_pointer
    global.get $env:__stack_pointer
    local.tee $fp$
    local.tee $i1$
    i32.const 0
    i64.extend_i32_s
    i64.store offset=0 align=8
    i64.const 1000000000
    local.set $nsps
    i32.const 0
    local.get $nsps
    local.get $fp$
    call $wasi_snapshot_preview1:clock_time_get
    local.tee $error
    i32.const 65535
    i32.and
    i32.eqz
    if
    local.get $fp$
    local.tee $i2$
    local.get $i2$
    i64.load offset=0 align=8
    local.get $nsps
    i64.div_u
    i64.store offset=0 align=8
    else
    local.get $fp$
    local.tee $i3$
    i64.const -1
    i64.store offset=0 align=8
    end
    local.get $pt
    i32.const 0
    i32.ne
    if
    local.get $pt
    local.tee $i4$
    local.get $fp$
    i64.load offset=0 align=8
    i64.store offset=0 align=8
    end
    local.get $fp$
    i64.load offset=0 align=8
    local.get $bp$
    global.set $env:__stack_pointer
    return
  )
)
