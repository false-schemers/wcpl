(module $math
  (import "env" "__stack_pointer" (global $env:__stack_pointer (mut i32)))
  (import "env" "__linear_memory" (memory $env:__linear_memory 0))
  (import "env" "__stack_pointer" (global $env:__stack_pointer i32))
  (import "fenv" "feraiseexcept" (func $fenv:feraiseexcept (param i32)))
  (global $math:zero (mut f64) (f64.const 0))
  (global $math:one (mut f64) (f64.const 1))
  (global $math:two (mut f64) (f64.const 2))
  (global $math:two53 (mut f64) (f64.const 9007199254740992))
  (global $math:L1 (mut f64) (f64.const 0.59999999999999465))
  (global $math:L2 (mut f64) (f64.const 0.42857142857855018))
  (global $math:L3 (mut f64) (f64.const 0.33333332981837743))
  (global $math:L4 (mut f64) (f64.const 0.27272812380853401))
  (global $math:L5 (mut f64) (f64.const 0.23066074577556175))
  (global $math:L6 (mut f64) (f64.const 0.20697501780033842))
  (global $math:P1 (mut f64) (f64.const 0.16666666666666602))
  (global $math:P2 (mut f64) (f64.const -0.0027777777777015593))
  (global $math:P3 (mut f64) (f64.const 6.6137563214379344e-005))
  (global $math:P4 (mut f64) (f64.const -1.6533902205465252e-006))
  (global $math:P5 (mut f64) (f64.const 4.1381367970572385e-008))
  (global $math:lg2 (mut f64) (f64.const 0.69314718055994529))
  (global $math:lg2_h (mut f64) (f64.const 0.69314718246459961))
  (global $math:lg2_l (mut f64) (f64.const -1.904654299957768e-009))
  (global $math:ovt (mut f64) (f64.const 8.0085662595372941e-017))
  (global $math:cp (mut f64) (f64.const 0.96179669392597555))
  (global $math:cp_h (mut f64) (f64.const 0.96179670095443726))
  (global $math:cp_l (mut f64) (f64.const -7.0284616509527583e-009))
  (global $math:ivln2 (mut f64) (f64.const 1.4426950408889634))
  (global $math:ivln2_h (mut f64) (f64.const 1.4426950216293335))
  (global $math:ivln2_l (mut f64) (f64.const 1.9259629911266175e-008))
  (global $math:ln2_hi (mut f64) (f64.const 0.69314718036912382))
  (global $math:ln2_lo (mut f64) (f64.const 1.9082149292705877e-010))
  (global $math:Lg1 (mut f64) (f64.const 0.66666666666667351))
  (global $math:Lg2 (mut f64) (f64.const 0.39999999999409419))
  (global $math:Lg3 (mut f64) (f64.const 0.28571428743662391))
  (global $math:Lg4 (mut f64) (f64.const 0.22222198432149784))
  (global $math:Lg5 (mut f64) (f64.const 0.1818357216161805))
  (global $math:Lg6 (mut f64) (f64.const 0.15313837699209373))
  (global $math:Lg7 (mut f64) (f64.const 0.14798198605116586))
  (global $math:ivln10 (mut f64) (f64.const 0.43429448190325182))
  (global $math:log10_2hi (mut f64) (f64.const 0.30102999566361177))
  (global $math:log10_2lo (mut f64) (f64.const 3.6942390771589308e-013))
  (global $math:twom1000 (mut f64) (f64.const 9.3326361850321888e-302))
  (global $math:o_threshold (mut f64) (f64.const 709.78271289338397))
  (global $math:u_threshold (mut f64) (f64.const -745.13321910194111))
  (data $math:bp var align=8 "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
  (data $math:dp_h var align=8 "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
  (data $math:dp_l var align=8 "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
  (data $math:Zero var align=8 "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\80")
  (data $math:halF var align=8 "\00\00\00\00\00\00\e0?\00\00\00\00\00\00\e0\bf")
  (data $math:ln2HI var align=8 "\00\00\e0\feB.\e6?\00\00\e0\feB.\e6\bf")
  (data $math:ln2LO var align=8 "v<y5\ef9\ea=v<y5\ef9\ea\bd")
  (func $math:isnan
    (param $x f64) (result i32) 
    (local $ux i64) 
    local.get $x
    i64.reinterpret_f64
    local.tee $ux
    i64.const 9218868437227405312
    i64.and
    i64.const 9218868437227405312
    i64.eq
    if (result i32)
    local.get $ux
    i64.const 4503599627370495
    i64.and
    i64.const 0
    i64.ne
    else
    i32.const 0
    end
    return
  )
  (func $math:issignaling
    (param $x f64) (result i32) 
    (local $hxi i32) (local $lxi i32) (local $__t i64) 
    local.get $x
    i64.reinterpret_f64
    local.tee $__t
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $hxi
    local.get $__t
    i32.wrap_i64
    local.set $lxi
    local.get $hxi
    i32.const 524288
    i32.xor
    local.tee $hxi
    local.get $lxi
    i32.const 0
    local.get $lxi
    i32.sub
    i32.or
    i32.const 31
    i32.shr_u
    i32.or
    local.tee $hxi
    i32.const 2147483647
    i32.and
    i32.const 2146959360
    i32.gt_u
    return
  )
  (func $math:__ieee754_scalbn
    (param $x# f64) (param $n i32) (result f64) 
    (local $k i32) (local $hx i32) (local $lx i32) (local $__t i64) (local $__p i32) (local $__t#5 i64) (local $__p#6 i32) (local $__t#7 i64) (local $bp$ i32) (local $fp$ i32) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) (local $i4$ i32) 
    global.get $env:__stack_pointer
    local.set $bp$
    global.get $env:__stack_pointer
    i32.const 16
    i32.sub
    global.set $env:__stack_pointer
    global.get $env:__stack_pointer
    local.tee $fp$
    local.tee $i1$
    local.get $x#
    f64.store offset=0 align=8
    local.get $fp$
    f64.load offset=0 align=8
    i64.reinterpret_f64
    local.tee $__t
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $hx
    local.get $__t
    i32.wrap_i64
    local.set $lx
    local.get $hx
    i32.const 20
    i32.shr_s
    i32.const 2047
    i32.and
    local.tee $k
    i32.const 0
    i32.eq
    if
    local.get $lx
    local.get $hx
    i32.const 2147483647
    i32.and
    i32.or
    i32.const 0
    i32.eq
    if
    local.get $fp$
    f64.load offset=0 align=8
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $fp$
    local.tee $i2$
    local.get $i2$
    f64.load offset=0 align=8
    f64.const 18014398509481984
    f64.mul
    f64.store offset=0 align=8
    local.get $fp$
    f64.load offset=0 align=8
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.tee $hx
    i32.const 2146435072
    i32.and
    i32.const 20
    i32.shr_s
    i32.const 54
    i32.sub
    local.set $k
    end
    local.get $k
    i32.const 2047
    i32.eq
    if
    local.get $fp$
    f64.load offset=0 align=8
    local.get $fp$
    f64.load offset=0 align=8
    f64.add
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $n
    i32.const -30000
    i32.lt_s
    if
    f64.const 1e-300
    i64.const 118622047889322841
    local.get $fp$
    f64.load offset=0 align=8
    i64.reinterpret_f64
    i64.const -9223372036854775808
    i64.and
    i64.or
    f64.reinterpret_i64
    f64.mul
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $n
    i32.const 30000
    i32.gt_s
    if (result i32)
    i32.const 1
    else
    local.get $k
    local.get $n
    i32.add
    i32.const 2046
    i32.gt_s
    end
    if
    f64.const 1.0000000000000001e+300
    i64.const 9094988921128908188
    local.get $fp$
    f64.load offset=0 align=8
    i64.reinterpret_f64
    i64.const -9223372036854775808
    i64.and
    i64.or
    f64.reinterpret_i64
    f64.mul
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $k
    local.get $n
    i32.add
    local.tee $k
    i32.const 0
    i32.gt_s
    if
    local.get $fp$
    local.tee $__p
    f64.load offset=0 align=8
    i64.reinterpret_f64
    i64.const 4294967295
    i64.and
    local.get $hx
    i32.const -2146435073
    i32.and
    local.get $k
    i32.const 20
    i32.shl
    i32.or
    i64.extend_i32_u
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.or
    local.set $__t#5
    local.get $__p
    local.tee $i3$
    local.get $__t#5
    f64.reinterpret_i64
    f64.store offset=0 align=8
    local.get $fp$
    f64.load offset=0 align=8
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $k
    i32.const -54
    i32.le_s
    if
    f64.const 1e-300
    i64.const 118622047889322841
    local.get $fp$
    f64.load offset=0 align=8
    i64.reinterpret_f64
    i64.const -9223372036854775808
    i64.and
    i64.or
    f64.reinterpret_i64
    f64.mul
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $k
    i32.const 54
    i32.add
    local.set $k
    local.get $fp$
    local.tee $__p#6
    f64.load offset=0 align=8
    i64.reinterpret_f64
    i64.const 4294967295
    i64.and
    local.get $hx
    i32.const -2146435073
    i32.and
    local.get $k
    i32.const 20
    i32.shl
    i32.or
    i64.extend_i32_u
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.or
    local.set $__t#7
    local.get $__p#6
    local.tee $i4$
    local.get $__t#7
    f64.reinterpret_i64
    f64.store offset=0 align=8
    local.get $fp$
    f64.load offset=0 align=8
    f64.const 5.5511151231257827e-017
    f64.mul
    local.get $bp$
    global.set $env:__stack_pointer
    return
  )
  (func $math:__ieee754_frexp
    (param $x# f64) (param $eptr i32) (result f64) 
    (local $hx i32) (local $ix i32) (local $lx i32) (local $__t i64) (local $__p i32) (local $__t#5 i64) (local $bp$ i32) (local $fp$ i32) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) (local $i4$ i32) (local $i5$ i32) (local $i6$ i32) 
    global.get $env:__stack_pointer
    local.set $bp$
    global.get $env:__stack_pointer
    i32.const 16
    i32.sub
    global.set $env:__stack_pointer
    global.get $env:__stack_pointer
    local.tee $fp$
    local.tee $i1$
    local.get $x#
    f64.store offset=0 align=8
    local.get $fp$
    f64.load offset=0 align=8
    i64.reinterpret_f64
    local.tee $__t
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $hx
    local.get $__t
    i32.wrap_i64
    local.set $lx
    i32.const 2147483647
    local.get $hx
    i32.and
    local.set $ix
    local.get $eptr
    local.tee $i2$
    i32.const 0
    i32.store offset=0 align=4
    local.get $ix
    i32.const 2146435072
    i32.ge_s
    if (result i32)
    i32.const 1
    else
    local.get $ix
    local.get $lx
    i32.or
    i32.const 0
    i32.eq
    end
    if
    local.get $fp$
    f64.load offset=0 align=8
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $ix
    i32.const 1048576
    i32.lt_s
    if
    local.get $fp$
    local.tee $i3$
    local.get $i3$
    f64.load offset=0 align=8
    f64.const 18014398509481984
    f64.mul
    f64.store offset=0 align=8
    local.get $fp$
    f64.load offset=0 align=8
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.tee $hx
    i32.const 2147483647
    i32.and
    local.set $ix
    local.get $eptr
    local.tee $i4$
    i32.const -54
    i32.store offset=0 align=4
    end
    local.get $eptr
    local.tee $i5$
    local.get $i5$
    i32.load offset=0 align=4
    local.get $ix
    i32.const 20
    i32.shr_s
    i32.const 1022
    i32.sub
    i32.add
    i32.store offset=0 align=4
    local.get $hx
    i32.const -2146435073
    i32.and
    i32.const 1071644672
    i32.or
    local.set $hx
    local.get $fp$
    local.tee $__p
    f64.load offset=0 align=8
    i64.reinterpret_f64
    i64.const 4294967295
    i64.and
    local.get $hx
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.or
    local.set $__t#5
    local.get $__p
    local.tee $i6$
    local.get $__t#5
    f64.reinterpret_i64
    f64.store offset=0 align=8
    local.get $fp$
    f64.load offset=0 align=8
    local.get $bp$
    global.set $env:__stack_pointer
    return
  )
  (func $math:__ieee754_ceil
    (param $x f64) (result f64) 
    (local $i0 i32) (local $j0 i32) (local $i i32) (local $j i32) (local $i1 i32) (local $__t i64) 
    local.get $x
    i64.reinterpret_f64
    local.tee $__t
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $i0
    local.get $__t
    i32.wrap_i64
    local.set $i1
    local.get $i0
    i32.const 20
    i32.shr_s
    i32.const 2047
    i32.and
    i32.const 1023
    i32.sub
    local.tee $j0
    i32.const 20
    i32.lt_s
    if
    local.get $j0
    i32.const 0
    i32.lt_s
    if
    f64.const 1.0000000000000001e+300
    local.get $x
    f64.add
    drop
    local.get $i0
    i32.const 0
    i32.lt_s
    if
    i32.const -2147483648
    local.set $i0
    i32.const 0
    local.set $i1
    else
    local.get $i0
    local.get $i1
    i32.or
    i32.const 0
    i32.ne
    if
    i32.const 1072693248
    local.set $i0
    i32.const 0
    local.set $i1
    end
    end
    else
    i32.const 1048575
    local.get $j0
    i32.shr_u
    local.set $i
    local.get $i0
    local.get $i
    i32.and
    local.get $i1
    i32.or
    i32.const 0
    i32.eq
    if
    local.get $x
    return
    end
    f64.const 1.0000000000000001e+300
    local.get $x
    f64.add
    drop
    local.get $i0
    i32.const 0
    i32.gt_s
    if
    local.get $i0
    i32.const 1048576
    local.get $j0
    i32.shr_s
    i32.add
    local.set $i0
    end
    local.get $i0
    i32.const -1
    local.get $i
    i32.xor
    i32.and
    local.set $i0
    i32.const 0
    local.set $i1
    end
    else
    local.get $j0
    i32.const 51
    i32.gt_s
    if
    local.get $j0
    i32.const 1024
    i32.eq
    if
    local.get $x
    local.get $x
    f64.add
    return
    else
    local.get $x
    return
    end
    else
    i32.const -1
    local.get $j0
    i32.const 20
    i32.sub
    i32.shr_u
    local.set $i
    local.get $i1
    local.get $i
    i32.and
    i32.const 0
    i32.eq
    if
    local.get $x
    return
    end
    f64.const 1.0000000000000001e+300
    local.get $x
    f64.add
    drop
    local.get $i0
    i32.const 0
    i32.gt_s
    if
    local.get $j0
    i32.const 20
    i32.eq
    if
    local.get $i0
    i32.const 1
    i32.add
    local.set $i0
    else
    local.get $i1
    i32.const 1
    i32.const 52
    local.get $j0
    i32.sub
    i32.shl
    i32.add
    local.tee $j
    local.get $i1
    i32.lt_u
    if
    local.get $i0
    i32.const 1
    i32.add
    local.set $i0
    end
    local.get $j
    local.set $i1
    end
    end
    local.get $i1
    i32.const -1
    local.get $i
    i32.xor
    i32.and
    local.set $i1
    end
    end
    local.get $i0
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    local.get $i1
    i64.extend_i32_u
    i64.const 4294967295
    i64.and
    i64.or
    f64.reinterpret_i64
    local.tee $x
    return
  )
  (func $math:__ieee754_floor (export "__ieee754_floor")
    (param $x f64) (result f64) 
    (local $i0 i32) (local $j0 i32) (local $i i32) (local $j i32) (local $i1 i32) (local $__t i64) 
    local.get $x
    i64.reinterpret_f64
    local.tee $__t
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $i0
    local.get $__t
    i32.wrap_i64
    local.set $i1
    local.get $i0
    i32.const 20
    i32.shr_s
    i32.const 2047
    i32.and
    i32.const 1023
    i32.sub
    local.tee $j0
    i32.const 20
    i32.lt_s
    if
    local.get $j0
    i32.const 0
    i32.lt_s
    if
    f64.const 1.0000000000000001e+300
    local.get $x
    f64.add
    drop
    local.get $i0
    i32.const 0
    i32.ge_s
    if
    i32.const 0
    local.set $i0
    i32.const 0
    local.set $i1
    else
    local.get $i0
    i32.const 2147483647
    i32.and
    local.get $i1
    i32.or
    i32.const 0
    i32.ne
    if
    i32.const -1074790400
    local.set $i0
    i32.const 0
    local.set $i1
    end
    end
    else
    i32.const 1048575
    local.get $j0
    i32.shr_u
    local.set $i
    local.get $i0
    local.get $i
    i32.and
    local.get $i1
    i32.or
    i32.const 0
    i32.eq
    if
    local.get $x
    return
    end
    f64.const 1.0000000000000001e+300
    local.get $x
    f64.add
    drop
    local.get $i0
    i32.const 0
    i32.lt_s
    if
    local.get $i0
    i32.const 1048576
    local.get $j0
    i32.shr_u
    i32.add
    local.set $i0
    end
    local.get $i0
    i32.const -1
    local.get $i
    i32.xor
    i32.and
    local.set $i0
    i32.const 0
    local.set $i1
    end
    else
    local.get $j0
    i32.const 51
    i32.gt_s
    if
    local.get $j0
    i32.const 1024
    i32.eq
    if
    local.get $x
    local.get $x
    f64.add
    return
    else
    local.get $x
    return
    end
    else
    i32.const -1
    local.get $j0
    i32.const 20
    i32.sub
    i32.shr_u
    local.set $i
    local.get $i1
    local.get $i
    i32.and
    i32.const 0
    i32.eq
    if
    local.get $x
    return
    end
    f64.const 1.0000000000000001e+300
    local.get $x
    f64.add
    drop
    local.get $i0
    i32.const 0
    i32.lt_s
    if
    local.get $j0
    i32.const 20
    i32.eq
    if
    local.get $i0
    i32.const 1
    i32.add
    local.set $i0
    else
    local.get $i1
    i32.const 1
    i32.const 52
    local.get $j0
    i32.sub
    i32.shl
    i32.add
    local.tee $j
    local.get $i1
    i32.lt_u
    if
    local.get $i0
    i32.const 1
    i32.add
    local.set $i0
    end
    local.get $j
    local.set $i1
    end
    end
    local.get $i1
    i32.const -1
    local.get $i
    i32.xor
    i32.and
    local.set $i1
    end
    end
    local.get $i0
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    local.get $i1
    i64.extend_i32_u
    i64.const 4294967295
    i64.and
    i64.or
    f64.reinterpret_i64
    local.tee $x
    return
  )
  (func $math:__ieee754_round
    (param $x f64) (result f64) 
    (local $i0 i32) (local $j0 i32) (local $i1 i32) (local $__t i64) (local $i i32) (local $i#5 i32) (local $j i32) 
    local.get $x
    i64.reinterpret_f64
    local.tee $__t
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $i0
    local.get $__t
    i32.wrap_i64
    local.set $i1
    local.get $i0
    i32.const 20
    i32.shr_s
    i32.const 2047
    i32.and
    i32.const 1023
    i32.sub
    local.tee $j0
    i32.const 20
    i32.lt_s
    if
    local.get $j0
    i32.const 0
    i32.lt_s
    if
    f64.const 1.0000000000000001e+300
    local.get $x
    f64.add
    drop
    local.get $i0
    i32.const -2147483648
    i32.and
    local.set $i0
    local.get $j0
    i32.const -1
    i32.eq
    if
    local.get $i0
    i32.const 1072693248
    i32.or
    local.set $i0
    end
    i32.const 0
    local.set $i1
    else
    i32.const 1048575
    local.get $j0
    i32.shr_u
    local.set $i
    local.get $i0
    local.get $i
    i32.and
    local.get $i1
    i32.or
    i32.const 0
    i32.eq
    if
    local.get $x
    return
    end
    f64.const 1.0000000000000001e+300
    local.get $x
    f64.add
    drop
    local.get $i0
    i32.const 524288
    local.get $j0
    i32.shr_u
    i32.add
    local.tee $i0
    i32.const -1
    local.get $i
    i32.xor
    i32.and
    local.set $i0
    i32.const 0
    local.set $i1
    end
    else
    local.get $j0
    i32.const 51
    i32.gt_s
    if
    local.get $j0
    i32.const 1024
    i32.eq
    if
    local.get $x
    local.get $x
    f64.add
    return
    else
    local.get $x
    return
    end
    else
    i32.const -1
    local.get $j0
    i32.const 20
    i32.sub
    i32.shr_u
    local.set $i#5
    local.get $i1
    local.get $i#5
    i32.and
    i32.const 0
    i32.eq
    if
    local.get $x
    return
    end
    f64.const 1.0000000000000001e+300
    local.get $x
    f64.add
    drop
    local.get $i1
    i32.const 1
    i32.const 51
    local.get $j0
    i32.sub
    i32.shl
    i32.add
    local.tee $j
    local.get $i1
    i32.lt_u
    if
    local.get $i0
    i32.const 1
    i32.add
    local.set $i0
    end
    local.get $j
    local.tee $i1
    i32.const -1
    local.get $i#5
    i32.xor
    i32.and
    local.set $i1
    end
    end
    local.get $i0
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    local.get $i1
    i64.extend_i32_u
    i64.const 4294967295
    i64.and
    i64.or
    f64.reinterpret_i64
    local.tee $x
    return
  )
  (func $math:__ieee754_trunc
    (param $x f64) (result f64) 
    (local $i0 i32) (local $j0 i32) (local $i1 i32) (local $sx i32) (local $__t i64) 
    local.get $x
    i64.reinterpret_f64
    local.tee $__t
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $i0
    local.get $__t
    i32.wrap_i64
    local.set $i1
    local.get $i0
    i32.const -2147483648
    i32.and
    local.set $sx
    local.get $i0
    i32.const 20
    i32.shr_s
    i32.const 2047
    i32.and
    i32.const 1023
    i32.sub
    local.tee $j0
    i32.const 20
    i32.lt_s
    if
    local.get $j0
    i32.const 0
    i32.lt_s
    if
    local.get $sx
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.const 0
    i64.or
    f64.reinterpret_i64
    local.set $x
    else
    local.get $sx
    local.get $i0
    i32.const -1
    i32.const 1048575
    local.get $j0
    i32.shr_u
    i32.xor
    i32.and
    i32.or
    i64.extend_i32_u
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.const 0
    i64.or
    f64.reinterpret_i64
    local.set $x
    end
    else
    local.get $j0
    i32.const 51
    i32.gt_s
    if
    local.get $j0
    i32.const 1024
    i32.eq
    if
    local.get $x
    local.get $x
    f64.add
    return
    end
    else
    local.get $i0
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    local.get $i1
    i32.const -1
    i32.const -1
    local.get $j0
    i32.const 20
    i32.sub
    i32.shr_u
    i32.xor
    i32.and
    i64.extend_i32_u
    i64.const 4294967295
    i64.and
    i64.or
    f64.reinterpret_i64
    local.set $x
    end
    end
    local.get $x
    return
  )
  (func $math:__ieee754_modf
    (param $x f64) (param $iptr i32) (result f64) 
    (local $i0 i32) (local $i1 i32) (local $j0 i32) (local $i i32) (local $__t i64) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) (local $i4$ i32) (local $i5$ i32) (local $i6$ i32) 
    local.get $x
    i64.reinterpret_f64
    local.tee $__t
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $i0
    local.get $__t
    i32.wrap_i64
    local.set $i1
    local.get $i0
    i32.const 20
    i32.shr_s
    i32.const 2047
    i32.and
    i32.const 1023
    i32.sub
    local.tee $j0
    i32.const 20
    i32.lt_s
    if
    local.get $j0
    i32.const 0
    i32.lt_s
    if
    local.get $iptr
    local.tee $i1$
    local.get $i0
    i32.const -2147483648
    i32.and
    i64.extend_i32_u
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.const 0
    i64.or
    f64.reinterpret_i64
    f64.store offset=0 align=8
    local.get $x
    return
    else
    i32.const 1048575
    local.get $j0
    i32.shr_u
    local.set $i
    local.get $i0
    local.get $i
    i32.and
    local.get $i1
    i32.or
    i32.const 0
    i32.eq
    if
    local.get $iptr
    local.tee $i2$
    local.get $x
    f64.store offset=0 align=8
    local.get $i0
    i32.const -2147483648
    i32.and
    i64.extend_i32_u
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.const 0
    i64.or
    f64.reinterpret_i64
    local.tee $x
    return
    else
    local.get $iptr
    local.tee $i3$
    local.get $i0
    i32.const -1
    local.get $i
    i32.xor
    i32.and
    i64.extend_i32_u
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.const 0
    i64.or
    f64.reinterpret_i64
    f64.store offset=0 align=8
    local.get $x
    local.get $iptr
    f64.load offset=0 align=8
    f64.sub
    return
    end
    end
    else
    local.get $j0
    i32.const 51
    i32.gt_s
    if
    local.get $iptr
    local.tee $i4$
    local.get $x
    global.get $math:one
    f64.mul
    f64.store offset=0 align=8
    local.get $j0
    i32.const 1024
    i32.eq
    if (result i32)
    local.get $i0
    i32.const 1048575
    i32.and
    local.get $i1
    i32.or
    i32.const 0
    i32.ne
    else
    i32.const 0
    end
    if
    local.get $x
    global.get $math:one
    f64.mul
    return
    end
    local.get $i0
    i32.const -2147483648
    i32.and
    i64.extend_i32_u
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.const 0
    i64.or
    f64.reinterpret_i64
    local.tee $x
    return
    else
    i32.const -1
    local.get $j0
    i32.const 20
    i32.sub
    i32.shr_u
    local.set $i
    local.get $i1
    local.get $i
    i32.and
    i32.const 0
    i32.eq
    if
    local.get $iptr
    local.tee $i5$
    local.get $x
    f64.store offset=0 align=8
    local.get $i0
    i32.const -2147483648
    i32.and
    i64.extend_i32_u
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.const 0
    i64.or
    f64.reinterpret_i64
    local.tee $x
    return
    else
    local.get $iptr
    local.tee $i6$
    local.get $i0
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    local.get $i1
    i32.const -1
    local.get $i
    i32.xor
    i32.and
    i64.extend_i32_u
    i64.const 4294967295
    i64.and
    i64.or
    f64.reinterpret_i64
    f64.store offset=0 align=8
    local.get $x
    local.get $iptr
    f64.load offset=0 align=8
    f64.sub
    return
    end
    end
    end
    f64.const +nan
    return
  )
  (func $math:__ieee754_fmod
    (param $x f64) (param $y f64) (result f64) 
    (local $n i32) (local $hx i32) (local $hy i32) (local $hz i32) (local $ix i32) (local $iy i32) (local $sx i32) (local $i i32) (local $lx i32) (local $ly i32) (local $lz i32) (local $__t i64) (local $__t#12 i64) 
    local.get $x
    i64.reinterpret_f64
    local.tee $__t
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $hx
    local.get $__t
    i32.wrap_i64
    local.set $lx
    local.get $y
    i64.reinterpret_f64
    local.tee $__t#12
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $hy
    local.get $__t#12
    i32.wrap_i64
    local.set $ly
    local.get $hx
    i32.const -2147483648
    i32.and
    local.set $sx
    local.get $hx
    local.get $sx
    i32.xor
    local.set $hx
    local.get $hy
    i32.const 2147483647
    i32.and
    local.tee $hy
    local.get $ly
    i32.or
    i32.const 0
    i32.eq
    if (result i32)
    i32.const 1
    else
    local.get $hx
    i32.const 2146435072
    i32.ge_s
    end
    if (result i32)
    i32.const 1
    else
    local.get $hy
    local.get $ly
    i32.const 0
    local.get $ly
    i32.sub
    i32.or
    i32.const 31
    i32.shr_u
    i32.or
    i32.const 2146435072
    i32.gt_u
    end
    if
    local.get $x
    local.get $y
    f64.mul
    local.get $x
    local.get $y
    f64.mul
    f64.div
    return
    end
    local.get $hx
    local.get $hy
    i32.le_s
    if
    local.get $hx
    local.get $hy
    i32.lt_s
    if (result i32)
    i32.const 1
    else
    local.get $lx
    local.get $ly
    i32.lt_u
    end
    if
    local.get $x
    return
    end
    local.get $lx
    local.get $ly
    i32.eq
    if
    ref.data $math:Zero
    local.get $sx
    i32.const 31
    i32.shr_u
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    return
    end
    end
    local.get $hx
    i32.const 1048576
    i32.lt_s
    if
    local.get $hx
    i32.const 0
    i32.eq
    if
    block $2$
    i32.const -1043
    local.set $ix
    local.get $lx
    local.set $i
    loop $1$
    local.get $i
    i32.const 0
    i32.gt_s
    i32.eqz
    br_if $2$
    block $3$
    local.get $ix
    i32.const 1
    i32.sub
    local.set $ix
    end $3$
    local.get $i
    i32.const 1
    i32.shl
    local.set $i
    br $1$
    end $1$
    end $2$
    else
    block $5$
    i32.const -1022
    local.set $ix
    local.get $hx
    i32.const 11
    i32.shl
    local.set $i
    loop $4$
    local.get $i
    i32.const 0
    i32.gt_s
    i32.eqz
    br_if $5$
    block $6$
    local.get $ix
    i32.const 1
    i32.sub
    local.set $ix
    end $6$
    local.get $i
    i32.const 1
    i32.shl
    local.set $i
    br $4$
    end $4$
    end $5$
    end
    else
    local.get $hx
    i32.const 20
    i32.shr_s
    i32.const 1023
    i32.sub
    local.set $ix
    end
    local.get $hy
    i32.const 1048576
    i32.lt_s
    if
    local.get $hy
    i32.const 0
    i32.eq
    if
    block $8$
    i32.const -1043
    local.set $iy
    local.get $ly
    local.set $i
    loop $7$
    local.get $i
    i32.const 0
    i32.gt_s
    i32.eqz
    br_if $8$
    block $9$
    local.get $iy
    i32.const 1
    i32.sub
    local.set $iy
    end $9$
    local.get $i
    i32.const 1
    i32.shl
    local.set $i
    br $7$
    end $7$
    end $8$
    else
    block $11$
    i32.const -1022
    local.set $iy
    local.get $hy
    i32.const 11
    i32.shl
    local.set $i
    loop $10$
    local.get $i
    i32.const 0
    i32.gt_s
    i32.eqz
    br_if $11$
    block $12$
    local.get $iy
    i32.const 1
    i32.sub
    local.set $iy
    end $12$
    local.get $i
    i32.const 1
    i32.shl
    local.set $i
    br $10$
    end $10$
    end $11$
    end
    else
    local.get $hy
    i32.const 20
    i32.shr_s
    i32.const 1023
    i32.sub
    local.set $iy
    end
    local.get $ix
    i32.const -1022
    i32.ge_s
    if
    i32.const 1048576
    i32.const 1048575
    local.get $hx
    i32.and
    i32.or
    local.set $hx
    else
    i32.const -1022
    local.get $ix
    i32.sub
    local.tee $n
    i32.const 31
    i32.le_s
    if
    local.get $hx
    local.get $n
    i32.shl
    local.get $lx
    i32.const 32
    local.get $n
    i32.sub
    i32.shr_u
    i32.or
    local.set $hx
    local.get $lx
    local.get $n
    i32.shl
    local.set $lx
    else
    local.get $lx
    local.get $n
    i32.const 32
    i32.sub
    i32.shl
    local.set $hx
    i32.const 0
    local.set $lx
    end
    end
    local.get $iy
    i32.const -1022
    i32.ge_s
    if
    i32.const 1048576
    i32.const 1048575
    local.get $hy
    i32.and
    i32.or
    local.set $hy
    else
    i32.const -1022
    local.get $iy
    i32.sub
    local.tee $n
    i32.const 31
    i32.le_s
    if
    local.get $hy
    local.get $n
    i32.shl
    local.get $ly
    i32.const 32
    local.get $n
    i32.sub
    i32.shr_u
    i32.or
    local.set $hy
    local.get $ly
    local.get $n
    i32.shl
    local.set $ly
    else
    local.get $ly
    local.get $n
    i32.const 32
    i32.sub
    i32.shl
    local.set $hy
    i32.const 0
    local.set $ly
    end
    end
    local.get $ix
    local.get $iy
    i32.sub
    local.set $n
    block $13$
    loop $14$
    local.get $n
    local.get $n
    i32.const 1
    i32.sub
    local.set $n
    if
    local.get $hx
    local.get $hy
    i32.sub
    local.set $hz
    local.get $lx
    local.get $ly
    i32.sub
    local.set $lz
    local.get $lx
    local.get $ly
    i32.lt_u
    if
    local.get $hz
    i32.const 1
    i32.sub
    local.set $hz
    end
    local.get $hz
    i32.const 0
    i32.lt_s
    if
    local.get $hx
    local.get $hx
    i32.add
    local.get $lx
    i32.const 31
    i32.shr_u
    i32.add
    local.set $hx
    local.get $lx
    local.get $lx
    i32.add
    local.set $lx
    else
    local.get $hz
    local.get $lz
    i32.or
    i32.const 0
    i32.eq
    if
    ref.data $math:Zero
    local.get $sx
    i32.const 31
    i32.shr_u
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    return
    end
    local.get $hz
    local.get $hz
    i32.add
    local.get $lz
    i32.const 31
    i32.shr_u
    i32.add
    local.set $hx
    local.get $lz
    local.get $lz
    i32.add
    local.set $lx
    end
    br $14$
    end
    end $14$
    end $13$
    local.get $hx
    local.get $hy
    i32.sub
    local.set $hz
    local.get $lx
    local.get $ly
    i32.sub
    local.set $lz
    local.get $lx
    local.get $ly
    i32.lt_u
    if
    local.get $hz
    i32.const 1
    i32.sub
    local.set $hz
    end
    local.get $hz
    i32.const 0
    i32.ge_s
    if
    local.get $hz
    local.set $hx
    local.get $lz
    local.set $lx
    end
    local.get $hx
    local.get $lx
    i32.or
    i32.const 0
    i32.eq
    if
    ref.data $math:Zero
    local.get $sx
    i32.const 31
    i32.shr_u
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    return
    end
    block $15$
    loop $16$
    local.get $hx
    i32.const 1048576
    i32.lt_s
    if
    local.get $hx
    local.get $hx
    i32.add
    local.get $lx
    i32.const 31
    i32.shr_u
    i32.add
    local.set $hx
    local.get $lx
    local.get $lx
    i32.add
    local.set $lx
    local.get $iy
    i32.const 1
    i32.sub
    local.set $iy
    br $16$
    end
    end $16$
    end $15$
    local.get $iy
    i32.const -1022
    i32.ge_s
    if
    local.get $hx
    i32.const 1048576
    i32.sub
    local.get $iy
    i32.const 1023
    i32.add
    i32.const 20
    i32.shl
    i32.or
    local.tee $hx
    local.get $sx
    i32.or
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    local.get $lx
    i64.extend_i32_u
    i64.const 4294967295
    i64.and
    i64.or
    f64.reinterpret_i64
    local.set $x
    else
    i32.const -1022
    local.get $iy
    i32.sub
    local.tee $n
    i32.const 20
    i32.le_s
    if
    local.get $lx
    local.get $n
    i32.shr_u
    local.get $hx
    i32.const 32
    local.get $n
    i32.sub
    i32.shl
    i32.or
    local.set $lx
    local.get $hx
    local.get $n
    i32.shr_s
    local.set $hx
    else
    local.get $n
    i32.const 31
    i32.le_s
    if
    local.get $hx
    i32.const 32
    local.get $n
    i32.sub
    i32.shl
    local.get $lx
    local.get $n
    i32.shr_u
    i32.or
    local.set $lx
    local.get $sx
    local.set $hx
    else
    local.get $hx
    local.get $n
    i32.const 32
    i32.sub
    i32.shr_s
    local.set $lx
    local.get $sx
    local.set $hx
    end
    end
    local.get $hx
    local.get $sx
    i32.or
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    local.get $lx
    i64.extend_i32_u
    i64.const 4294967295
    i64.and
    i64.or
    f64.reinterpret_i64
    local.tee $x
    global.get $math:one
    f64.mul
    local.set $x
    end
    local.get $x
    return
  )
  (func $math:__ieee754_sqrt
    (param $x f64) (result f64) 
    (local $z f64) (local $sign i32) (local $r i32) (local $t1 i32) (local $s1 i32) (local $ix1 i32) (local $q1 i32) (local $ix0 i32) (local $s0 i32) (local $q i32) (local $m i32) (local $t i32) (local $i i32) (local $__t i64) 
    i32.const -2147483648
    local.set $sign
    local.get $x
    i64.reinterpret_f64
    local.tee $__t
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $ix0
    local.get $__t
    i32.wrap_i64
    local.set $ix1
    local.get $ix0
    i32.const 2146435072
    i32.and
    i32.const 2146435072
    i32.eq
    if
    local.get $x
    local.get $x
    f64.mul
    local.get $x
    f64.add
    return
    end
    local.get $ix0
    i32.const 0
    i32.le_s
    if
    local.get $ix0
    i32.const -1
    local.get $sign
    i32.xor
    i32.and
    local.get $ix1
    i32.or
    i32.const 0
    i32.eq
    if
    local.get $x
    return
    else
    local.get $ix0
    i32.const 0
    i32.lt_s
    if
    local.get $x
    local.get $x
    f64.sub
    local.get $x
    local.get $x
    f64.sub
    f64.div
    return
    end
    end
    end
    local.get $ix0
    i32.const 20
    i32.shr_s
    local.tee $m
    i32.const 0
    i32.eq
    if
    block $1$
    loop $2$
    local.get $ix0
    i32.const 0
    i32.eq
    if
    local.get $m
    i32.const 21
    i32.sub
    local.set $m
    local.get $ix0
    local.get $ix1
    i32.const 11
    i32.shr_u
    i32.or
    local.set $ix0
    local.get $ix1
    i32.const 21
    i32.shl
    local.set $ix1
    br $2$
    end
    end $2$
    end $1$
    block $4$
    i32.const 0
    local.set $i
    loop $3$
    local.get $ix0
    i32.const 1048576
    i32.and
    i32.const 0
    i32.eq
    i32.eqz
    br_if $4$
    block $5$
    local.get $ix0
    i32.const 1
    i32.shl
    local.set $ix0
    end $5$
    local.get $i
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    drop
    br $3$
    end $3$
    end $4$
    local.get $m
    local.get $i
    i32.const 1
    i32.sub
    i32.sub
    local.set $m
    local.get $ix0
    local.get $ix1
    i32.const 32
    local.get $i
    i32.sub
    i32.shr_u
    i32.or
    local.set $ix0
    local.get $ix1
    local.get $i
    i32.shl
    local.set $ix1
    end
    local.get $m
    i32.const 1023
    i32.sub
    local.set $m
    local.get $ix0
    i32.const 1048575
    i32.and
    i32.const 1048576
    i32.or
    local.set $ix0
    local.get $m
    i32.const 1
    i32.and
    if
    local.get $ix0
    local.get $ix0
    local.get $ix1
    local.get $sign
    i32.and
    i32.const 31
    i32.shr_u
    i32.add
    i32.add
    local.set $ix0
    local.get $ix1
    local.get $ix1
    i32.add
    local.set $ix1
    end
    local.get $m
    i32.const 1
    i32.shr_s
    local.set $m
    local.get $ix0
    local.get $ix0
    local.get $ix1
    local.get $sign
    i32.and
    i32.const 31
    i32.shr_u
    i32.add
    i32.add
    local.set $ix0
    local.get $ix1
    local.get $ix1
    i32.add
    local.set $ix1
    i32.const 0
    local.tee $s0
    local.set $q
    i32.const 0
    local.tee $s1
    local.set $q1
    i32.const 2097152
    local.set $r
    block $6$
    loop $7$
    local.get $r
    i32.const 0
    i32.ne
    if
    local.get $s0
    local.get $r
    i32.add
    local.tee $t
    local.get $ix0
    i32.le_s
    if
    local.get $t
    local.get $r
    i32.add
    local.set $s0
    local.get $ix0
    local.get $t
    i32.sub
    local.set $ix0
    local.get $q
    local.get $r
    i32.add
    local.set $q
    end
    local.get $ix0
    local.get $ix0
    local.get $ix1
    local.get $sign
    i32.and
    i32.const 31
    i32.shr_u
    i32.add
    i32.add
    local.set $ix0
    local.get $ix1
    local.get $ix1
    i32.add
    local.set $ix1
    local.get $r
    i32.const 1
    i32.shr_u
    local.set $r
    br $7$
    end
    end $7$
    end $6$
    local.get $sign
    local.set $r
    block $8$
    loop $9$
    local.get $r
    i32.const 0
    i32.ne
    if
    local.get $s1
    local.get $r
    i32.add
    local.set $t1
    local.get $s0
    local.tee $t
    local.get $ix0
    i32.lt_s
    if (result i32)
    i32.const 1
    else
    local.get $t
    local.get $ix0
    i32.eq
    if (result i32)
    local.get $t1
    local.get $ix1
    i32.le_u
    else
    i32.const 0
    end
    end
    if
    local.get $t1
    local.get $r
    i32.add
    local.set $s1
    local.get $t1
    local.get $sign
    i32.and
    local.get $sign
    i32.eq
    if (result i32)
    local.get $s1
    local.get $sign
    i32.and
    i32.const 0
    i32.eq
    else
    i32.const 0
    end
    if
    local.get $s0
    i32.const 1
    i32.add
    local.set $s0
    end
    local.get $ix0
    local.get $t
    i32.sub
    local.set $ix0
    local.get $ix1
    local.get $t1
    i32.lt_u
    if
    local.get $ix0
    i32.const 1
    i32.sub
    local.set $ix0
    end
    local.get $ix1
    local.get $t1
    i32.sub
    local.set $ix1
    local.get $q1
    local.get $r
    i32.add
    local.set $q1
    end
    local.get $ix0
    local.get $ix0
    local.get $ix1
    local.get $sign
    i32.and
    i32.const 31
    i32.shr_u
    i32.add
    i32.add
    local.set $ix0
    local.get $ix1
    local.get $ix1
    i32.add
    local.set $ix1
    local.get $r
    i32.const 1
    i32.shr_u
    local.set $r
    br $9$
    end
    end $9$
    end $8$
    local.get $ix0
    local.get $ix1
    i32.or
    i32.const 0
    i32.ne
    if
    global.get $math:one
    f64.const 1e-300
    f64.sub
    local.tee $z
    global.get $math:one
    f64.ge
    if
    global.get $math:one
    f64.const 1e-300
    f64.add
    local.set $z
    local.get $q1
    i32.const -1
    i32.eq
    if
    i32.const 0
    local.set $q1
    local.get $q
    i32.const 1
    i32.add
    local.set $q
    else
    local.get $z
    global.get $math:one
    f64.gt
    if
    local.get $q1
    i32.const -2
    i32.eq
    if
    local.get $q
    i32.const 1
    i32.add
    local.set $q
    end
    local.get $q1
    i32.const 2
    i32.add
    local.set $q1
    else
    local.get $q1
    local.get $q1
    i32.const 1
    i32.and
    i32.add
    local.set $q1
    end
    end
    end
    end
    local.get $q
    i32.const 1
    i32.shr_s
    i32.const 1071644672
    i32.add
    local.set $ix0
    local.get $q1
    i32.const 1
    i32.shr_u
    local.set $ix1
    local.get $q
    i32.const 1
    i32.and
    i32.const 1
    i32.eq
    if
    local.get $ix1
    local.get $sign
    i32.or
    local.set $ix1
    end
    local.get $ix0
    local.get $m
    i32.const 20
    i32.shl
    i32.add
    local.tee $ix0
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    local.get $ix1
    i64.extend_i32_u
    i64.const 4294967295
    i64.and
    i64.or
    f64.reinterpret_i64
    local.tee $z
    return
  )
  (func $math:__ieee754_pow
    (param $x f64) (param $y f64) (result f64) 
    (local $z_h f64) (local $z_l f64) (local $p_l f64) (local $t2 f64) (local $r f64) (local $s f64) (local $u f64) (local $v f64) (local $w f64) (local $i i32) (local $j i32) (local $k i32) (local $yisint i32) (local $n i32) (local $hx i32) (local $hy i32) (local $ix i32) (local $iy i32) (local $lx i32) (local $ly i32) (local $__t i64) (local $__t#27 i64) (local $__p i32) (local $__t#29 i64) (local $s2 f64) (local $s_l f64) (local $t_l f64) (local $__p#35 i32) (local $__t#36 i64) (local $__p#37 i32) (local $__t#38 i64) (local $__p#39 i32) (local $__t#40 i64) (local $__p#41 i32) (local $__t#42 i64) (local $__p#43 i32) (local $__t#44 i64) (local $__p#45 i32) (local $__t#46 i64) (local $__p#47 i32) (local $__t#48 i64) (local $__t#49 i64) (local $__p#50 i32) (local $__t#51 i64) (local $__p#52 i32) (local $__t#53 i64) (local $__p#54 i32) (local $__t#55 i64) (local $bp$ i32) (local $fp$ i32) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) (local $i4$ i32) (local $i5$ i32) (local $i6$ i32) (local $i7$ i32) (local $i8$ i32) (local $i9$ i32) (local $i10$ i32) (local $i11$ i32) (local $i12$ i32) (local $i13$ i32) (local $i14$ i32) (local $i15$ i32) (local $i16$ i32) (local $i17$ i32) (local $i18$ i32) (local $i19$ i32) (local $i20$ i32) (local $i21$ i32) (local $i22$ i32) (local $i23$ i32) (local $i24$ i32) (local $i25$ i32) (local $i26$ i32) (local $i27$ i32) (local $i28$ i32) (local $i29$ i32) (local $i30$ i32) (local $i31$ i32) (local $i32$ i32) (local $i33$ i32) (local $i34$ i32) (local $i35$ i32) (local $i36$ i32) 
    global.get $env:__stack_pointer
    local.set $bp$
    global.get $env:__stack_pointer
    i32.const 64
    i32.sub
    global.set $env:__stack_pointer
    global.get $env:__stack_pointer
    local.set $fp$
    local.get $x
    i64.reinterpret_f64
    local.tee $__t
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $hx
    local.get $__t
    i32.wrap_i64
    local.set $lx
    local.get $y
    i64.reinterpret_f64
    local.tee $__t#27
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $hy
    local.get $__t#27
    i32.wrap_i64
    local.set $ly
    local.get $hx
    i32.const 2147483647
    i32.and
    local.set $ix
    local.get $hy
    i32.const 2147483647
    i32.and
    local.tee $iy
    local.get $ly
    i32.or
    i32.const 0
    i32.eq
    if
    local.get $x
    call $math:issignaling
    if
    f64.const +nan
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    global.get $math:one
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $ix
    i32.const 2146435072
    i32.gt_s
    if (result i32)
    i32.const 1
    else
    local.get $ix
    i32.const 2146435072
    i32.eq
    if (result i32)
    local.get $lx
    i32.const 0
    i32.ne
    else
    i32.const 0
    end
    end
    if (result i32)
    i32.const 1
    else
    local.get $iy
    i32.const 2146435072
    i32.gt_s
    end
    if (result i32)
    i32.const 1
    else
    local.get $iy
    i32.const 2146435072
    i32.eq
    if (result i32)
    local.get $ly
    i32.const 0
    i32.ne
    else
    i32.const 0
    end
    end
    if
    local.get $ix
    i32.const 1072693248
    i32.sub
    local.get $lx
    i32.or
    i32.const 0
    i32.eq
    if (result i32)
    local.get $hx
    i32.const -2147483648
    i32.and
    i32.eqz
    else
    i32.const 0
    end
    if
    global.get $math:one
    local.get $bp$
    global.set $env:__stack_pointer
    return
    else
    f64.const +nan
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    end
    i32.const 0
    local.set $yisint
    local.get $hx
    i32.const 0
    i32.lt_s
    if
    local.get $iy
    i32.const 1128267776
    i32.ge_s
    if
    i32.const 2
    local.set $yisint
    else
    local.get $iy
    i32.const 1072693248
    i32.ge_s
    if
    local.get $iy
    i32.const 20
    i32.shr_s
    i32.const 1023
    i32.sub
    local.tee $k
    i32.const 20
    i32.gt_s
    if
    local.get $ly
    i32.const 52
    local.get $k
    i32.sub
    i32.shr_u
    local.tee $j
    i32.const 52
    local.get $k
    i32.sub
    i32.shl
    local.get $ly
    i32.eq
    if
    i32.const 2
    local.get $j
    i32.const 1
    i32.and
    i32.sub
    local.set $yisint
    end
    else
    local.get $ly
    i32.const 0
    i32.eq
    if
    local.get $iy
    i32.const 20
    local.get $k
    i32.sub
    i32.shr_s
    local.tee $j
    i32.const 20
    local.get $k
    i32.sub
    i32.shl
    local.get $iy
    i32.eq
    if
    i32.const 2
    local.get $j
    i32.const 1
    i32.and
    i32.sub
    local.set $yisint
    end
    end
    end
    end
    end
    end
    local.get $ly
    i32.const 0
    i32.eq
    if
    local.get $iy
    i32.const 2146435072
    i32.eq
    if
    local.get $ix
    i32.const 1072693248
    i32.sub
    local.get $lx
    i32.or
    i32.const 0
    i32.eq
    if
    global.get $math:one
    local.get $bp$
    global.set $env:__stack_pointer
    return
    else
    local.get $ix
    i32.const 1072693248
    i32.ge_s
    if
    local.get $y
    global.get $math:zero
    local.get $hy
    i32.const 0
    i32.ge_s
    select
    local.get $bp$
    global.set $env:__stack_pointer
    return
    else
    local.get $hy
    i32.const 0
    i32.lt_s
    if (result f64)
    local.get $y
    f64.neg
    else
    global.get $math:zero
    end
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    end
    end
    local.get $iy
    i32.const 1072693248
    i32.eq
    if
    local.get $hy
    i32.const 0
    i32.lt_s
    if
    global.get $math:one
    local.get $x
    f64.div
    local.get $bp$
    global.set $env:__stack_pointer
    return
    else
    local.get $x
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    end
    local.get $hy
    i32.const 1073741824
    i32.eq
    if
    local.get $x
    local.get $x
    f64.mul
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $hy
    i32.const 1071644672
    i32.eq
    if
    local.get $hx
    i32.const 0
    i32.ge_s
    if
    local.get $x
    call $math:__ieee754_sqrt
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    end
    end
    local.get $fp$
    i32.const 8
    i32.add
    local.tee $i1$
    local.get $x
    i64.reinterpret_f64
    i64.const 9223372036854775807
    i64.and
    f64.reinterpret_i64
    f64.store offset=0 align=8
    local.get $lx
    i32.const 0
    i32.eq
    if
    local.get $ix
    i32.const 2146435072
    i32.eq
    if (result i32)
    i32.const 1
    else
    local.get $ix
    i32.const 0
    i32.eq
    end
    if (result i32)
    i32.const 1
    else
    local.get $ix
    i32.const 1072693248
    i32.eq
    end
    if
    local.get $fp$
    local.tee $i2$
    local.get $fp$
    f64.load offset=8 align=8
    f64.store offset=0 align=8
    local.get $hy
    i32.const 0
    i32.lt_s
    if
    local.get $fp$
    local.tee $i3$
    global.get $math:one
    local.get $fp$
    f64.load offset=0 align=8
    f64.div
    f64.store offset=0 align=8
    end
    local.get $hx
    i32.const 0
    i32.lt_s
    if
    local.get $ix
    i32.const 1072693248
    i32.sub
    local.get $yisint
    i32.or
    i32.const 0
    i32.eq
    if
    local.get $fp$
    local.tee $i4$
    local.get $fp$
    f64.load offset=0 align=8
    local.get $fp$
    f64.load offset=0 align=8
    f64.sub
    local.get $fp$
    f64.load offset=0 align=8
    local.get $fp$
    f64.load offset=0 align=8
    f64.sub
    f64.div
    f64.store offset=0 align=8
    else
    local.get $yisint
    i32.const 1
    i32.eq
    if
    local.get $fp$
    local.tee $i5$
    local.get $fp$
    f64.load offset=0 align=8
    f64.neg
    f64.store offset=0 align=8
    end
    end
    end
    local.get $fp$
    f64.load offset=0 align=8
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    end
    local.get $hx
    i32.const 31
    i32.shr_u
    i32.const 1
    i32.sub
    local.get $yisint
    i32.or
    i32.const 0
    i32.eq
    if
    local.get $x
    local.get $x
    f64.sub
    local.get $x
    local.get $x
    f64.sub
    f64.div
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $iy
    i32.const 1105199104
    i32.gt_s
    if
    local.get $iy
    i32.const 1139802112
    i32.gt_s
    if
    local.get $ix
    i32.const 1072693247
    i32.le_s
    if
    local.get $hy
    i32.const 0
    i32.lt_s
    if
    i32.const 0
    call $fenv:feraiseexcept
    f64.const +inf
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    i32.const 0
    call $fenv:feraiseexcept
    i32.const 0
    f64.convert_i32_s
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $ix
    i32.const 1072693248
    i32.ge_s
    if
    local.get $hy
    i32.const 0
    i32.gt_s
    if
    i32.const 0
    call $fenv:feraiseexcept
    f64.const +inf
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    i32.const 0
    call $fenv:feraiseexcept
    i32.const 0
    f64.convert_i32_s
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    end
    local.get $ix
    i32.const 1072693247
    i32.lt_s
    if
    local.get $hy
    i32.const 0
    i32.lt_s
    if
    i32.const 0
    call $fenv:feraiseexcept
    f64.const +inf
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    i32.const 0
    call $fenv:feraiseexcept
    i32.const 0
    f64.convert_i32_s
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $ix
    i32.const 1072693248
    i32.gt_s
    if
    local.get $hy
    i32.const 0
    i32.gt_s
    if
    i32.const 0
    call $fenv:feraiseexcept
    f64.const +inf
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    i32.const 0
    call $fenv:feraiseexcept
    i32.const 0
    f64.convert_i32_s
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $fp$
    i32.const 40
    i32.add
    local.tee $i6$
    local.get $fp$
    f64.load offset=8 align=8
    i32.const 1
    f64.convert_i32_s
    f64.sub
    f64.store offset=0 align=8
    local.get $fp$
    f64.load offset=40 align=8
    local.get $fp$
    f64.load offset=40 align=8
    f64.mul
    f64.const 0.5
    local.get $fp$
    f64.load offset=40 align=8
    f64.const 0.33333333333333331
    local.get $fp$
    f64.load offset=40 align=8
    f64.const 0.25
    f64.mul
    f64.sub
    f64.mul
    f64.sub
    f64.mul
    local.set $w
    global.get $math:ivln2_h
    local.get $fp$
    f64.load offset=40 align=8
    f64.mul
    local.set $u
    local.get $fp$
    f64.load offset=40 align=8
    global.get $math:ivln2_l
    f64.mul
    local.get $w
    global.get $math:ivln2
    f64.mul
    f64.sub
    local.set $v
    local.get $fp$
    i32.const 32
    i32.add
    local.tee $i7$
    local.get $u
    local.get $v
    f64.add
    f64.store offset=0 align=8
    local.get $fp$
    i32.const 32
    i32.add
    local.tee $__p
    f64.load offset=0 align=8
    i64.reinterpret_f64
    i64.const -4294967296
    i64.and
    i64.const 0
    i64.or
    local.set $__t#29
    local.get $__p
    local.tee $i8$
    local.get $__t#29
    f64.reinterpret_i64
    f64.store offset=0 align=8
    local.get $v
    local.get $fp$
    f64.load offset=32 align=8
    local.get $u
    f64.sub
    f64.sub
    local.set $t2
    else
    i32.const 0
    local.set $n
    local.get $ix
    i32.const 1048576
    i32.lt_s
    if
    local.get $fp$
    i32.const 8
    i32.add
    local.tee $i9$
    local.get $i9$
    f64.load offset=0 align=8
    global.get $math:two53
    f64.mul
    f64.store offset=0 align=8
    local.get $n
    i32.const 53
    i32.sub
    local.set $n
    local.get $fp$
    f64.load offset=8 align=8
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $ix
    end
    local.get $n
    local.get $ix
    i32.const 20
    i32.shr_s
    i32.const 1023
    i32.sub
    i32.add
    local.set $n
    local.get $ix
    i32.const 1048575
    i32.and
    local.tee $j
    i32.const 1072693248
    i32.or
    local.set $ix
    local.get $j
    i32.const 235662
    i32.le_s
    if
    i32.const 0
    local.set $k
    else
    local.get $j
    i32.const 767610
    i32.lt_s
    if
    i32.const 1
    local.set $k
    else
    i32.const 0
    local.set $k
    local.get $n
    i32.const 1
    i32.add
    local.set $n
    local.get $ix
    i32.const 1048576
    i32.sub
    local.set $ix
    end
    end
    local.get $fp$
    i32.const 8
    i32.add
    local.tee $__p#35
    f64.load offset=0 align=8
    i64.reinterpret_f64
    i64.const 4294967295
    i64.and
    local.get $ix
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.or
    local.set $__t#36
    local.get $__p#35
    local.tee $i10$
    local.get $__t#36
    f64.reinterpret_i64
    f64.store offset=0 align=8
    local.get $fp$
    f64.load offset=8 align=8
    ref.data $math:bp
    local.get $k
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    f64.sub
    local.set $u
    global.get $math:one
    local.get $fp$
    f64.load offset=8 align=8
    ref.data $math:bp
    local.get $k
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    f64.add
    f64.div
    local.set $v
    local.get $u
    local.get $v
    f64.mul
    local.set $s
    local.get $fp$
    i32.const 48
    i32.add
    local.tee $i11$
    local.get $s
    f64.store offset=0 align=8
    local.get $fp$
    i32.const 48
    i32.add
    local.tee $__p#37
    f64.load offset=0 align=8
    i64.reinterpret_f64
    i64.const -4294967296
    i64.and
    i64.const 0
    i64.or
    local.set $__t#38
    local.get $__p#37
    local.tee $i12$
    local.get $__t#38
    f64.reinterpret_i64
    f64.store offset=0 align=8
    local.get $fp$
    i32.const 56
    i32.add
    local.tee $i13$
    global.get $math:zero
    f64.store offset=0 align=8
    local.get $fp$
    i32.const 56
    i32.add
    local.tee $__p#39
    f64.load offset=0 align=8
    i64.reinterpret_f64
    i64.const 4294967295
    i64.and
    local.get $ix
    i32.const 1
    i32.shr_s
    i32.const 536870912
    i32.or
    i32.const 524288
    i32.add
    local.get $k
    i32.const 18
    i32.shl
    i32.add
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.or
    local.set $__t#40
    local.get $__p#39
    local.tee $i14$
    local.get $__t#40
    f64.reinterpret_i64
    f64.store offset=0 align=8
    local.get $fp$
    f64.load offset=8 align=8
    local.get $fp$
    f64.load offset=56 align=8
    ref.data $math:bp
    local.get $k
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    f64.sub
    f64.sub
    local.set $t_l
    local.get $v
    local.get $u
    local.get $fp$
    f64.load offset=48 align=8
    local.get $fp$
    f64.load offset=56 align=8
    f64.mul
    f64.sub
    local.get $fp$
    f64.load offset=48 align=8
    local.get $t_l
    f64.mul
    f64.sub
    f64.mul
    local.set $s_l
    local.get $s
    local.get $s
    f64.mul
    local.tee $s2
    local.get $s2
    f64.mul
    global.get $math:L1
    local.get $s2
    global.get $math:L2
    local.get $s2
    global.get $math:L3
    local.get $s2
    global.get $math:L4
    local.get $s2
    global.get $math:L5
    local.get $s2
    global.get $math:L6
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    local.tee $r
    local.get $s_l
    local.get $fp$
    f64.load offset=48 align=8
    local.get $s
    f64.add
    f64.mul
    f64.add
    local.set $r
    local.get $fp$
    f64.load offset=48 align=8
    local.get $fp$
    f64.load offset=48 align=8
    f64.mul
    local.set $s2
    local.get $fp$
    i32.const 56
    i32.add
    local.tee $i15$
    f64.const 3
    local.get $s2
    f64.add
    local.get $r
    f64.add
    f64.store offset=0 align=8
    local.get $fp$
    i32.const 56
    i32.add
    local.tee $__p#41
    f64.load offset=0 align=8
    i64.reinterpret_f64
    i64.const -4294967296
    i64.and
    i64.const 0
    i64.or
    local.set $__t#42
    local.get $__p#41
    local.tee $i16$
    local.get $__t#42
    f64.reinterpret_i64
    f64.store offset=0 align=8
    local.get $r
    local.get $fp$
    f64.load offset=56 align=8
    f64.const 3
    f64.sub
    local.get $s2
    f64.sub
    f64.sub
    local.set $t_l
    local.get $fp$
    f64.load offset=48 align=8
    local.get $fp$
    f64.load offset=56 align=8
    f64.mul
    local.set $u
    local.get $s_l
    local.get $fp$
    f64.load offset=56 align=8
    f64.mul
    local.get $t_l
    local.get $s
    f64.mul
    f64.add
    local.set $v
    local.get $fp$
    i32.const 16
    i32.add
    local.tee $i17$
    local.get $u
    local.get $v
    f64.add
    f64.store offset=0 align=8
    local.get $fp$
    i32.const 16
    i32.add
    local.tee $__p#43
    f64.load offset=0 align=8
    i64.reinterpret_f64
    i64.const -4294967296
    i64.and
    i64.const 0
    i64.or
    local.set $__t#44
    local.get $__p#43
    local.tee $i18$
    local.get $__t#44
    f64.reinterpret_i64
    f64.store offset=0 align=8
    local.get $v
    local.get $fp$
    f64.load offset=16 align=8
    local.get $u
    f64.sub
    f64.sub
    local.set $p_l
    global.get $math:cp_h
    local.get $fp$
    f64.load offset=16 align=8
    f64.mul
    local.set $z_h
    global.get $math:cp_l
    local.get $fp$
    f64.load offset=16 align=8
    f64.mul
    local.get $p_l
    global.get $math:cp
    f64.mul
    f64.add
    ref.data $math:dp_l
    local.get $k
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    f64.add
    local.set $z_l
    local.get $fp$
    i32.const 40
    i32.add
    local.tee $i19$
    local.get $n
    f64.convert_i32_s
    f64.store offset=0 align=8
    local.get $fp$
    i32.const 32
    i32.add
    local.tee $i20$
    local.get $z_h
    local.get $z_l
    f64.add
    ref.data $math:dp_h
    local.get $k
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    f64.add
    local.get $fp$
    f64.load offset=40 align=8
    f64.add
    f64.store offset=0 align=8
    local.get $fp$
    i32.const 32
    i32.add
    local.tee $__p#45
    f64.load offset=0 align=8
    i64.reinterpret_f64
    i64.const -4294967296
    i64.and
    i64.const 0
    i64.or
    local.set $__t#46
    local.get $__p#45
    local.tee $i21$
    local.get $__t#46
    f64.reinterpret_i64
    f64.store offset=0 align=8
    local.get $z_l
    local.get $fp$
    f64.load offset=32 align=8
    local.get $fp$
    f64.load offset=40 align=8
    f64.sub
    ref.data $math:dp_h
    local.get $k
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    f64.sub
    local.get $z_h
    f64.sub
    f64.sub
    local.set $t2
    end
    global.get $math:one
    local.set $s
    local.get $hx
    i32.const 31
    i32.shr_u
    i32.const 1
    i32.sub
    local.get $yisint
    i32.const 1
    i32.sub
    i32.or
    i32.const 0
    i32.eq
    if
    global.get $math:one
    f64.neg
    local.set $s
    end
    local.get $fp$
    i32.const 24
    i32.add
    local.tee $i22$
    local.get $y
    f64.store offset=0 align=8
    local.get $fp$
    i32.const 24
    i32.add
    local.tee $__p#47
    f64.load offset=0 align=8
    i64.reinterpret_f64
    i64.const -4294967296
    i64.and
    i64.const 0
    i64.or
    local.set $__t#48
    local.get $__p#47
    local.tee $i23$
    local.get $__t#48
    f64.reinterpret_i64
    f64.store offset=0 align=8
    local.get $y
    local.get $fp$
    f64.load offset=24 align=8
    f64.sub
    local.get $fp$
    f64.load offset=32 align=8
    f64.mul
    local.get $y
    local.get $t2
    f64.mul
    f64.add
    local.set $p_l
    local.get $fp$
    i32.const 16
    i32.add
    local.tee $i24$
    local.get $fp$
    f64.load offset=24 align=8
    local.get $fp$
    f64.load offset=32 align=8
    f64.mul
    f64.store offset=0 align=8
    local.get $fp$
    local.tee $i25$
    local.get $p_l
    local.get $fp$
    f64.load offset=16 align=8
    f64.add
    f64.store offset=0 align=8
    local.get $fp$
    f64.load offset=0 align=8
    i64.reinterpret_f64
    local.tee $__t#49
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $j
    local.get $__t#49
    i32.wrap_i64
    local.set $i
    local.get $j
    i32.const 1083179008
    i32.ge_s
    if
    local.get $j
    i32.const 1083179008
    i32.sub
    local.get $i
    i32.or
    i32.const 0
    i32.ne
    if
    i32.const 0
    call $fenv:feraiseexcept
    i64.const 9218868437227405312
    local.get $s
    i64.reinterpret_f64
    i64.const -9223372036854775808
    i64.and
    i64.or
    f64.reinterpret_i64
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $p_l
    global.get $math:ovt
    f64.add
    local.get $fp$
    f64.load offset=0 align=8
    local.get $fp$
    f64.load offset=16 align=8
    f64.sub
    f64.gt
    if
    i32.const 0
    call $fenv:feraiseexcept
    i64.const 9218868437227405312
    local.get $s
    i64.reinterpret_f64
    i64.const -9223372036854775808
    i64.and
    i64.or
    f64.reinterpret_i64
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    else
    local.get $j
    i32.const 2147483647
    i32.and
    i32.const 1083231232
    i32.ge_s
    if
    local.get $j
    i32.const -1064252416
    i32.sub
    local.get $i
    i32.or
    i32.const 0
    i32.ne
    if
    i32.const 0
    call $fenv:feraiseexcept
    i64.const 0
    local.get $s
    i64.reinterpret_f64
    i64.const -9223372036854775808
    i64.and
    i64.or
    f64.reinterpret_i64
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $p_l
    local.get $fp$
    f64.load offset=0 align=8
    local.get $fp$
    f64.load offset=16 align=8
    f64.sub
    f64.le
    if
    i32.const 0
    call $fenv:feraiseexcept
    i64.const 0
    local.get $s
    i64.reinterpret_f64
    i64.const -9223372036854775808
    i64.and
    i64.or
    f64.reinterpret_i64
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    end
    end
    local.get $j
    i32.const 2147483647
    i32.and
    local.tee $i
    i32.const 20
    i32.shr_s
    i32.const 1023
    i32.sub
    local.set $k
    i32.const 0
    local.set $n
    local.get $i
    i32.const 1071644672
    i32.gt_s
    if
    local.get $j
    i32.const 1048576
    local.get $k
    i32.const 1
    i32.add
    i32.shr_s
    i32.add
    local.tee $n
    i32.const 2147483647
    i32.and
    i32.const 20
    i32.shr_s
    i32.const 1023
    i32.sub
    local.set $k
    local.get $fp$
    i32.const 40
    i32.add
    local.tee $i26$
    global.get $math:zero
    f64.store offset=0 align=8
    local.get $fp$
    i32.const 40
    i32.add
    local.tee $__p#50
    f64.load offset=0 align=8
    i64.reinterpret_f64
    i64.const 4294967295
    i64.and
    local.get $n
    i32.const -1
    i32.const 1048575
    local.get $k
    i32.shr_u
    i32.xor
    i32.and
    i64.extend_i32_u
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.or
    local.set $__t#51
    local.get $__p#50
    local.tee $i27$
    local.get $__t#51
    f64.reinterpret_i64
    f64.store offset=0 align=8
    local.get $n
    i32.const 1048575
    i32.and
    i32.const 1048576
    i32.or
    i32.const 20
    local.get $k
    i32.sub
    i32.shr_s
    local.set $n
    local.get $j
    i32.const 0
    i32.lt_s
    if
    i32.const 0
    local.get $n
    i32.sub
    local.set $n
    end
    local.get $fp$
    i32.const 16
    i32.add
    local.tee $i28$
    local.get $i28$
    f64.load offset=0 align=8
    local.get $fp$
    f64.load offset=40 align=8
    f64.sub
    f64.store offset=0 align=8
    end
    local.get $fp$
    i32.const 40
    i32.add
    local.tee $i29$
    local.get $p_l
    local.get $fp$
    f64.load offset=16 align=8
    f64.add
    f64.store offset=0 align=8
    local.get $fp$
    i32.const 40
    i32.add
    local.tee $__p#52
    f64.load offset=0 align=8
    i64.reinterpret_f64
    i64.const -4294967296
    i64.and
    i64.const 0
    i64.or
    local.set $__t#53
    local.get $__p#52
    local.tee $i30$
    local.get $__t#53
    f64.reinterpret_i64
    f64.store offset=0 align=8
    local.get $fp$
    f64.load offset=40 align=8
    global.get $math:lg2_h
    f64.mul
    local.set $u
    local.get $p_l
    local.get $fp$
    f64.load offset=40 align=8
    local.get $fp$
    f64.load offset=16 align=8
    f64.sub
    f64.sub
    global.get $math:lg2
    f64.mul
    local.get $fp$
    f64.load offset=40 align=8
    global.get $math:lg2_l
    f64.mul
    f64.add
    local.set $v
    local.get $fp$
    local.tee $i31$
    local.get $u
    local.get $v
    f64.add
    f64.store offset=0 align=8
    local.get $v
    local.get $fp$
    f64.load offset=0 align=8
    local.get $u
    f64.sub
    f64.sub
    local.set $w
    local.get $fp$
    i32.const 40
    i32.add
    local.tee $i32$
    local.get $fp$
    f64.load offset=0 align=8
    local.get $fp$
    f64.load offset=0 align=8
    f64.mul
    f64.store offset=0 align=8
    local.get $fp$
    i32.const 32
    i32.add
    local.tee $i33$
    local.get $fp$
    f64.load offset=0 align=8
    local.get $fp$
    f64.load offset=40 align=8
    global.get $math:P1
    local.get $fp$
    f64.load offset=40 align=8
    global.get $math:P2
    local.get $fp$
    f64.load offset=40 align=8
    global.get $math:P3
    local.get $fp$
    f64.load offset=40 align=8
    global.get $math:P4
    local.get $fp$
    f64.load offset=40 align=8
    global.get $math:P5
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.sub
    f64.store offset=0 align=8
    local.get $fp$
    f64.load offset=0 align=8
    local.get $fp$
    f64.load offset=32 align=8
    f64.mul
    local.get $fp$
    f64.load offset=32 align=8
    global.get $math:two
    f64.sub
    f64.div
    local.get $w
    local.get $fp$
    f64.load offset=0 align=8
    local.get $w
    f64.mul
    f64.add
    f64.sub
    local.set $r
    local.get $fp$
    local.tee $i34$
    global.get $math:one
    local.get $r
    local.get $fp$
    f64.load offset=0 align=8
    f64.sub
    f64.sub
    f64.store offset=0 align=8
    local.get $fp$
    f64.load offset=0 align=8
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.tee $j
    local.get $n
    i32.const 20
    i32.shl
    i32.add
    local.tee $j
    i32.const 20
    i32.shr_s
    i32.const 0
    i32.le_s
    if
    local.get $fp$
    local.tee $i35$
    local.get $fp$
    f64.load offset=0 align=8
    local.get $n
    call $math:__ieee754_scalbn
    f64.store offset=0 align=8
    else
    local.get $fp$
    local.tee $__p#54
    f64.load offset=0 align=8
    i64.reinterpret_f64
    i64.const 4294967295
    i64.and
    local.get $j
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.or
    local.set $__t#55
    local.get $__p#54
    local.tee $i36$
    local.get $__t#55
    f64.reinterpret_i64
    f64.store offset=0 align=8
    end
    local.get $s
    local.get $fp$
    f64.load offset=0 align=8
    f64.mul
    local.get $bp$
    global.set $env:__stack_pointer
    return
  )
  (func $math:__ieee754_log
    (param $x# f64) (result f64) 
    (local $hfsq f64) (local $f f64) (local $s f64) (local $z f64) (local $R f64) (local $w f64) (local $t1 f64) (local $t2 f64) (local $dk f64) (local $k i32) (local $hx i32) (local $i i32) (local $j i32) (local $lx i32) (local $__t i64) (local $__p i32) (local $__t#16 i64) (local $bp$ i32) (local $fp$ i32) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) 
    global.get $env:__stack_pointer
    local.set $bp$
    global.get $env:__stack_pointer
    i32.const 16
    i32.sub
    global.set $env:__stack_pointer
    global.get $env:__stack_pointer
    local.tee $fp$
    local.tee $i1$
    local.get $x#
    f64.store offset=0 align=8
    local.get $fp$
    f64.load offset=0 align=8
    i64.reinterpret_f64
    local.tee $__t
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $hx
    local.get $__t
    i32.wrap_i64
    local.set $lx
    i32.const 0
    local.set $k
    local.get $hx
    i32.const 1048576
    i32.lt_s
    if
    local.get $hx
    i32.const 2147483647
    i32.and
    local.get $lx
    i32.or
    i32.const 0
    i32.eq
    if
    f64.const -18014398509481984
    global.get $math:zero
    f64.div
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $hx
    i32.const 0
    i32.lt_s
    if
    local.get $fp$
    f64.load offset=0 align=8
    local.get $fp$
    f64.load offset=0 align=8
    f64.sub
    global.get $math:zero
    f64.div
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $k
    i32.const 54
    i32.sub
    local.set $k
    local.get $fp$
    local.tee $i2$
    local.get $i2$
    f64.load offset=0 align=8
    f64.const 18014398509481984
    f64.mul
    f64.store offset=0 align=8
    local.get $fp$
    f64.load offset=0 align=8
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $hx
    end
    local.get $hx
    i32.const 2146435072
    i32.ge_s
    if
    local.get $fp$
    f64.load offset=0 align=8
    local.get $fp$
    f64.load offset=0 align=8
    f64.add
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $k
    local.get $hx
    i32.const 20
    i32.shr_s
    i32.const 1023
    i32.sub
    i32.add
    local.set $k
    local.get $hx
    i32.const 1048575
    i32.and
    local.tee $hx
    i32.const 614244
    i32.add
    i32.const 1048576
    i32.and
    local.set $i
    local.get $fp$
    local.tee $__p
    f64.load offset=0 align=8
    i64.reinterpret_f64
    i64.const 4294967295
    i64.and
    local.get $hx
    local.get $i
    i32.const 1072693248
    i32.xor
    i32.or
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.or
    local.set $__t#16
    local.get $__p
    local.tee $i3$
    local.get $__t#16
    f64.reinterpret_i64
    f64.store offset=0 align=8
    local.get $k
    local.get $i
    i32.const 20
    i32.shr_s
    i32.add
    local.set $k
    local.get $fp$
    f64.load offset=0 align=8
    f64.const 1
    f64.sub
    local.set $f
    i32.const 1048575
    i32.const 2
    local.get $hx
    i32.add
    i32.and
    i32.const 3
    i32.lt_s
    if
    local.get $f
    global.get $math:zero
    f64.eq
    if
    local.get $k
    i32.const 0
    i32.eq
    if
    global.get $math:zero
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $k
    f64.convert_i32_s
    local.tee $dk
    global.get $math:ln2_hi
    f64.mul
    local.get $dk
    global.get $math:ln2_lo
    f64.mul
    f64.add
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $f
    local.get $f
    f64.mul
    f64.const 0.5
    f64.const 0.33333333333333331
    local.get $f
    f64.mul
    f64.sub
    f64.mul
    local.set $R
    local.get $k
    i32.const 0
    i32.eq
    if
    local.get $f
    local.get $R
    f64.sub
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $k
    f64.convert_i32_s
    local.tee $dk
    global.get $math:ln2_hi
    f64.mul
    local.get $R
    local.get $dk
    global.get $math:ln2_lo
    f64.mul
    f64.sub
    local.get $f
    f64.sub
    f64.sub
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $f
    f64.const 2
    local.get $f
    f64.add
    f64.div
    local.set $s
    local.get $k
    f64.convert_i32_s
    local.set $dk
    local.get $s
    local.get $s
    f64.mul
    local.set $z
    local.get $hx
    i32.const 398458
    i32.sub
    local.set $i
    local.get $z
    local.get $z
    f64.mul
    local.set $w
    i32.const 440401
    local.get $hx
    i32.sub
    local.set $j
    local.get $w
    global.get $math:Lg2
    local.get $w
    global.get $math:Lg4
    local.get $w
    global.get $math:Lg6
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    local.set $t1
    local.get $z
    global.get $math:Lg1
    local.get $w
    global.get $math:Lg3
    local.get $w
    global.get $math:Lg5
    local.get $w
    global.get $math:Lg7
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    local.set $t2
    local.get $i
    local.get $j
    i32.or
    local.set $i
    local.get $t2
    local.get $t1
    f64.add
    local.set $R
    local.get $i
    i32.const 0
    i32.gt_s
    if
    f64.const 0.5
    local.get $f
    f64.mul
    local.get $f
    f64.mul
    local.set $hfsq
    local.get $k
    i32.const 0
    i32.eq
    if
    local.get $f
    local.get $hfsq
    local.get $s
    local.get $hfsq
    local.get $R
    f64.add
    f64.mul
    f64.sub
    f64.sub
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $dk
    global.get $math:ln2_hi
    f64.mul
    local.get $hfsq
    local.get $s
    local.get $hfsq
    local.get $R
    f64.add
    f64.mul
    local.get $dk
    global.get $math:ln2_lo
    f64.mul
    f64.add
    f64.sub
    local.get $f
    f64.sub
    f64.sub
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $k
    i32.const 0
    i32.eq
    if
    local.get $f
    local.get $s
    local.get $f
    local.get $R
    f64.sub
    f64.mul
    f64.sub
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $dk
    global.get $math:ln2_hi
    f64.mul
    local.get $s
    local.get $f
    local.get $R
    f64.sub
    f64.mul
    local.get $dk
    global.get $math:ln2_lo
    f64.mul
    f64.sub
    local.get $f
    f64.sub
    f64.sub
    local.get $bp$
    global.set $env:__stack_pointer
    return
  )
  (func $math:__ieee754_log10
    (param $x# f64) (result f64) 
    (local $y f64) (local $z f64) (local $i i32) (local $k i32) (local $hx i32) (local $lx i32) (local $__t i64) (local $__p i32) (local $__t#8 i64) (local $bp$ i32) (local $fp$ i32) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) 
    global.get $env:__stack_pointer
    local.set $bp$
    global.get $env:__stack_pointer
    i32.const 16
    i32.sub
    global.set $env:__stack_pointer
    global.get $env:__stack_pointer
    local.tee $fp$
    local.tee $i1$
    local.get $x#
    f64.store offset=0 align=8
    local.get $fp$
    f64.load offset=0 align=8
    i64.reinterpret_f64
    local.tee $__t
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $hx
    local.get $__t
    i32.wrap_i64
    local.set $lx
    i32.const 0
    local.set $k
    local.get $hx
    i32.const 1048576
    i32.lt_s
    if
    local.get $hx
    i32.const 2147483647
    i32.and
    local.get $lx
    i32.or
    i32.const 0
    i32.eq
    if
    f64.const -18014398509481984
    global.get $math:zero
    f64.div
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $hx
    i32.const 0
    i32.lt_s
    if
    local.get $fp$
    f64.load offset=0 align=8
    local.get $fp$
    f64.load offset=0 align=8
    f64.sub
    global.get $math:zero
    f64.div
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $k
    i32.const 54
    i32.sub
    local.set $k
    local.get $fp$
    local.tee $i2$
    local.get $i2$
    f64.load offset=0 align=8
    f64.const 18014398509481984
    f64.mul
    f64.store offset=0 align=8
    local.get $fp$
    f64.load offset=0 align=8
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $hx
    end
    local.get $hx
    i32.const 2146435072
    i32.ge_s
    if
    local.get $fp$
    f64.load offset=0 align=8
    local.get $fp$
    f64.load offset=0 align=8
    f64.add
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $k
    local.get $hx
    i32.const 20
    i32.shr_s
    i32.const 1023
    i32.sub
    i32.add
    local.tee $k
    i32.const -2147483648
    i32.and
    i32.const 31
    i32.shr_u
    local.set $i
    local.get $hx
    i32.const 1048575
    i32.and
    i32.const 1023
    local.get $i
    i32.sub
    i32.const 20
    i32.shl
    i32.or
    local.set $hx
    local.get $k
    local.get $i
    i32.add
    f64.convert_i32_s
    local.set $y
    local.get $fp$
    local.tee $__p
    f64.load offset=0 align=8
    i64.reinterpret_f64
    i64.const 4294967295
    i64.and
    local.get $hx
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.or
    local.set $__t#8
    local.get $__p
    local.tee $i3$
    local.get $__t#8
    f64.reinterpret_i64
    f64.store offset=0 align=8
    local.get $y
    global.get $math:log10_2lo
    f64.mul
    global.get $math:ivln10
    local.get $fp$
    f64.load offset=0 align=8
    call $math:__ieee754_log
    f64.mul
    f64.add
    local.tee $z
    local.get $y
    global.get $math:log10_2hi
    f64.mul
    f64.add
    local.get $bp$
    global.set $env:__stack_pointer
    return
  )
  (func $math:__ieee754_exp
    (param $x f64) (result f64) 
    (local $hi f64) (local $lo f64) (local $c f64) (local $t f64) (local $k i32) (local $xsb i32) (local $hx i32) (local $__p i32) (local $__t i64) (local $__p#10 i32) (local $__t#11 i64) (local $bp$ i32) (local $fp$ i32) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) 
    global.get $env:__stack_pointer
    local.set $bp$
    global.get $env:__stack_pointer
    i32.const 16
    i32.sub
    global.set $env:__stack_pointer
    global.get $env:__stack_pointer
    local.set $fp$
    local.get $x
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.tee $hx
    i32.const 31
    i32.shr_u
    i32.const 1
    i32.and
    local.set $xsb
    local.get $hx
    i32.const 2147483647
    i32.and
    local.tee $hx
    i32.const 1082535490
    i32.ge_u
    if
    local.get $hx
    i32.const 2146435072
    i32.ge_u
    if
    local.get $x
    i64.reinterpret_f64
    i32.wrap_i64
    local.set $k
    local.get $hx
    i32.const 1048575
    i32.and
    local.get $k
    i32.or
    i32.const 0
    i32.ne
    if
    local.get $x
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $x
    f64.const 0
    local.get $xsb
    i32.const 0
    i32.eq
    select
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $x
    global.get $math:o_threshold
    f64.gt
    if
    i32.const 0
    call $fenv:feraiseexcept
    f64.const +inf
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $x
    global.get $math:u_threshold
    f64.lt
    if
    i32.const 0
    call $fenv:feraiseexcept
    i32.const 0
    f64.convert_i32_s
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    end
    local.get $hx
    i32.const 1071001154
    i32.gt_u
    if
    local.get $hx
    i32.const 1072734898
    i32.lt_u
    if
    local.get $x
    ref.data $math:ln2HI
    local.get $xsb
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    f64.sub
    local.set $hi
    ref.data $math:ln2LO
    local.get $xsb
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    local.set $lo
    i32.const 1
    local.get $xsb
    i32.sub
    local.get $xsb
    i32.sub
    local.set $k
    else
    global.get $math:ivln2
    local.get $x
    f64.mul
    ref.data $math:halF
    local.get $xsb
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    f64.add
    i32.trunc_f64_s
    local.tee $k
    f64.convert_i32_s
    local.set $t
    local.get $x
    local.get $t
    ref.data $math:ln2HI
    f64.load offset=0 align=8
    f64.mul
    f64.sub
    local.set $hi
    local.get $t
    ref.data $math:ln2LO
    f64.load offset=0 align=8
    f64.mul
    local.set $lo
    end
    local.get $hi
    local.get $lo
    f64.sub
    local.set $x
    else
    local.get $hx
    i32.const 1043333120
    i32.lt_u
    if
    f64.const 1.0000000000000001e+300
    local.get $x
    f64.add
    global.get $math:one
    f64.gt
    if
    global.get $math:one
    local.get $x
    f64.add
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    global.get $math:one
    local.get $bp$
    global.set $env:__stack_pointer
    return
    else
    i32.const 0
    local.set $k
    i32.const 0
    f64.convert_i32_s
    local.set $lo
    i32.const 0
    f64.convert_i32_s
    local.set $hi
    end
    end
    local.get $x
    local.get $x
    f64.mul
    local.set $t
    local.get $x
    local.get $t
    global.get $math:P1
    local.get $t
    global.get $math:P2
    local.get $t
    global.get $math:P3
    local.get $t
    global.get $math:P4
    local.get $t
    global.get $math:P5
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.sub
    local.set $c
    local.get $k
    i32.const 0
    i32.eq
    if
    global.get $math:one
    local.get $x
    local.get $c
    f64.mul
    local.get $c
    f64.const 2
    f64.sub
    f64.div
    local.get $x
    f64.sub
    f64.sub
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $fp$
    local.tee $i1$
    global.get $math:one
    local.get $lo
    local.get $x
    local.get $c
    f64.mul
    f64.const 2
    local.get $c
    f64.sub
    f64.div
    f64.sub
    local.get $hi
    f64.sub
    f64.sub
    f64.store offset=0 align=8
    local.get $fp$
    f64.load offset=0 align=8
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $hx
    local.get $k
    i32.const -1021
    i32.ge_s
    if
    local.get $hx
    local.get $k
    i32.const 20
    i32.shl
    i32.add
    local.set $hx
    local.get $fp$
    local.tee $__p
    f64.load offset=0 align=8
    i64.reinterpret_f64
    i64.const 4294967295
    i64.and
    local.get $hx
    i64.extend_i32_u
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.or
    local.set $__t
    local.get $__p
    local.tee $i2$
    local.get $__t
    f64.reinterpret_i64
    f64.store offset=0 align=8
    local.get $fp$
    f64.load offset=0 align=8
    local.get $bp$
    global.set $env:__stack_pointer
    return
    else
    local.get $hx
    local.get $k
    i32.const 1000
    i32.add
    i32.const 20
    i32.shl
    i32.add
    local.set $hx
    local.get $fp$
    local.tee $__p#10
    f64.load offset=0 align=8
    i64.reinterpret_f64
    i64.const 4294967295
    i64.and
    local.get $hx
    i64.extend_i32_u
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.or
    local.set $__t#11
    local.get $__p#10
    local.tee $i3$
    local.get $__t#11
    f64.reinterpret_i64
    f64.store offset=0 align=8
    local.get $fp$
    f64.load offset=0 align=8
    global.get $math:twom1000
    f64.mul
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    f64.const +nan
    local.get $bp$
    global.set $env:__stack_pointer
    return
  )
  (func $math:ceil (export "ceil")
    (param $x f64) (result f64) 
    local.get $x
    call $math:__ieee754_ceil
    return
  )
  (func $math:floor (export "floor")
    (param $x f64) (result f64) 
    local.get $x
    call $math:__ieee754_floor
    return
  )
  (func $math:round (export "round")
    (param $x f64) (result f64) 
    local.get $x
    call $math:__ieee754_round
    return
  )
  (func $math:trunc (export "trunc")
    (param $x f64) (result f64) 
    local.get $x
    call $math:__ieee754_trunc
    return
  )
  (func $math:frexp (export "frexp")
    (param $x f64) (param $eptr i32) (result f64) 
    local.get $x
    local.get $eptr
    call $math:__ieee754_frexp
    return
  )
  (func $math:ldexp (export "ldexp")
    (param $x f64) (param $n i32) (result f64) 
    local.get $x
    local.get $n
    call $math:__ieee754_scalbn
    return
  )
  (func $math:modf (export "modf")
    (param $x f64) (param $iptr i32) (result f64) 
    local.get $x
    local.get $iptr
    call $math:__ieee754_modf
    return
  )
  (func $math:fmod (export "fmod")
    (param $x f64) (param $y f64) (result f64) 
    local.get $x
    local.get $y
    call $math:__ieee754_fmod
    return
  )
  (func $math:fabs (export "fabs")
    (param $x f64) (result f64) 
    local.get $x
    i64.reinterpret_f64
    i64.const 9223372036854775807
    i64.and
    f64.reinterpret_i64
    return
  )
  (func $math:copysign (export "copysign")
    (param $x f64) (param $y f64) (result f64) 
    local.get $x
    i64.reinterpret_f64
    i64.const 9223372036854775807
    i64.and
    local.get $y
    i64.reinterpret_f64
    i64.const -9223372036854775808
    i64.and
    i64.or
    f64.reinterpret_i64
    return
  )
  (func $math:sqrt (export "sqrt")
    (param $x f64) (result f64) 
    local.get $x
    call $math:__ieee754_sqrt
    return
  )
  (func $math:pow (export "pow")
    (param $x f64) (param $y f64) (result f64) 
    local.get $x
    local.get $y
    call $math:__ieee754_pow
    return
  )
  (func $math:log (export "log")
    (param $x f64) (result f64) 
    local.get $x
    call $math:__ieee754_log
    return
  )
  (func $math:log10 (export "log10")
    (param $x f64) (result f64) 
    local.get $x
    call $math:__ieee754_log10
    return
  )
  (func $math:exp (export "exp")
    (param $x f64) (result f64) 
    local.get $x
    call $math:__ieee754_exp
    return
  )
  (func $math:fmax (export "fmax")
    (param $x f64) (param $y f64) (result f64) 
    local.get $x
    local.get $y
    local.get $x
    local.get $y
    f64.ge
    if (result i32)
    i32.const 1
    else
    local.get $y
    call $math:isnan
    end
    select
    return
  )
  (func $math:fmin (export "fmin")
    (param $x f64) (param $y f64) (result f64) 
    local.get $x
    local.get $y
    local.get $x
    local.get $y
    f64.le
    if (result i32)
    i32.const 1
    else
    local.get $y
    call $math:isnan
    end
    select
    return
  )
)
