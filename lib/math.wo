(module $math
  (import "env" "__stack_pointer" (global $env:__stack_pointer (mut i32)))
  (import "env" "__linear_memory" (memory $env:__linear_memory 0))
  (import "env" "__stack_pointer" (global $env:__stack_pointer i32))
  (import "fenv" "feraiseexcept" (func $fenv:feraiseexcept (param i32)))
  (data $math:bp var align=8 "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
  (data $math:dp_h var align=8 "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
  (data $math:dp_l var align=8 "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
  (data $math:Zero var align=8 "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\80")
  (data $math:halF var align=8 "\00\00\00\00\00\00\e0?\00\00\00\00\00\00\e0\bf")
  (data $math:ln2HI var align=8 "\00\00\e0\feB.\e6?\00\00\e0\feB.\e6\bf")
  (data $math:ln2LO var align=8 "v<y5\ef9\ea=v<y5\ef9\ea\bd")
  (data $math:Q var align=8 "\00\00\00\00\00\00\f0?\f4\10\11\11\11\11\a1\bf\85U\fe\19\a0\01Z?\b7\db\aa\9e\19\ce\14\bf9R\e6\86\ca\cf\d0>-\c3\tn\b7\fd\8a\be")
  (data $math:T var align=8 "cUUUUU\d5?z\fe\10\11\11\11\c1?\feA\b3\1b\ba\a1\ab?7\d6\06\84\f4d\96?\93\84n\e9\e3&\82?(\03V\c9\"mm?\15\83\e0\fe\c8\dbW?\01e\f2\f2\d8DC?h\10\8d\1a\f7&0?\a6\927\a0\88~\14?\e9\a7\f02\0f\b8\12?sS`\db\cbu\f3\be\d4z\bftp*\fb>")
  (data $math:init_jk var align=4 "\02\00\00\00\03\00\00\00\04\00\00\00\06\00\00\00")
  (data $math:PIo2 var align=8 "\00\00\00@\fb!\f9?\00\00\00\00-Dt>\00\00\00\80\98F\f8<\00\00\00`Q\ccx;\00\00\00\80\83\1b\f09\00\00\00@ %z8\00\00\00\80\"\82\e36\00\00\00\00\1d\f3i5")
  (data $math:two_over_pi var align=4 "\83\f9\a2\00DNn\00\fc)\15\00\d1W\'\00\dd4\f5\00b\db\c0\00<\99\95\00A\90C\00cQ\fe\00\bb\de\ab\00\b7a\c5\00:n$\00\d2MB\00I\06\e0\00\t\ea.\00\1c\92\d1\00\eb\1d\fe\00)\b1\1c\00\e8>\a7\00\f55\82\00D\bb.\00\9c\e9\84\00\b4&p\00A~_\00\d6\919\00S\839\00\9c\f49\00\8b_\84\00(\f9\bd\00\f8\1f;\00\de\ff\97\00\0f\98\05\00\11/\ef\00\nZ\8b\00m\1fm\00\cf~6\00\t\cb\'\00FO\b7\00\9ef?\00-\ea_\00\ba\'u\00\e5\eb\c7\00={\f1\00\f79\07\00\92R\8a\00\fbk\ea\00\1f\b1_\00\08]\8d\000\03V\00{\fcF\00\f0\abk\00 \bc\cf\006\f4\9a\00\e3\a9\1d\00^a\91\00\08\1b\e6\00\85\99e\00\a0\14_\00\8d@h\00\80\d8\ff\00\'sM\00\06\061\00\caV\15\00\c9\a8s\00{\e2`\00k\8c\c0\00")
  (data $math:npio2_hw var align=4 "\fb!\f9?\fb!\t@|\d9\12@\fb!\19@zj\1f@|\d9\"@\bb\fd%@\fb!)@:F,@zj/@\\G1@|\d92@\9ck4@\bb\fd5@\db\8f7@\fb!9@\1b\b4:@:F<@Z\d8=@zj?@L~@@\\GA@l\10B@|\d9B@\8c\a2C@\9ckD@\ac4E@\bb\fdE@\cb\c6F@\db\8fG@\ebXH@\fb!I@")
  (data $math:atanhi var align=8 "O\bba\05g\ac\dd?\18-DT\fb!\e9?\9b\f6\81\d2\0bs\ef?\18-DT\fb!\f9?")
  (data $math:atanlo var align=8 "\e2e/\"\7f+z<\07\\\143&\a6\81<\bd\cb\f0z\88\07p<\07\\\143&\a6\91<")
  (data $math:aT var align=8 "\rUUUUU\d5?\c4\eb\98\99\99\99\c9\bf\ff\83\00\92$I\c2?q\16#\fe\c6q\bc\bfn L\c5\cdE\b7?m\9at\af\f2\b0\b3\bfQ=\d0\a0f\r\b1?\9a\fd\deR-\de\ad\bf\eb\rv$K{\a9?/lj,D\b4\a2\bf\11\da\"\e3:\ad\90?")
  (func $math:fpclassify (export "fpclassify")
    (param $x f64) (result i32) 
    (local $retval i32) (local $msw i32) (local $lsw i32) (local $__t i64) 
    i32.const 4
    local.set $retval
    local.get $x
    i64.reinterpret_f64
    local.tee $__t
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $msw
    local.get $__t
    i32.wrap_i64
    local.tee $lsw
    local.get $msw
    i32.const 1048575
    i32.and
    i32.or
    local.set $lsw
    local.get $msw
    i32.const 2146435072
    i32.and
    local.tee $msw
    local.get $lsw
    i32.or
    i32.const 0
    i32.eq
    if
    i32.const 2
    local.set $retval
    else
    local.get $msw
    i32.const 0
    i32.eq
    if
    i32.const 3
    local.set $retval
    else
    local.get $msw
    i32.const 2146435072
    i32.eq
    if
    i32.const 0
    i32.const 1
    local.get $lsw
    i32.const 0
    i32.ne
    select
    local.set $retval
    end
    end
    end
    local.get $retval
    return
  )
  (func $math:isfinite (export "isfinite")
    (param $x f64) (result i32) 
    local.get $x
    i64.reinterpret_f64
    i64.const 9218868437227405312
    i64.and
    i64.const 9218868437227405312
    i64.eq
    return
  )
  (func $math:isinf (export "isinf")
    (param $x f64) (result i32) 
    local.get $x
    i64.reinterpret_f64
    i64.const 9223372036854775807
    i64.and
    i64.const 9218868437227405312
    i64.eq
    return
  )
  (func $math:isnan (export "isnan")
    (param $x f64) (result i32) 
    (local $ux i64) 
    local.get $x
    i64.reinterpret_f64
    local.tee $ux
    i64.const 9218868437227405312
    i64.and
    i64.const 9218868437227405312
    i64.eq
    if (result i32)
    local.get $ux
    i64.const 4503599627370495
    i64.and
    i64.const 0
    i64.ne
    else
    i32.const 0
    end
    return
  )
  (func $math:isnormal (export "isnormal")
    (param $x f64) (result i32) 
    local.get $x
    call $math:fpclassify
    i32.const 4
    i32.eq
    return
  )
  (func $math:issignaling
    (param $x f64) (result i32) 
    (local $hxi i32) (local $lxi i32) (local $__t i64) 
    local.get $x
    i64.reinterpret_f64
    local.tee $__t
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $hxi
    local.get $__t
    i32.wrap_i64
    local.set $lxi
    local.get $hxi
    i32.const 524288
    i32.xor
    local.tee $hxi
    local.get $lxi
    i32.const 0
    local.get $lxi
    i32.sub
    i32.or
    i32.const 31
    i32.shr_u
    i32.or
    local.tee $hxi
    i32.const 2147483647
    i32.and
    i32.const 2146959360
    i32.gt_u
    return
  )
  (func $math:signbit (export "signbit")
    (param $x f64) (result i32) 
    local.get $x
    i64.reinterpret_f64
    i64.const -9223372036854775808
    i64.and
    i64.const 0
    i64.ne
    return
  )
  (func $math:ieee754_scalbn
    (param $x f64) (param $n i32) (result f64) 
    (local $k i32) (local $hx i32) (local $lx i32) (local $__t i64) 
    local.get $x
    i64.reinterpret_f64
    local.tee $__t
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $hx
    local.get $__t
    i32.wrap_i64
    local.set $lx
    local.get $hx
    i32.const 20
    i32.shr_s
    i32.const 2047
    i32.and
    local.tee $k
    i32.const 0
    i32.eq
    if
    local.get $lx
    local.get $hx
    i32.const 2147483647
    i32.and
    i32.or
    i32.const 0
    i32.eq
    if
    local.get $x
    return
    end
    local.get $x
    f64.const 18014398509481984
    f64.mul
    local.tee $x
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.tee $hx
    i32.const 2146435072
    i32.and
    i32.const 20
    i32.shr_s
    i32.const 54
    i32.sub
    local.set $k
    end
    local.get $k
    i32.const 2047
    i32.eq
    if
    local.get $x
    local.get $x
    f64.add
    return
    end
    local.get $n
    i32.const -30000
    i32.lt_s
    if
    f64.const 1e-300
    i64.const 118622047889322841
    local.get $x
    i64.reinterpret_f64
    i64.const -9223372036854775808
    i64.and
    i64.or
    f64.reinterpret_i64
    f64.mul
    return
    end
    local.get $n
    i32.const 30000
    i32.gt_s
    if (result i32)
    i32.const 1
    else
    local.get $k
    local.get $n
    i32.add
    i32.const 2046
    i32.gt_s
    end
    if
    f64.const 1.0000000000000001e+300
    i64.const 9094988921128908188
    local.get $x
    i64.reinterpret_f64
    i64.const -9223372036854775808
    i64.and
    i64.or
    f64.reinterpret_i64
    f64.mul
    return
    end
    local.get $k
    local.get $n
    i32.add
    local.tee $k
    i32.const 0
    i32.gt_s
    if
    local.get $x
    i64.reinterpret_f64
    i64.const 4294967295
    i64.and
    local.get $hx
    i32.const -2146435073
    i32.and
    local.get $k
    i32.const 20
    i32.shl
    i32.or
    i64.extend_i32_u
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.or
    f64.reinterpret_i64
    local.tee $x
    return
    end
    local.get $k
    i32.const -54
    i32.le_s
    if
    f64.const 1e-300
    i64.const 118622047889322841
    local.get $x
    i64.reinterpret_f64
    i64.const -9223372036854775808
    i64.and
    i64.or
    f64.reinterpret_i64
    f64.mul
    return
    end
    local.get $k
    i32.const 54
    i32.add
    local.set $k
    local.get $x
    i64.reinterpret_f64
    i64.const 4294967295
    i64.and
    local.get $hx
    i32.const -2146435073
    i32.and
    local.get $k
    i32.const 20
    i32.shl
    i32.or
    i64.extend_i32_u
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.or
    f64.reinterpret_i64
    local.tee $x
    f64.const 5.5511151231257827e-017
    f64.mul
    return
  )
  (func $math:ieee754_frexp
    (param $x f64) (param $eptr i32) (result f64) 
    (local $hx i32) (local $ix i32) (local $lx i32) (local $__t i64) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) 
    local.get $x
    i64.reinterpret_f64
    local.tee $__t
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $hx
    local.get $__t
    i32.wrap_i64
    local.set $lx
    i32.const 2147483647
    local.get $hx
    i32.and
    local.set $ix
    local.get $eptr
    local.tee $i1$
    i32.const 0
    i32.store offset=0 align=4
    local.get $ix
    i32.const 2146435072
    i32.ge_s
    if (result i32)
    i32.const 1
    else
    local.get $ix
    local.get $lx
    i32.or
    i32.const 0
    i32.eq
    end
    if
    local.get $x
    return
    end
    local.get $ix
    i32.const 1048576
    i32.lt_s
    if
    local.get $x
    f64.const 18014398509481984
    f64.mul
    local.tee $x
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.tee $hx
    i32.const 2147483647
    i32.and
    local.set $ix
    local.get $eptr
    local.tee $i2$
    i32.const -54
    i32.store offset=0 align=4
    end
    local.get $eptr
    local.tee $i3$
    local.get $i3$
    i32.load offset=0 align=4
    local.get $ix
    i32.const 20
    i32.shr_s
    i32.const 1022
    i32.sub
    i32.add
    i32.store offset=0 align=4
    local.get $hx
    i32.const -2146435073
    i32.and
    i32.const 1071644672
    i32.or
    local.set $hx
    local.get $x
    i64.reinterpret_f64
    i64.const 4294967295
    i64.and
    local.get $hx
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.or
    f64.reinterpret_i64
    local.tee $x
    return
  )
  (func $math:ieee754_ceil
    (param $x f64) (result f64) 
    (local $i0 i32) (local $j0 i32) (local $i i32) (local $j i32) (local $i1 i32) (local $__t i64) 
    local.get $x
    i64.reinterpret_f64
    local.tee $__t
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $i0
    local.get $__t
    i32.wrap_i64
    local.set $i1
    local.get $i0
    i32.const 20
    i32.shr_s
    i32.const 2047
    i32.and
    i32.const 1023
    i32.sub
    local.tee $j0
    i32.const 20
    i32.lt_s
    if
    local.get $j0
    i32.const 0
    i32.lt_s
    if
    f64.const 1.0000000000000001e+300
    local.get $x
    f64.add
    drop
    local.get $i0
    i32.const 0
    i32.lt_s
    if
    i32.const -2147483648
    local.set $i0
    i32.const 0
    local.set $i1
    else
    local.get $i0
    local.get $i1
    i32.or
    i32.const 0
    i32.ne
    if
    i32.const 1072693248
    local.set $i0
    i32.const 0
    local.set $i1
    end
    end
    else
    i32.const 1048575
    local.get $j0
    i32.shr_u
    local.set $i
    local.get $i0
    local.get $i
    i32.and
    local.get $i1
    i32.or
    i32.const 0
    i32.eq
    if
    local.get $x
    return
    end
    f64.const 1.0000000000000001e+300
    local.get $x
    f64.add
    drop
    local.get $i0
    i32.const 0
    i32.gt_s
    if
    local.get $i0
    i32.const 1048576
    local.get $j0
    i32.shr_s
    i32.add
    local.set $i0
    end
    local.get $i0
    i32.const -1
    local.get $i
    i32.xor
    i32.and
    local.set $i0
    i32.const 0
    local.set $i1
    end
    else
    local.get $j0
    i32.const 51
    i32.gt_s
    if
    local.get $j0
    i32.const 1024
    i32.eq
    if
    local.get $x
    local.get $x
    f64.add
    return
    else
    local.get $x
    return
    end
    else
    i32.const -1
    local.get $j0
    i32.const 20
    i32.sub
    i32.shr_u
    local.set $i
    local.get $i1
    local.get $i
    i32.and
    i32.const 0
    i32.eq
    if
    local.get $x
    return
    end
    f64.const 1.0000000000000001e+300
    local.get $x
    f64.add
    drop
    local.get $i0
    i32.const 0
    i32.gt_s
    if
    local.get $j0
    i32.const 20
    i32.eq
    if
    local.get $i0
    i32.const 1
    i32.add
    local.set $i0
    else
    local.get $i1
    i32.const 1
    i32.const 52
    local.get $j0
    i32.sub
    i32.shl
    i32.add
    local.tee $j
    local.get $i1
    i32.lt_u
    if
    local.get $i0
    i32.const 1
    i32.add
    local.set $i0
    end
    local.get $j
    local.set $i1
    end
    end
    local.get $i1
    i32.const -1
    local.get $i
    i32.xor
    i32.and
    local.set $i1
    end
    end
    local.get $i0
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    local.get $i1
    i64.extend_i32_u
    i64.const 4294967295
    i64.and
    i64.or
    f64.reinterpret_i64
    local.tee $x
    return
  )
  (func $math:ieee754_floor (export "ieee754_floor")
    (param $x f64) (result f64) 
    (local $i0 i32) (local $j0 i32) (local $i i32) (local $j i32) (local $i1 i32) (local $__t i64) 
    local.get $x
    i64.reinterpret_f64
    local.tee $__t
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $i0
    local.get $__t
    i32.wrap_i64
    local.set $i1
    local.get $i0
    i32.const 20
    i32.shr_s
    i32.const 2047
    i32.and
    i32.const 1023
    i32.sub
    local.tee $j0
    i32.const 20
    i32.lt_s
    if
    local.get $j0
    i32.const 0
    i32.lt_s
    if
    f64.const 1.0000000000000001e+300
    local.get $x
    f64.add
    drop
    local.get $i0
    i32.const 0
    i32.ge_s
    if
    i32.const 0
    local.set $i0
    i32.const 0
    local.set $i1
    else
    local.get $i0
    i32.const 2147483647
    i32.and
    local.get $i1
    i32.or
    i32.const 0
    i32.ne
    if
    i32.const -1074790400
    local.set $i0
    i32.const 0
    local.set $i1
    end
    end
    else
    i32.const 1048575
    local.get $j0
    i32.shr_u
    local.set $i
    local.get $i0
    local.get $i
    i32.and
    local.get $i1
    i32.or
    i32.const 0
    i32.eq
    if
    local.get $x
    return
    end
    f64.const 1.0000000000000001e+300
    local.get $x
    f64.add
    drop
    local.get $i0
    i32.const 0
    i32.lt_s
    if
    local.get $i0
    i32.const 1048576
    local.get $j0
    i32.shr_u
    i32.add
    local.set $i0
    end
    local.get $i0
    i32.const -1
    local.get $i
    i32.xor
    i32.and
    local.set $i0
    i32.const 0
    local.set $i1
    end
    else
    local.get $j0
    i32.const 51
    i32.gt_s
    if
    local.get $j0
    i32.const 1024
    i32.eq
    if
    local.get $x
    local.get $x
    f64.add
    return
    else
    local.get $x
    return
    end
    else
    i32.const -1
    local.get $j0
    i32.const 20
    i32.sub
    i32.shr_u
    local.set $i
    local.get $i1
    local.get $i
    i32.and
    i32.const 0
    i32.eq
    if
    local.get $x
    return
    end
    f64.const 1.0000000000000001e+300
    local.get $x
    f64.add
    drop
    local.get $i0
    i32.const 0
    i32.lt_s
    if
    local.get $j0
    i32.const 20
    i32.eq
    if
    local.get $i0
    i32.const 1
    i32.add
    local.set $i0
    else
    local.get $i1
    i32.const 1
    i32.const 52
    local.get $j0
    i32.sub
    i32.shl
    i32.add
    local.tee $j
    local.get $i1
    i32.lt_u
    if
    local.get $i0
    i32.const 1
    i32.add
    local.set $i0
    end
    local.get $j
    local.set $i1
    end
    end
    local.get $i1
    i32.const -1
    local.get $i
    i32.xor
    i32.and
    local.set $i1
    end
    end
    local.get $i0
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    local.get $i1
    i64.extend_i32_u
    i64.const 4294967295
    i64.and
    i64.or
    f64.reinterpret_i64
    local.tee $x
    return
  )
  (func $math:ieee754_round
    (param $x f64) (result f64) 
    (local $i0 i32) (local $j0 i32) (local $i1 i32) (local $__t i64) (local $i i32) (local $i#5 i32) (local $j i32) 
    local.get $x
    i64.reinterpret_f64
    local.tee $__t
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $i0
    local.get $__t
    i32.wrap_i64
    local.set $i1
    local.get $i0
    i32.const 20
    i32.shr_s
    i32.const 2047
    i32.and
    i32.const 1023
    i32.sub
    local.tee $j0
    i32.const 20
    i32.lt_s
    if
    local.get $j0
    i32.const 0
    i32.lt_s
    if
    f64.const 1.0000000000000001e+300
    local.get $x
    f64.add
    drop
    local.get $i0
    i32.const -2147483648
    i32.and
    local.set $i0
    local.get $j0
    i32.const -1
    i32.eq
    if
    local.get $i0
    i32.const 1072693248
    i32.or
    local.set $i0
    end
    i32.const 0
    local.set $i1
    else
    i32.const 1048575
    local.get $j0
    i32.shr_u
    local.set $i
    local.get $i0
    local.get $i
    i32.and
    local.get $i1
    i32.or
    i32.const 0
    i32.eq
    if
    local.get $x
    return
    end
    f64.const 1.0000000000000001e+300
    local.get $x
    f64.add
    drop
    local.get $i0
    i32.const 524288
    local.get $j0
    i32.shr_u
    i32.add
    local.tee $i0
    i32.const -1
    local.get $i
    i32.xor
    i32.and
    local.set $i0
    i32.const 0
    local.set $i1
    end
    else
    local.get $j0
    i32.const 51
    i32.gt_s
    if
    local.get $j0
    i32.const 1024
    i32.eq
    if
    local.get $x
    local.get $x
    f64.add
    return
    else
    local.get $x
    return
    end
    else
    i32.const -1
    local.get $j0
    i32.const 20
    i32.sub
    i32.shr_u
    local.set $i#5
    local.get $i1
    local.get $i#5
    i32.and
    i32.const 0
    i32.eq
    if
    local.get $x
    return
    end
    f64.const 1.0000000000000001e+300
    local.get $x
    f64.add
    drop
    local.get $i1
    i32.const 1
    i32.const 51
    local.get $j0
    i32.sub
    i32.shl
    i32.add
    local.tee $j
    local.get $i1
    i32.lt_u
    if
    local.get $i0
    i32.const 1
    i32.add
    local.set $i0
    end
    local.get $j
    local.tee $i1
    i32.const -1
    local.get $i#5
    i32.xor
    i32.and
    local.set $i1
    end
    end
    local.get $i0
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    local.get $i1
    i64.extend_i32_u
    i64.const 4294967295
    i64.and
    i64.or
    f64.reinterpret_i64
    local.tee $x
    return
  )
  (func $math:ieee754_trunc
    (param $x f64) (result f64) 
    (local $i0 i32) (local $j0 i32) (local $i1 i32) (local $sx i32) (local $__t i64) 
    local.get $x
    i64.reinterpret_f64
    local.tee $__t
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $i0
    local.get $__t
    i32.wrap_i64
    local.set $i1
    local.get $i0
    i32.const -2147483648
    i32.and
    local.set $sx
    local.get $i0
    i32.const 20
    i32.shr_s
    i32.const 2047
    i32.and
    i32.const 1023
    i32.sub
    local.tee $j0
    i32.const 20
    i32.lt_s
    if
    local.get $j0
    i32.const 0
    i32.lt_s
    if
    local.get $sx
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.const 0
    i64.or
    f64.reinterpret_i64
    local.set $x
    else
    local.get $sx
    local.get $i0
    i32.const -1
    i32.const 1048575
    local.get $j0
    i32.shr_u
    i32.xor
    i32.and
    i32.or
    i64.extend_i32_u
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.const 0
    i64.or
    f64.reinterpret_i64
    local.set $x
    end
    else
    local.get $j0
    i32.const 51
    i32.gt_s
    if
    local.get $j0
    i32.const 1024
    i32.eq
    if
    local.get $x
    local.get $x
    f64.add
    return
    end
    else
    local.get $i0
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    local.get $i1
    i32.const -1
    i32.const -1
    local.get $j0
    i32.const 20
    i32.sub
    i32.shr_u
    i32.xor
    i32.and
    i64.extend_i32_u
    i64.const 4294967295
    i64.and
    i64.or
    f64.reinterpret_i64
    local.set $x
    end
    end
    local.get $x
    return
  )
  (func $math:ieee754_modf
    (param $x f64) (param $iptr i32) (result f64) 
    (local $i0 i32) (local $i1 i32) (local $j0 i32) (local $i i32) (local $__t i64) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) (local $i4$ i32) (local $i5$ i32) (local $i6$ i32) 
    local.get $x
    i64.reinterpret_f64
    local.tee $__t
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $i0
    local.get $__t
    i32.wrap_i64
    local.set $i1
    local.get $i0
    i32.const 20
    i32.shr_s
    i32.const 2047
    i32.and
    i32.const 1023
    i32.sub
    local.tee $j0
    i32.const 20
    i32.lt_s
    if
    local.get $j0
    i32.const 0
    i32.lt_s
    if
    local.get $iptr
    local.tee $i1$
    local.get $i0
    i32.const -2147483648
    i32.and
    i64.extend_i32_u
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.const 0
    i64.or
    f64.reinterpret_i64
    f64.store offset=0 align=8
    local.get $x
    return
    else
    i32.const 1048575
    local.get $j0
    i32.shr_u
    local.set $i
    local.get $i0
    local.get $i
    i32.and
    local.get $i1
    i32.or
    i32.const 0
    i32.eq
    if
    local.get $iptr
    local.tee $i2$
    local.get $x
    f64.store offset=0 align=8
    local.get $i0
    i32.const -2147483648
    i32.and
    i64.extend_i32_u
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.const 0
    i64.or
    f64.reinterpret_i64
    local.tee $x
    return
    else
    local.get $iptr
    local.tee $i3$
    local.get $i0
    i32.const -1
    local.get $i
    i32.xor
    i32.and
    i64.extend_i32_u
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.const 0
    i64.or
    f64.reinterpret_i64
    f64.store offset=0 align=8
    local.get $x
    local.get $iptr
    f64.load offset=0 align=8
    f64.sub
    return
    end
    end
    else
    local.get $j0
    i32.const 51
    i32.gt_s
    if
    local.get $iptr
    local.tee $i4$
    local.get $x
    f64.const 1
    f64.mul
    f64.store offset=0 align=8
    local.get $j0
    i32.const 1024
    i32.eq
    if (result i32)
    local.get $i0
    i32.const 1048575
    i32.and
    local.get $i1
    i32.or
    i32.const 0
    i32.ne
    else
    i32.const 0
    end
    if
    local.get $x
    f64.const 1
    f64.mul
    return
    end
    local.get $i0
    i32.const -2147483648
    i32.and
    i64.extend_i32_u
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.const 0
    i64.or
    f64.reinterpret_i64
    local.tee $x
    return
    else
    i32.const -1
    local.get $j0
    i32.const 20
    i32.sub
    i32.shr_u
    local.set $i
    local.get $i1
    local.get $i
    i32.and
    i32.const 0
    i32.eq
    if
    local.get $iptr
    local.tee $i5$
    local.get $x
    f64.store offset=0 align=8
    local.get $i0
    i32.const -2147483648
    i32.and
    i64.extend_i32_u
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.const 0
    i64.or
    f64.reinterpret_i64
    local.tee $x
    return
    else
    local.get $iptr
    local.tee $i6$
    local.get $i0
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    local.get $i1
    i32.const -1
    local.get $i
    i32.xor
    i32.and
    i64.extend_i32_u
    i64.const 4294967295
    i64.and
    i64.or
    f64.reinterpret_i64
    f64.store offset=0 align=8
    local.get $x
    local.get $iptr
    f64.load offset=0 align=8
    f64.sub
    return
    end
    end
    end
    f64.const +nan
    return
  )
  (func $math:ieee754_fmod
    (param $x f64) (param $y f64) (result f64) 
    (local $n i32) (local $hx i32) (local $hy i32) (local $hz i32) (local $ix i32) (local $iy i32) (local $sx i32) (local $i i32) (local $lx i32) (local $ly i32) (local $lz i32) (local $__t i64) (local $__t#12 i64) 
    local.get $x
    i64.reinterpret_f64
    local.tee $__t
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $hx
    local.get $__t
    i32.wrap_i64
    local.set $lx
    local.get $y
    i64.reinterpret_f64
    local.tee $__t#12
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $hy
    local.get $__t#12
    i32.wrap_i64
    local.set $ly
    local.get $hx
    i32.const -2147483648
    i32.and
    local.set $sx
    local.get $hx
    local.get $sx
    i32.xor
    local.set $hx
    local.get $hy
    i32.const 2147483647
    i32.and
    local.tee $hy
    local.get $ly
    i32.or
    i32.const 0
    i32.eq
    if (result i32)
    i32.const 1
    else
    local.get $hx
    i32.const 2146435072
    i32.ge_s
    end
    if (result i32)
    i32.const 1
    else
    local.get $hy
    local.get $ly
    i32.const 0
    local.get $ly
    i32.sub
    i32.or
    i32.const 31
    i32.shr_u
    i32.or
    i32.const 2146435072
    i32.gt_u
    end
    if
    local.get $x
    local.get $y
    f64.mul
    local.get $x
    local.get $y
    f64.mul
    f64.div
    return
    end
    local.get $hx
    local.get $hy
    i32.le_s
    if
    local.get $hx
    local.get $hy
    i32.lt_s
    if (result i32)
    i32.const 1
    else
    local.get $lx
    local.get $ly
    i32.lt_u
    end
    if
    local.get $x
    return
    end
    local.get $lx
    local.get $ly
    i32.eq
    if
    ref.data $math:Zero
    local.get $sx
    i32.const 31
    i32.shr_u
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    return
    end
    end
    local.get $hx
    i32.const 1048576
    i32.lt_s
    if
    local.get $hx
    i32.const 0
    i32.eq
    if
    block $2$
    i32.const -1043
    local.set $ix
    local.get $lx
    local.set $i
    loop $1$
    local.get $i
    i32.const 0
    i32.gt_s
    i32.eqz
    br_if $2$
    block $3$
    local.get $ix
    i32.const 1
    i32.sub
    local.set $ix
    end $3$
    local.get $i
    i32.const 1
    i32.shl
    local.set $i
    br $1$
    end $1$
    end $2$
    else
    block $5$
    i32.const -1022
    local.set $ix
    local.get $hx
    i32.const 11
    i32.shl
    local.set $i
    loop $4$
    local.get $i
    i32.const 0
    i32.gt_s
    i32.eqz
    br_if $5$
    block $6$
    local.get $ix
    i32.const 1
    i32.sub
    local.set $ix
    end $6$
    local.get $i
    i32.const 1
    i32.shl
    local.set $i
    br $4$
    end $4$
    end $5$
    end
    else
    local.get $hx
    i32.const 20
    i32.shr_s
    i32.const 1023
    i32.sub
    local.set $ix
    end
    local.get $hy
    i32.const 1048576
    i32.lt_s
    if
    local.get $hy
    i32.const 0
    i32.eq
    if
    block $8$
    i32.const -1043
    local.set $iy
    local.get $ly
    local.set $i
    loop $7$
    local.get $i
    i32.const 0
    i32.gt_s
    i32.eqz
    br_if $8$
    block $9$
    local.get $iy
    i32.const 1
    i32.sub
    local.set $iy
    end $9$
    local.get $i
    i32.const 1
    i32.shl
    local.set $i
    br $7$
    end $7$
    end $8$
    else
    block $11$
    i32.const -1022
    local.set $iy
    local.get $hy
    i32.const 11
    i32.shl
    local.set $i
    loop $10$
    local.get $i
    i32.const 0
    i32.gt_s
    i32.eqz
    br_if $11$
    block $12$
    local.get $iy
    i32.const 1
    i32.sub
    local.set $iy
    end $12$
    local.get $i
    i32.const 1
    i32.shl
    local.set $i
    br $10$
    end $10$
    end $11$
    end
    else
    local.get $hy
    i32.const 20
    i32.shr_s
    i32.const 1023
    i32.sub
    local.set $iy
    end
    local.get $ix
    i32.const -1022
    i32.ge_s
    if
    i32.const 1048576
    i32.const 1048575
    local.get $hx
    i32.and
    i32.or
    local.set $hx
    else
    i32.const -1022
    local.get $ix
    i32.sub
    local.tee $n
    i32.const 31
    i32.le_s
    if
    local.get $hx
    local.get $n
    i32.shl
    local.get $lx
    i32.const 32
    local.get $n
    i32.sub
    i32.shr_u
    i32.or
    local.set $hx
    local.get $lx
    local.get $n
    i32.shl
    local.set $lx
    else
    local.get $lx
    local.get $n
    i32.const 32
    i32.sub
    i32.shl
    local.set $hx
    i32.const 0
    local.set $lx
    end
    end
    local.get $iy
    i32.const -1022
    i32.ge_s
    if
    i32.const 1048576
    i32.const 1048575
    local.get $hy
    i32.and
    i32.or
    local.set $hy
    else
    i32.const -1022
    local.get $iy
    i32.sub
    local.tee $n
    i32.const 31
    i32.le_s
    if
    local.get $hy
    local.get $n
    i32.shl
    local.get $ly
    i32.const 32
    local.get $n
    i32.sub
    i32.shr_u
    i32.or
    local.set $hy
    local.get $ly
    local.get $n
    i32.shl
    local.set $ly
    else
    local.get $ly
    local.get $n
    i32.const 32
    i32.sub
    i32.shl
    local.set $hy
    i32.const 0
    local.set $ly
    end
    end
    local.get $ix
    local.get $iy
    i32.sub
    local.set $n
    block $13$
    loop $14$
    local.get $n
    local.get $n
    i32.const 1
    i32.sub
    local.set $n
    if
    local.get $hx
    local.get $hy
    i32.sub
    local.set $hz
    local.get $lx
    local.get $ly
    i32.sub
    local.set $lz
    local.get $lx
    local.get $ly
    i32.lt_u
    if
    local.get $hz
    i32.const 1
    i32.sub
    local.set $hz
    end
    local.get $hz
    i32.const 0
    i32.lt_s
    if
    local.get $hx
    local.get $hx
    i32.add
    local.get $lx
    i32.const 31
    i32.shr_u
    i32.add
    local.set $hx
    local.get $lx
    local.get $lx
    i32.add
    local.set $lx
    else
    local.get $hz
    local.get $lz
    i32.or
    i32.const 0
    i32.eq
    if
    ref.data $math:Zero
    local.get $sx
    i32.const 31
    i32.shr_u
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    return
    end
    local.get $hz
    local.get $hz
    i32.add
    local.get $lz
    i32.const 31
    i32.shr_u
    i32.add
    local.set $hx
    local.get $lz
    local.get $lz
    i32.add
    local.set $lx
    end
    br $14$
    end
    end $14$
    end $13$
    local.get $hx
    local.get $hy
    i32.sub
    local.set $hz
    local.get $lx
    local.get $ly
    i32.sub
    local.set $lz
    local.get $lx
    local.get $ly
    i32.lt_u
    if
    local.get $hz
    i32.const 1
    i32.sub
    local.set $hz
    end
    local.get $hz
    i32.const 0
    i32.ge_s
    if
    local.get $hz
    local.set $hx
    local.get $lz
    local.set $lx
    end
    local.get $hx
    local.get $lx
    i32.or
    i32.const 0
    i32.eq
    if
    ref.data $math:Zero
    local.get $sx
    i32.const 31
    i32.shr_u
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    return
    end
    block $15$
    loop $16$
    local.get $hx
    i32.const 1048576
    i32.lt_s
    if
    local.get $hx
    local.get $hx
    i32.add
    local.get $lx
    i32.const 31
    i32.shr_u
    i32.add
    local.set $hx
    local.get $lx
    local.get $lx
    i32.add
    local.set $lx
    local.get $iy
    i32.const 1
    i32.sub
    local.set $iy
    br $16$
    end
    end $16$
    end $15$
    local.get $iy
    i32.const -1022
    i32.ge_s
    if
    local.get $hx
    i32.const 1048576
    i32.sub
    local.get $iy
    i32.const 1023
    i32.add
    i32.const 20
    i32.shl
    i32.or
    local.tee $hx
    local.get $sx
    i32.or
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    local.get $lx
    i64.extend_i32_u
    i64.const 4294967295
    i64.and
    i64.or
    f64.reinterpret_i64
    local.set $x
    else
    i32.const -1022
    local.get $iy
    i32.sub
    local.tee $n
    i32.const 20
    i32.le_s
    if
    local.get $lx
    local.get $n
    i32.shr_u
    local.get $hx
    i32.const 32
    local.get $n
    i32.sub
    i32.shl
    i32.or
    local.set $lx
    local.get $hx
    local.get $n
    i32.shr_s
    local.set $hx
    else
    local.get $n
    i32.const 31
    i32.le_s
    if
    local.get $hx
    i32.const 32
    local.get $n
    i32.sub
    i32.shl
    local.get $lx
    local.get $n
    i32.shr_u
    i32.or
    local.set $lx
    local.get $sx
    local.set $hx
    else
    local.get $hx
    local.get $n
    i32.const 32
    i32.sub
    i32.shr_s
    local.set $lx
    local.get $sx
    local.set $hx
    end
    end
    local.get $hx
    local.get $sx
    i32.or
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    local.get $lx
    i64.extend_i32_u
    i64.const 4294967295
    i64.and
    i64.or
    f64.reinterpret_i64
    local.tee $x
    f64.const 1
    f64.mul
    local.set $x
    end
    local.get $x
    return
  )
  (func $math:ieee754_sqrt
    (param $x f64) (result f64) 
    (local $z f64) (local $sign i32) (local $r i32) (local $t1 i32) (local $s1 i32) (local $ix1 i32) (local $q1 i32) (local $ix0 i32) (local $s0 i32) (local $q i32) (local $m i32) (local $t i32) (local $i i32) (local $__t i64) 
    i32.const -2147483648
    local.set $sign
    local.get $x
    i64.reinterpret_f64
    local.tee $__t
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $ix0
    local.get $__t
    i32.wrap_i64
    local.set $ix1
    local.get $ix0
    i32.const 2146435072
    i32.and
    i32.const 2146435072
    i32.eq
    if
    local.get $x
    local.get $x
    f64.mul
    local.get $x
    f64.add
    return
    end
    local.get $ix0
    i32.const 0
    i32.le_s
    if
    local.get $ix0
    i32.const -1
    local.get $sign
    i32.xor
    i32.and
    local.get $ix1
    i32.or
    i32.const 0
    i32.eq
    if
    local.get $x
    return
    else
    local.get $ix0
    i32.const 0
    i32.lt_s
    if
    local.get $x
    local.get $x
    f64.sub
    local.get $x
    local.get $x
    f64.sub
    f64.div
    return
    end
    end
    end
    local.get $ix0
    i32.const 20
    i32.shr_s
    local.tee $m
    i32.const 0
    i32.eq
    if
    block $1$
    loop $2$
    local.get $ix0
    i32.const 0
    i32.eq
    if
    local.get $m
    i32.const 21
    i32.sub
    local.set $m
    local.get $ix0
    local.get $ix1
    i32.const 11
    i32.shr_u
    i32.or
    local.set $ix0
    local.get $ix1
    i32.const 21
    i32.shl
    local.set $ix1
    br $2$
    end
    end $2$
    end $1$
    block $4$
    i32.const 0
    local.set $i
    loop $3$
    local.get $ix0
    i32.const 1048576
    i32.and
    i32.const 0
    i32.eq
    i32.eqz
    br_if $4$
    block $5$
    local.get $ix0
    i32.const 1
    i32.shl
    local.set $ix0
    end $5$
    local.get $i
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    drop
    br $3$
    end $3$
    end $4$
    local.get $m
    local.get $i
    i32.const 1
    i32.sub
    i32.sub
    local.set $m
    local.get $ix0
    local.get $ix1
    i32.const 32
    local.get $i
    i32.sub
    i32.shr_u
    i32.or
    local.set $ix0
    local.get $ix1
    local.get $i
    i32.shl
    local.set $ix1
    end
    local.get $m
    i32.const 1023
    i32.sub
    local.set $m
    local.get $ix0
    i32.const 1048575
    i32.and
    i32.const 1048576
    i32.or
    local.set $ix0
    local.get $m
    i32.const 1
    i32.and
    if
    local.get $ix0
    local.get $ix0
    local.get $ix1
    local.get $sign
    i32.and
    i32.const 31
    i32.shr_u
    i32.add
    i32.add
    local.set $ix0
    local.get $ix1
    local.get $ix1
    i32.add
    local.set $ix1
    end
    local.get $m
    i32.const 1
    i32.shr_s
    local.set $m
    local.get $ix0
    local.get $ix0
    local.get $ix1
    local.get $sign
    i32.and
    i32.const 31
    i32.shr_u
    i32.add
    i32.add
    local.set $ix0
    local.get $ix1
    local.get $ix1
    i32.add
    local.set $ix1
    i32.const 0
    local.tee $s0
    local.set $q
    i32.const 0
    local.tee $s1
    local.set $q1
    i32.const 2097152
    local.set $r
    block $6$
    loop $7$
    local.get $r
    i32.const 0
    i32.ne
    if
    local.get $s0
    local.get $r
    i32.add
    local.tee $t
    local.get $ix0
    i32.le_s
    if
    local.get $t
    local.get $r
    i32.add
    local.set $s0
    local.get $ix0
    local.get $t
    i32.sub
    local.set $ix0
    local.get $q
    local.get $r
    i32.add
    local.set $q
    end
    local.get $ix0
    local.get $ix0
    local.get $ix1
    local.get $sign
    i32.and
    i32.const 31
    i32.shr_u
    i32.add
    i32.add
    local.set $ix0
    local.get $ix1
    local.get $ix1
    i32.add
    local.set $ix1
    local.get $r
    i32.const 1
    i32.shr_u
    local.set $r
    br $7$
    end
    end $7$
    end $6$
    local.get $sign
    local.set $r
    block $8$
    loop $9$
    local.get $r
    i32.const 0
    i32.ne
    if
    local.get $s1
    local.get $r
    i32.add
    local.set $t1
    local.get $s0
    local.tee $t
    local.get $ix0
    i32.lt_s
    if (result i32)
    i32.const 1
    else
    local.get $t
    local.get $ix0
    i32.eq
    if (result i32)
    local.get $t1
    local.get $ix1
    i32.le_u
    else
    i32.const 0
    end
    end
    if
    local.get $t1
    local.get $r
    i32.add
    local.set $s1
    local.get $t1
    local.get $sign
    i32.and
    local.get $sign
    i32.eq
    if (result i32)
    local.get $s1
    local.get $sign
    i32.and
    i32.const 0
    i32.eq
    else
    i32.const 0
    end
    if
    local.get $s0
    i32.const 1
    i32.add
    local.set $s0
    end
    local.get $ix0
    local.get $t
    i32.sub
    local.set $ix0
    local.get $ix1
    local.get $t1
    i32.lt_u
    if
    local.get $ix0
    i32.const 1
    i32.sub
    local.set $ix0
    end
    local.get $ix1
    local.get $t1
    i32.sub
    local.set $ix1
    local.get $q1
    local.get $r
    i32.add
    local.set $q1
    end
    local.get $ix0
    local.get $ix0
    local.get $ix1
    local.get $sign
    i32.and
    i32.const 31
    i32.shr_u
    i32.add
    i32.add
    local.set $ix0
    local.get $ix1
    local.get $ix1
    i32.add
    local.set $ix1
    local.get $r
    i32.const 1
    i32.shr_u
    local.set $r
    br $9$
    end
    end $9$
    end $8$
    local.get $ix0
    local.get $ix1
    i32.or
    i32.const 0
    i32.ne
    if
    f64.const 1
    local.tee $z
    f64.const 1
    f64.ge
    if
    f64.const 1
    local.set $z
    local.get $q1
    i32.const -1
    i32.eq
    if
    i32.const 0
    local.set $q1
    local.get $q
    i32.const 1
    i32.add
    local.set $q
    else
    local.get $z
    f64.const 1
    f64.gt
    if
    local.get $q1
    i32.const -2
    i32.eq
    if
    local.get $q
    i32.const 1
    i32.add
    local.set $q
    end
    local.get $q1
    i32.const 2
    i32.add
    local.set $q1
    else
    local.get $q1
    local.get $q1
    i32.const 1
    i32.and
    i32.add
    local.set $q1
    end
    end
    end
    end
    local.get $q
    i32.const 1
    i32.shr_s
    i32.const 1071644672
    i32.add
    local.set $ix0
    local.get $q1
    i32.const 1
    i32.shr_u
    local.set $ix1
    local.get $q
    i32.const 1
    i32.and
    i32.const 1
    i32.eq
    if
    local.get $ix1
    local.get $sign
    i32.or
    local.set $ix1
    end
    local.get $ix0
    local.get $m
    i32.const 20
    i32.shl
    i32.add
    local.tee $ix0
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    local.get $ix1
    i64.extend_i32_u
    i64.const 4294967295
    i64.and
    i64.or
    f64.reinterpret_i64
    local.tee $z
    return
  )
  (func $math:ieee754_pow
    (param $x f64) (param $y f64) (result f64) 
    (local $z f64) (local $ax f64) (local $z_h f64) (local $z_l f64) (local $p_h f64) (local $p_l f64) (local $y1 f64) (local $t1 f64) (local $t2 f64) (local $r f64) (local $s f64) (local $t f64) (local $u f64) (local $v f64) (local $w f64) (local $i i32) (local $j i32) (local $k i32) (local $yisint i32) (local $n i32) (local $hx i32) (local $hy i32) (local $ix i32) (local $iy i32) (local $lx i32) (local $ly i32) (local $__t i64) (local $__t#27 i64) (local $s2 f64) (local $s_h f64) (local $s_l f64) (local $t_h f64) (local $t_l f64) (local $__t#33 i64) 
    local.get $x
    i64.reinterpret_f64
    local.tee $__t
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $hx
    local.get $__t
    i32.wrap_i64
    local.set $lx
    local.get $y
    i64.reinterpret_f64
    local.tee $__t#27
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $hy
    local.get $__t#27
    i32.wrap_i64
    local.set $ly
    local.get $hx
    i32.const 2147483647
    i32.and
    local.set $ix
    local.get $hy
    i32.const 2147483647
    i32.and
    local.tee $iy
    local.get $ly
    i32.or
    i32.const 0
    i32.eq
    if
    local.get $x
    call $math:issignaling
    if
    f64.const +nan
    return
    end
    f64.const 1
    return
    end
    local.get $ix
    i32.const 2146435072
    i32.gt_s
    if (result i32)
    i32.const 1
    else
    local.get $ix
    i32.const 2146435072
    i32.eq
    if (result i32)
    local.get $lx
    i32.const 0
    i32.ne
    else
    i32.const 0
    end
    end
    if (result i32)
    i32.const 1
    else
    local.get $iy
    i32.const 2146435072
    i32.gt_s
    end
    if (result i32)
    i32.const 1
    else
    local.get $iy
    i32.const 2146435072
    i32.eq
    if (result i32)
    local.get $ly
    i32.const 0
    i32.ne
    else
    i32.const 0
    end
    end
    if
    local.get $ix
    i32.const 1072693248
    i32.sub
    local.get $lx
    i32.or
    i32.const 0
    i32.eq
    if (result i32)
    local.get $hx
    i32.const -2147483648
    i32.and
    i32.eqz
    else
    i32.const 0
    end
    if
    f64.const 1
    return
    else
    f64.const +nan
    return
    end
    end
    i32.const 0
    local.set $yisint
    local.get $hx
    i32.const 0
    i32.lt_s
    if
    local.get $iy
    i32.const 1128267776
    i32.ge_s
    if
    i32.const 2
    local.set $yisint
    else
    local.get $iy
    i32.const 1072693248
    i32.ge_s
    if
    local.get $iy
    i32.const 20
    i32.shr_s
    i32.const 1023
    i32.sub
    local.tee $k
    i32.const 20
    i32.gt_s
    if
    local.get $ly
    i32.const 52
    local.get $k
    i32.sub
    i32.shr_u
    local.tee $j
    i32.const 52
    local.get $k
    i32.sub
    i32.shl
    local.get $ly
    i32.eq
    if
    i32.const 2
    local.get $j
    i32.const 1
    i32.and
    i32.sub
    local.set $yisint
    end
    else
    local.get $ly
    i32.const 0
    i32.eq
    if
    local.get $iy
    i32.const 20
    local.get $k
    i32.sub
    i32.shr_s
    local.tee $j
    i32.const 20
    local.get $k
    i32.sub
    i32.shl
    local.get $iy
    i32.eq
    if
    i32.const 2
    local.get $j
    i32.const 1
    i32.and
    i32.sub
    local.set $yisint
    end
    end
    end
    end
    end
    end
    local.get $ly
    i32.const 0
    i32.eq
    if
    local.get $iy
    i32.const 2146435072
    i32.eq
    if
    local.get $ix
    i32.const 1072693248
    i32.sub
    local.get $lx
    i32.or
    i32.const 0
    i32.eq
    if
    f64.const 1
    return
    else
    local.get $ix
    i32.const 1072693248
    i32.ge_s
    if
    local.get $y
    f64.const 0
    local.get $hy
    i32.const 0
    i32.ge_s
    select
    return
    else
    local.get $hy
    i32.const 0
    i32.lt_s
    if (result f64)
    local.get $y
    f64.neg
    else
    f64.const 0
    end
    return
    end
    end
    end
    local.get $iy
    i32.const 1072693248
    i32.eq
    if
    local.get $hy
    i32.const 0
    i32.lt_s
    if
    f64.const 1
    local.get $x
    f64.div
    return
    else
    local.get $x
    return
    end
    end
    local.get $hy
    i32.const 1073741824
    i32.eq
    if
    local.get $x
    local.get $x
    f64.mul
    return
    end
    local.get $hy
    i32.const 1071644672
    i32.eq
    if
    local.get $hx
    i32.const 0
    i32.ge_s
    if
    local.get $x
    call $math:ieee754_sqrt
    return
    end
    end
    end
    local.get $x
    i64.reinterpret_f64
    i64.const 9223372036854775807
    i64.and
    f64.reinterpret_i64
    local.set $ax
    local.get $lx
    i32.const 0
    i32.eq
    if
    local.get $ix
    i32.const 2146435072
    i32.eq
    if (result i32)
    i32.const 1
    else
    local.get $ix
    i32.const 0
    i32.eq
    end
    if (result i32)
    i32.const 1
    else
    local.get $ix
    i32.const 1072693248
    i32.eq
    end
    if
    local.get $ax
    local.set $z
    local.get $hy
    i32.const 0
    i32.lt_s
    if
    f64.const 1
    local.get $z
    f64.div
    local.set $z
    end
    local.get $hx
    i32.const 0
    i32.lt_s
    if
    local.get $ix
    i32.const 1072693248
    i32.sub
    local.get $yisint
    i32.or
    i32.const 0
    i32.eq
    if
    local.get $z
    local.get $z
    f64.sub
    local.get $z
    local.get $z
    f64.sub
    f64.div
    local.set $z
    else
    local.get $yisint
    i32.const 1
    i32.eq
    if
    local.get $z
    f64.neg
    local.set $z
    end
    end
    end
    local.get $z
    return
    end
    end
    local.get $hx
    i32.const 31
    i32.shr_u
    i32.const 1
    i32.sub
    local.get $yisint
    i32.or
    i32.const 0
    i32.eq
    if
    local.get $x
    local.get $x
    f64.sub
    local.get $x
    local.get $x
    f64.sub
    f64.div
    return
    end
    local.get $iy
    i32.const 1105199104
    i32.gt_s
    if
    local.get $iy
    i32.const 1139802112
    i32.gt_s
    if
    local.get $ix
    i32.const 1072693247
    i32.le_s
    if
    local.get $hy
    i32.const 0
    i32.lt_s
    if
    i32.const 0
    call $fenv:feraiseexcept
    f64.const +inf
    return
    end
    i32.const 0
    call $fenv:feraiseexcept
    i32.const 0
    f64.convert_i32_s
    return
    end
    local.get $ix
    i32.const 1072693248
    i32.ge_s
    if
    local.get $hy
    i32.const 0
    i32.gt_s
    if
    i32.const 0
    call $fenv:feraiseexcept
    f64.const +inf
    return
    end
    i32.const 0
    call $fenv:feraiseexcept
    i32.const 0
    f64.convert_i32_s
    return
    end
    end
    local.get $ix
    i32.const 1072693247
    i32.lt_s
    if
    local.get $hy
    i32.const 0
    i32.lt_s
    if
    i32.const 0
    call $fenv:feraiseexcept
    f64.const +inf
    return
    end
    i32.const 0
    call $fenv:feraiseexcept
    i32.const 0
    f64.convert_i32_s
    return
    end
    local.get $ix
    i32.const 1072693248
    i32.gt_s
    if
    local.get $hy
    i32.const 0
    i32.gt_s
    if
    i32.const 0
    call $fenv:feraiseexcept
    f64.const +inf
    return
    end
    i32.const 0
    call $fenv:feraiseexcept
    i32.const 0
    f64.convert_i32_s
    return
    end
    local.get $ax
    i32.const 1
    f64.convert_i32_s
    f64.sub
    local.tee $t
    local.get $t
    f64.mul
    f64.const 0.5
    local.get $t
    f64.const 0.33333333333333331
    local.get $t
    f64.const 0.25
    f64.mul
    f64.sub
    f64.mul
    f64.sub
    f64.mul
    local.set $w
    f64.const 1.4426950216293335
    local.get $t
    f64.mul
    local.set $u
    local.get $t
    f64.const 1.9259629911266175e-008
    f64.mul
    local.get $w
    f64.const 1.4426950408889634
    f64.mul
    f64.sub
    local.set $v
    local.get $u
    local.get $v
    f64.add
    local.tee $t1
    i64.reinterpret_f64
    i64.const -4294967296
    i64.and
    i64.const 0
    i64.or
    f64.reinterpret_i64
    local.set $t1
    local.get $v
    local.get $t1
    local.get $u
    f64.sub
    f64.sub
    local.set $t2
    else
    i32.const 0
    local.set $n
    local.get $ix
    i32.const 1048576
    i32.lt_s
    if
    local.get $ax
    f64.const 9007199254740992
    f64.mul
    local.set $ax
    local.get $n
    i32.const 53
    i32.sub
    local.set $n
    local.get $ax
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $ix
    end
    local.get $n
    local.get $ix
    i32.const 20
    i32.shr_s
    i32.const 1023
    i32.sub
    i32.add
    local.set $n
    local.get $ix
    i32.const 1048575
    i32.and
    local.tee $j
    i32.const 1072693248
    i32.or
    local.set $ix
    local.get $j
    i32.const 235662
    i32.le_s
    if
    i32.const 0
    local.set $k
    else
    local.get $j
    i32.const 767610
    i32.lt_s
    if
    i32.const 1
    local.set $k
    else
    i32.const 0
    local.set $k
    local.get $n
    i32.const 1
    i32.add
    local.set $n
    local.get $ix
    i32.const 1048576
    i32.sub
    local.set $ix
    end
    end
    local.get $ax
    i64.reinterpret_f64
    i64.const 4294967295
    i64.and
    local.get $ix
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.or
    f64.reinterpret_i64
    local.tee $ax
    ref.data $math:bp
    local.get $k
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    f64.sub
    local.set $u
    f64.const 1
    local.get $ax
    ref.data $math:bp
    local.get $k
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    f64.add
    f64.div
    local.set $v
    local.get $u
    local.get $v
    f64.mul
    local.tee $s
    local.tee $s_h
    i64.reinterpret_f64
    i64.const -4294967296
    i64.and
    i64.const 0
    i64.or
    f64.reinterpret_i64
    local.set $s_h
    f64.const 0
    local.tee $t_h
    i64.reinterpret_f64
    i64.const 4294967295
    i64.and
    local.get $ix
    i32.const 1
    i32.shr_s
    i32.const 536870912
    i32.or
    i32.const 524288
    i32.add
    local.get $k
    i32.const 18
    i32.shl
    i32.add
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.or
    f64.reinterpret_i64
    local.set $t_h
    local.get $ax
    local.get $t_h
    ref.data $math:bp
    local.get $k
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    f64.sub
    f64.sub
    local.set $t_l
    local.get $v
    local.get $u
    local.get $s_h
    local.get $t_h
    f64.mul
    f64.sub
    local.get $s_h
    local.get $t_l
    f64.mul
    f64.sub
    f64.mul
    local.set $s_l
    local.get $s
    local.get $s
    f64.mul
    local.tee $s2
    local.get $s2
    f64.mul
    f64.const 0.59999999999999465
    local.get $s2
    f64.const 0.42857142857855018
    local.get $s2
    f64.const 0.33333332981837743
    local.get $s2
    f64.const 0.27272812380853401
    local.get $s2
    f64.const 0.23066074577556175
    local.get $s2
    f64.const 0.20697501780033842
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    local.tee $r
    local.get $s_l
    local.get $s_h
    local.get $s
    f64.add
    f64.mul
    f64.add
    local.set $r
    local.get $s_h
    local.get $s_h
    f64.mul
    local.set $s2
    f64.const 3
    local.get $s2
    f64.add
    local.get $r
    f64.add
    local.tee $t_h
    i64.reinterpret_f64
    i64.const -4294967296
    i64.and
    i64.const 0
    i64.or
    f64.reinterpret_i64
    local.set $t_h
    local.get $r
    local.get $t_h
    f64.const 3
    f64.sub
    local.get $s2
    f64.sub
    f64.sub
    local.set $t_l
    local.get $s_h
    local.get $t_h
    f64.mul
    local.set $u
    local.get $s_l
    local.get $t_h
    f64.mul
    local.get $t_l
    local.get $s
    f64.mul
    f64.add
    local.set $v
    local.get $u
    local.get $v
    f64.add
    local.tee $p_h
    i64.reinterpret_f64
    i64.const -4294967296
    i64.and
    i64.const 0
    i64.or
    f64.reinterpret_i64
    local.set $p_h
    local.get $v
    local.get $p_h
    local.get $u
    f64.sub
    f64.sub
    local.set $p_l
    f64.const 0.96179670095443726
    local.get $p_h
    f64.mul
    local.set $z_h
    f64.const -7.0284616509527583e-009
    local.get $p_h
    f64.mul
    local.get $p_l
    f64.const 0.96179669392597555
    f64.mul
    f64.add
    ref.data $math:dp_l
    local.get $k
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    f64.add
    local.set $z_l
    local.get $n
    f64.convert_i32_s
    local.set $t
    local.get $z_h
    local.get $z_l
    f64.add
    ref.data $math:dp_h
    local.get $k
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    f64.add
    local.get $t
    f64.add
    local.tee $t1
    i64.reinterpret_f64
    i64.const -4294967296
    i64.and
    i64.const 0
    i64.or
    f64.reinterpret_i64
    local.set $t1
    local.get $z_l
    local.get $t1
    local.get $t
    f64.sub
    ref.data $math:dp_h
    local.get $k
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    f64.sub
    local.get $z_h
    f64.sub
    f64.sub
    local.set $t2
    end
    f64.const 1
    local.set $s
    local.get $hx
    i32.const 31
    i32.shr_u
    i32.const 1
    i32.sub
    local.get $yisint
    i32.const 1
    i32.sub
    i32.or
    i32.const 0
    i32.eq
    if
    f64.const -1
    local.set $s
    end
    local.get $y
    local.tee $y1
    i64.reinterpret_f64
    i64.const -4294967296
    i64.and
    i64.const 0
    i64.or
    f64.reinterpret_i64
    local.set $y1
    local.get $y
    local.get $y1
    f64.sub
    local.get $t1
    f64.mul
    local.get $y
    local.get $t2
    f64.mul
    f64.add
    local.set $p_l
    local.get $y1
    local.get $t1
    f64.mul
    local.set $p_h
    local.get $p_l
    local.get $p_h
    f64.add
    local.tee $z
    i64.reinterpret_f64
    local.tee $__t#33
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $j
    local.get $__t#33
    i32.wrap_i64
    local.set $i
    local.get $j
    i32.const 1083179008
    i32.ge_s
    if
    local.get $j
    i32.const 1083179008
    i32.sub
    local.get $i
    i32.or
    i32.const 0
    i32.ne
    if
    i32.const 0
    call $fenv:feraiseexcept
    i64.const 9218868437227405312
    local.get $s
    i64.reinterpret_f64
    i64.const -9223372036854775808
    i64.and
    i64.or
    f64.reinterpret_i64
    return
    end
    local.get $p_l
    f64.const 8.0085662595372941e-017
    f64.add
    local.get $z
    local.get $p_h
    f64.sub
    f64.gt
    if
    i32.const 0
    call $fenv:feraiseexcept
    i64.const 9218868437227405312
    local.get $s
    i64.reinterpret_f64
    i64.const -9223372036854775808
    i64.and
    i64.or
    f64.reinterpret_i64
    return
    end
    else
    local.get $j
    i32.const 2147483647
    i32.and
    i32.const 1083231232
    i32.ge_s
    if
    local.get $j
    i32.const -1064252416
    i32.sub
    local.get $i
    i32.or
    i32.const 0
    i32.ne
    if
    i32.const 0
    call $fenv:feraiseexcept
    i64.const 0
    local.get $s
    i64.reinterpret_f64
    i64.const -9223372036854775808
    i64.and
    i64.or
    f64.reinterpret_i64
    return
    end
    local.get $p_l
    local.get $z
    local.get $p_h
    f64.sub
    f64.le
    if
    i32.const 0
    call $fenv:feraiseexcept
    i64.const 0
    local.get $s
    i64.reinterpret_f64
    i64.const -9223372036854775808
    i64.and
    i64.or
    f64.reinterpret_i64
    return
    end
    end
    end
    local.get $j
    i32.const 2147483647
    i32.and
    local.tee $i
    i32.const 20
    i32.shr_s
    i32.const 1023
    i32.sub
    local.set $k
    i32.const 0
    local.set $n
    local.get $i
    i32.const 1071644672
    i32.gt_s
    if
    local.get $j
    i32.const 1048576
    local.get $k
    i32.const 1
    i32.add
    i32.shr_s
    i32.add
    local.tee $n
    i32.const 2147483647
    i32.and
    i32.const 20
    i32.shr_s
    i32.const 1023
    i32.sub
    local.set $k
    f64.const 0
    local.tee $t
    i64.reinterpret_f64
    i64.const 4294967295
    i64.and
    local.get $n
    i32.const -1
    i32.const 1048575
    local.get $k
    i32.shr_u
    i32.xor
    i32.and
    i64.extend_i32_u
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.or
    f64.reinterpret_i64
    local.set $t
    local.get $n
    i32.const 1048575
    i32.and
    i32.const 1048576
    i32.or
    i32.const 20
    local.get $k
    i32.sub
    i32.shr_s
    local.set $n
    local.get $j
    i32.const 0
    i32.lt_s
    if
    i32.const 0
    local.get $n
    i32.sub
    local.set $n
    end
    local.get $p_h
    local.get $t
    f64.sub
    local.set $p_h
    end
    local.get $p_l
    local.get $p_h
    f64.add
    local.tee $t
    i64.reinterpret_f64
    i64.const -4294967296
    i64.and
    i64.const 0
    i64.or
    f64.reinterpret_i64
    local.tee $t
    f64.const 0.69314718246459961
    f64.mul
    local.set $u
    local.get $p_l
    local.get $t
    local.get $p_h
    f64.sub
    f64.sub
    f64.const 0.69314718055994529
    f64.mul
    local.get $t
    f64.const -1.904654299957768e-009
    f64.mul
    f64.add
    local.set $v
    local.get $u
    local.get $v
    f64.add
    local.set $z
    local.get $v
    local.get $z
    local.get $u
    f64.sub
    f64.sub
    local.set $w
    local.get $z
    local.get $z
    f64.mul
    local.set $t
    local.get $z
    local.get $t
    f64.const 0.16666666666666602
    local.get $t
    f64.const -0.0027777777777015593
    local.get $t
    f64.const 6.6137563214379344e-005
    local.get $t
    f64.const -1.6533902205465252e-006
    local.get $t
    f64.const 4.1381367970572385e-008
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.sub
    local.set $t1
    local.get $z
    local.get $t1
    f64.mul
    local.get $t1
    f64.const 2
    f64.sub
    f64.div
    local.get $w
    local.get $z
    local.get $w
    f64.mul
    f64.add
    f64.sub
    local.set $r
    f64.const 1
    local.get $r
    local.get $z
    f64.sub
    f64.sub
    local.tee $z
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.tee $j
    local.get $n
    i32.const 20
    i32.shl
    i32.add
    local.tee $j
    i32.const 20
    i32.shr_s
    i32.const 0
    i32.le_s
    if
    local.get $z
    local.get $n
    call $math:ieee754_scalbn
    local.set $z
    else
    local.get $z
    i64.reinterpret_f64
    i64.const 4294967295
    i64.and
    local.get $j
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.or
    f64.reinterpret_i64
    local.set $z
    end
    local.get $s
    local.get $z
    f64.mul
    return
  )
  (func $math:ieee754_log
    (param $x f64) (result f64) 
    (local $hfsq f64) (local $f f64) (local $s f64) (local $z f64) (local $R f64) (local $w f64) (local $t1 f64) (local $t2 f64) (local $dk f64) (local $k i32) (local $hx i32) (local $i i32) (local $j i32) (local $lx i32) (local $__t i64) 
    local.get $x
    i64.reinterpret_f64
    local.tee $__t
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $hx
    local.get $__t
    i32.wrap_i64
    local.set $lx
    i32.const 0
    local.set $k
    local.get $hx
    i32.const 1048576
    i32.lt_s
    if
    local.get $hx
    i32.const 2147483647
    i32.and
    local.get $lx
    i32.or
    i32.const 0
    i32.eq
    if
    f64.const -18014398509481984
    f64.const 0
    f64.div
    return
    end
    local.get $hx
    i32.const 0
    i32.lt_s
    if
    local.get $x
    local.get $x
    f64.sub
    f64.const 0
    f64.div
    return
    end
    local.get $k
    i32.const 54
    i32.sub
    local.set $k
    local.get $x
    f64.const 18014398509481984
    f64.mul
    local.tee $x
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $hx
    end
    local.get $hx
    i32.const 2146435072
    i32.ge_s
    if
    local.get $x
    local.get $x
    f64.add
    return
    end
    local.get $k
    local.get $hx
    i32.const 20
    i32.shr_s
    i32.const 1023
    i32.sub
    i32.add
    local.set $k
    local.get $hx
    i32.const 1048575
    i32.and
    local.tee $hx
    i32.const 614244
    i32.add
    i32.const 1048576
    i32.and
    local.set $i
    local.get $x
    i64.reinterpret_f64
    i64.const 4294967295
    i64.and
    local.get $hx
    local.get $i
    i32.const 1072693248
    i32.xor
    i32.or
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.or
    f64.reinterpret_i64
    local.set $x
    local.get $k
    local.get $i
    i32.const 20
    i32.shr_s
    i32.add
    local.set $k
    local.get $x
    f64.const 1
    f64.sub
    local.set $f
    i32.const 1048575
    i32.const 2
    local.get $hx
    i32.add
    i32.and
    i32.const 3
    i32.lt_s
    if
    local.get $f
    f64.const 0
    f64.eq
    if
    local.get $k
    i32.const 0
    i32.eq
    if
    f64.const 0
    return
    end
    local.get $k
    f64.convert_i32_s
    local.tee $dk
    f64.const 0.69314718036912382
    f64.mul
    local.get $dk
    f64.const 1.9082149292705877e-010
    f64.mul
    f64.add
    return
    end
    local.get $f
    local.get $f
    f64.mul
    f64.const 0.5
    f64.const 0.33333333333333331
    local.get $f
    f64.mul
    f64.sub
    f64.mul
    local.set $R
    local.get $k
    i32.const 0
    i32.eq
    if
    local.get $f
    local.get $R
    f64.sub
    return
    end
    local.get $k
    f64.convert_i32_s
    local.tee $dk
    f64.const 0.69314718036912382
    f64.mul
    local.get $R
    local.get $dk
    f64.const 1.9082149292705877e-010
    f64.mul
    f64.sub
    local.get $f
    f64.sub
    f64.sub
    return
    end
    local.get $f
    f64.const 2
    local.get $f
    f64.add
    f64.div
    local.set $s
    local.get $k
    f64.convert_i32_s
    local.set $dk
    local.get $s
    local.get $s
    f64.mul
    local.set $z
    local.get $hx
    i32.const 398458
    i32.sub
    local.set $i
    local.get $z
    local.get $z
    f64.mul
    local.set $w
    i32.const 440401
    local.get $hx
    i32.sub
    local.set $j
    local.get $w
    f64.const 0.39999999999409419
    local.get $w
    f64.const 0.22222198432149784
    local.get $w
    f64.const 0.15313837699209373
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    local.set $t1
    local.get $z
    f64.const 0.66666666666667351
    local.get $w
    f64.const 0.28571428743662391
    local.get $w
    f64.const 0.1818357216161805
    local.get $w
    f64.const 0.14798198605116586
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    local.set $t2
    local.get $i
    local.get $j
    i32.or
    local.set $i
    local.get $t2
    local.get $t1
    f64.add
    local.set $R
    local.get $i
    i32.const 0
    i32.gt_s
    if
    f64.const 0.5
    local.get $f
    f64.mul
    local.get $f
    f64.mul
    local.set $hfsq
    local.get $k
    i32.const 0
    i32.eq
    if
    local.get $f
    local.get $hfsq
    local.get $s
    local.get $hfsq
    local.get $R
    f64.add
    f64.mul
    f64.sub
    f64.sub
    return
    end
    local.get $dk
    f64.const 0.69314718036912382
    f64.mul
    local.get $hfsq
    local.get $s
    local.get $hfsq
    local.get $R
    f64.add
    f64.mul
    local.get $dk
    f64.const 1.9082149292705877e-010
    f64.mul
    f64.add
    f64.sub
    local.get $f
    f64.sub
    f64.sub
    return
    end
    local.get $k
    i32.const 0
    i32.eq
    if
    local.get $f
    local.get $s
    local.get $f
    local.get $R
    f64.sub
    f64.mul
    f64.sub
    return
    end
    local.get $dk
    f64.const 0.69314718036912382
    f64.mul
    local.get $s
    local.get $f
    local.get $R
    f64.sub
    f64.mul
    local.get $dk
    f64.const 1.9082149292705877e-010
    f64.mul
    f64.sub
    local.get $f
    f64.sub
    f64.sub
    return
  )
  (func $math:ieee754_log10
    (param $x f64) (result f64) 
    (local $y f64) (local $z f64) (local $i i32) (local $k i32) (local $hx i32) (local $lx i32) (local $__t i64) 
    local.get $x
    i64.reinterpret_f64
    local.tee $__t
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $hx
    local.get $__t
    i32.wrap_i64
    local.set $lx
    i32.const 0
    local.set $k
    local.get $hx
    i32.const 1048576
    i32.lt_s
    if
    local.get $hx
    i32.const 2147483647
    i32.and
    local.get $lx
    i32.or
    i32.const 0
    i32.eq
    if
    f64.const -18014398509481984
    f64.const 0
    f64.div
    return
    end
    local.get $hx
    i32.const 0
    i32.lt_s
    if
    local.get $x
    local.get $x
    f64.sub
    f64.const 0
    f64.div
    return
    end
    local.get $k
    i32.const 54
    i32.sub
    local.set $k
    local.get $x
    f64.const 18014398509481984
    f64.mul
    local.tee $x
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $hx
    end
    local.get $hx
    i32.const 2146435072
    i32.ge_s
    if
    local.get $x
    local.get $x
    f64.add
    return
    end
    local.get $k
    local.get $hx
    i32.const 20
    i32.shr_s
    i32.const 1023
    i32.sub
    i32.add
    local.tee $k
    i32.const -2147483648
    i32.and
    i32.const 31
    i32.shr_u
    local.set $i
    local.get $hx
    i32.const 1048575
    i32.and
    i32.const 1023
    local.get $i
    i32.sub
    i32.const 20
    i32.shl
    i32.or
    local.set $hx
    local.get $k
    local.get $i
    i32.add
    f64.convert_i32_s
    local.set $y
    local.get $x
    i64.reinterpret_f64
    i64.const 4294967295
    i64.and
    local.get $hx
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.or
    f64.reinterpret_i64
    local.set $x
    local.get $y
    f64.const 3.6942390771589308e-013
    f64.mul
    f64.const 0.43429448190325182
    local.get $x
    call $math:ieee754_log
    f64.mul
    f64.add
    local.tee $z
    local.get $y
    f64.const 0.30102999566361177
    f64.mul
    f64.add
    return
  )
  (func $math:ieee754_exp
    (param $x f64) (result f64) 
    (local $y f64) (local $hi f64) (local $lo f64) (local $c f64) (local $t f64) (local $k i32) (local $xsb i32) (local $hx i32) 
    local.get $x
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.tee $hx
    i32.const 31
    i32.shr_u
    i32.const 1
    i32.and
    local.set $xsb
    local.get $hx
    i32.const 2147483647
    i32.and
    local.tee $hx
    i32.const 1082535490
    i32.ge_u
    if
    local.get $hx
    i32.const 2146435072
    i32.ge_u
    if
    local.get $x
    i64.reinterpret_f64
    i32.wrap_i64
    local.set $k
    local.get $hx
    i32.const 1048575
    i32.and
    local.get $k
    i32.or
    i32.const 0
    i32.ne
    if
    local.get $x
    return
    end
    local.get $x
    f64.const 0
    local.get $xsb
    i32.const 0
    i32.eq
    select
    return
    end
    local.get $x
    f64.const 709.78271289338397
    f64.gt
    if
    i32.const 0
    call $fenv:feraiseexcept
    f64.const +inf
    return
    end
    local.get $x
    f64.const -745.13321910194111
    f64.lt
    if
    i32.const 0
    call $fenv:feraiseexcept
    i32.const 0
    f64.convert_i32_s
    return
    end
    end
    local.get $hx
    i32.const 1071001154
    i32.gt_u
    if
    local.get $hx
    i32.const 1072734898
    i32.lt_u
    if
    local.get $x
    ref.data $math:ln2HI
    local.get $xsb
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    f64.sub
    local.set $hi
    ref.data $math:ln2LO
    local.get $xsb
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    local.set $lo
    i32.const 1
    local.get $xsb
    i32.sub
    local.get $xsb
    i32.sub
    local.set $k
    else
    f64.const 1.4426950408889634
    local.get $x
    f64.mul
    ref.data $math:halF
    local.get $xsb
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    f64.add
    i32.trunc_f64_s
    local.tee $k
    f64.convert_i32_s
    local.set $t
    local.get $x
    local.get $t
    ref.data $math:ln2HI
    f64.load offset=0 align=8
    f64.mul
    f64.sub
    local.set $hi
    local.get $t
    ref.data $math:ln2LO
    f64.load offset=0 align=8
    f64.mul
    local.set $lo
    end
    local.get $hi
    local.get $lo
    f64.sub
    local.set $x
    else
    local.get $hx
    i32.const 1043333120
    i32.lt_u
    if
    f64.const 1.0000000000000001e+300
    local.get $x
    f64.add
    f64.const 1
    f64.gt
    if
    f64.const 1
    local.get $x
    f64.add
    return
    end
    f64.const 1
    return
    else
    i32.const 0
    local.set $k
    i32.const 0
    f64.convert_i32_s
    local.set $lo
    i32.const 0
    f64.convert_i32_s
    local.set $hi
    end
    end
    local.get $x
    local.get $x
    f64.mul
    local.set $t
    local.get $x
    local.get $t
    f64.const 0.16666666666666602
    local.get $t
    f64.const -0.0027777777777015593
    local.get $t
    f64.const 6.6137563214379344e-005
    local.get $t
    f64.const -1.6533902205465252e-006
    local.get $t
    f64.const 4.1381367970572385e-008
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.sub
    local.set $c
    local.get $k
    i32.const 0
    i32.eq
    if
    f64.const 1
    local.get $x
    local.get $c
    f64.mul
    local.get $c
    f64.const 2
    f64.sub
    f64.div
    local.get $x
    f64.sub
    f64.sub
    return
    end
    f64.const 1
    local.get $lo
    local.get $x
    local.get $c
    f64.mul
    f64.const 2
    local.get $c
    f64.sub
    f64.div
    f64.sub
    local.get $hi
    f64.sub
    f64.sub
    local.tee $y
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $hx
    local.get $k
    i32.const -1021
    i32.ge_s
    if
    local.get $hx
    local.get $k
    i32.const 20
    i32.shl
    i32.add
    local.set $hx
    local.get $y
    i64.reinterpret_f64
    i64.const 4294967295
    i64.and
    local.get $hx
    i64.extend_i32_u
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.or
    f64.reinterpret_i64
    local.tee $y
    return
    else
    local.get $hx
    local.get $k
    i32.const 1000
    i32.add
    i32.const 20
    i32.shl
    i32.add
    local.set $hx
    local.get $y
    i64.reinterpret_f64
    i64.const 4294967295
    i64.and
    local.get $hx
    i64.extend_i32_u
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.or
    f64.reinterpret_i64
    local.tee $y
    f64.const 9.3326361850321888e-302
    f64.mul
    return
    end
    f64.const +nan
    return
  )
  (func $math:ieee754_expm1
    (param $x f64) (result f64) 
    (local $y f64) (local $hi f64) (local $lo f64) (local $c f64) (local $t f64) (local $e f64) (local $hxs f64) (local $hfx f64) (local $r1 f64) (local $h2 f64) (local $h4 f64) (local $R1 f64) (local $R2 f64) (local $R3 f64) (local $k i32) (local $xsb i32) (local $hx i32) (local $low i32) (local $high i32) (local $high#19 i32) (local $high#20 i32) 
    local.get $x
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.tee $hx
    i32.const -2147483648
    i32.and
    local.tee $xsb
    i32.const 0
    i32.eq
    if
    local.get $x
    local.set $y
    else
    local.get $x
    f64.neg
    local.set $y
    end
    local.get $hx
    i32.const 2147483647
    i32.and
    local.tee $hx
    i32.const 1078159482
    i32.ge_u
    if
    local.get $hx
    i32.const 1082535490
    i32.ge_u
    if
    local.get $hx
    i32.const 2146435072
    i32.ge_u
    if
    local.get $x
    i64.reinterpret_f64
    i32.wrap_i64
    local.set $low
    local.get $hx
    i32.const 1048575
    i32.and
    local.get $low
    i32.or
    i32.const 0
    i32.ne
    if
    local.get $x
    local.get $x
    f64.add
    return
    end
    local.get $x
    f64.const -1
    local.get $xsb
    i32.const 0
    i32.eq
    select
    return
    end
    local.get $x
    f64.const 709.78271289338397
    f64.gt
    if
    i32.const 0
    call $fenv:feraiseexcept
    f64.const +inf
    return
    end
    end
    local.get $xsb
    i32.const 0
    i32.ne
    if
    i32.const 0
    call $fenv:feraiseexcept
    f64.const -1
    return
    end
    end
    local.get $hx
    i32.const 1071001154
    i32.gt_u
    if
    local.get $hx
    i32.const 1072734898
    i32.lt_u
    if
    local.get $xsb
    i32.const 0
    i32.eq
    if
    local.get $x
    f64.const 0.69314718036912382
    f64.sub
    local.set $hi
    f64.const 1.9082149292705877e-010
    local.set $lo
    i32.const 1
    local.set $k
    else
    local.get $x
    f64.const 0.69314718036912382
    f64.add
    local.set $hi
    f64.const -1.9082149292705877e-010
    local.set $lo
    i32.const -1
    local.set $k
    end
    else
    f64.const 1.4426950408889634
    local.get $x
    f64.mul
    f64.const 0.5
    f64.const -0.5
    local.get $xsb
    i32.const 0
    i32.eq
    select
    f64.add
    i32.trunc_f64_s
    local.tee $k
    f64.convert_i32_s
    local.set $t
    local.get $x
    local.get $t
    f64.const 0.69314718036912382
    f64.mul
    f64.sub
    local.set $hi
    local.get $t
    f64.const 1.9082149292705877e-010
    f64.mul
    local.set $lo
    end
    local.get $hi
    local.get $lo
    f64.sub
    local.set $x
    local.get $hi
    local.get $x
    f64.sub
    local.get $lo
    f64.sub
    local.set $c
    else
    local.get $hx
    i32.const 1016070144
    i32.lt_u
    if
    f64.const 1.0000000000000001e+300
    local.get $x
    f64.add
    local.set $t
    local.get $x
    local.get $t
    f64.const 1.0000000000000001e+300
    local.get $x
    f64.add
    f64.sub
    f64.sub
    return
    else
    i32.const 0
    local.set $k
    i32.const 0
    f64.convert_i32_s
    local.set $c
    end
    end
    f64.const 0.5
    local.get $x
    f64.mul
    local.set $hfx
    local.get $x
    local.get $hfx
    f64.mul
    local.set $hxs
    f64.const 1
    local.get $hxs
    ref.data $math:Q
    f64.load offset=8 align=8
    f64.mul
    f64.add
    local.set $R1
    local.get $hxs
    local.get $hxs
    f64.mul
    local.set $h2
    ref.data $math:Q
    f64.load offset=16 align=8
    local.get $hxs
    ref.data $math:Q
    f64.load offset=24 align=8
    f64.mul
    f64.add
    local.set $R2
    local.get $h2
    local.get $h2
    f64.mul
    local.set $h4
    ref.data $math:Q
    f64.load offset=32 align=8
    local.get $hxs
    ref.data $math:Q
    f64.load offset=40 align=8
    f64.mul
    f64.add
    local.set $R3
    local.get $R1
    local.get $h2
    local.get $R2
    f64.mul
    f64.add
    local.get $h4
    local.get $R3
    f64.mul
    f64.add
    local.set $r1
    f64.const 3
    local.get $r1
    local.get $hfx
    f64.mul
    f64.sub
    local.set $t
    local.get $hxs
    local.get $r1
    local.get $t
    f64.sub
    f64.const 6
    local.get $x
    local.get $t
    f64.mul
    f64.sub
    f64.div
    f64.mul
    local.set $e
    local.get $k
    i32.const 0
    i32.eq
    if
    local.get $x
    local.get $x
    local.get $e
    f64.mul
    local.get $hxs
    f64.sub
    f64.sub
    return
    else
    local.get $x
    local.get $e
    local.get $c
    f64.sub
    f64.mul
    local.get $c
    f64.sub
    local.tee $e
    local.get $hxs
    f64.sub
    local.set $e
    local.get $k
    i32.const -1
    i32.eq
    if
    f64.const 0.5
    local.get $x
    local.get $e
    f64.sub
    f64.mul
    f64.const 0.5
    f64.sub
    return
    end
    local.get $k
    i32.const 1
    i32.eq
    if
    local.get $x
    f64.const -0.25
    f64.lt
    if
    f64.const -2
    local.get $e
    local.get $x
    f64.const 0.5
    f64.add
    f64.sub
    f64.mul
    return
    else
    f64.const 1
    f64.const 2
    local.get $x
    local.get $e
    f64.sub
    f64.mul
    f64.add
    return
    end
    end
    local.get $k
    i32.const -2
    i32.le_s
    if (result i32)
    i32.const 1
    else
    local.get $k
    i32.const 56
    i32.gt_s
    end
    if
    f64.const 1
    local.get $e
    local.get $x
    f64.sub
    f64.sub
    local.tee $y
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $high
    local.get $y
    i64.reinterpret_f64
    i64.const 4294967295
    i64.and
    local.get $high
    local.get $k
    i32.const 20
    i32.shl
    i32.add
    i64.extend_i32_u
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.or
    f64.reinterpret_i64
    local.tee $y
    f64.const 1
    f64.sub
    return
    end
    f64.const 1
    local.set $t
    local.get $k
    i32.const 20
    i32.lt_s
    if
    local.get $t
    i64.reinterpret_f64
    i64.const 4294967295
    i64.and
    i32.const 1072693248
    i32.const 2097152
    local.get $k
    i32.shr_u
    i32.sub
    i64.extend_i32_u
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.or
    f64.reinterpret_i64
    local.tee $t
    local.get $e
    local.get $x
    f64.sub
    f64.sub
    local.tee $y
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $high#19
    local.get $y
    i64.reinterpret_f64
    i64.const 4294967295
    i64.and
    local.get $high#19
    local.get $k
    i32.const 20
    i32.shl
    i32.add
    i64.extend_i32_u
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.or
    f64.reinterpret_i64
    local.set $y
    else
    local.get $t
    i64.reinterpret_f64
    i64.const 4294967295
    i64.and
    i32.const 1023
    local.get $k
    i32.sub
    i32.const 20
    i32.shl
    i64.extend_i32_u
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.or
    f64.reinterpret_i64
    local.set $t
    local.get $x
    local.get $e
    local.get $t
    f64.add
    f64.sub
    local.tee $y
    f64.const 1
    f64.add
    local.tee $y
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $high#20
    local.get $y
    i64.reinterpret_f64
    i64.const 4294967295
    i64.and
    local.get $high#20
    local.get $k
    i32.const 20
    i32.shl
    i32.add
    i64.extend_i32_u
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.or
    f64.reinterpret_i64
    local.set $y
    end
    end
    local.get $y
    return
  )
  (func $math:__kernel_sin
    (param $x f64) (param $y f64) (param $iy i32) (result f64) 
    (local $z f64) (local $r f64) (local $v f64) (local $ix i32) 
    local.get $x
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.tee $ix
    i32.const 2147483647
    i32.and
    local.tee $ix
    i32.const 1044381696
    i32.lt_s
    if
    local.get $x
    i32.trunc_f64_s
    i32.const 0
    i32.eq
    if
    local.get $x
    return
    end
    end
    local.get $x
    local.get $x
    f64.mul
    local.tee $z
    local.get $x
    f64.mul
    local.set $v
    f64.const 0.0083333333333224895
    local.get $z
    f64.const -0.00019841269829857949
    local.get $z
    f64.const 2.7557313707070068e-006
    local.get $z
    f64.const -2.5050760253406863e-008
    local.get $z
    f64.const 1.5896909952115501e-010
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    local.set $r
    local.get $iy
    i32.const 0
    i32.eq
    if
    local.get $x
    local.get $v
    f64.const -0.16666666666666632
    local.get $z
    local.get $r
    f64.mul
    f64.add
    f64.mul
    f64.add
    return
    end
    local.get $x
    local.get $z
    f64.const 0.5
    local.get $y
    f64.mul
    local.get $v
    local.get $r
    f64.mul
    f64.sub
    f64.mul
    local.get $y
    f64.sub
    local.get $v
    f64.const -0.16666666666666632
    f64.mul
    f64.sub
    f64.sub
    return
  )
  (func $math:__kernel_cos
    (param $x f64) (param $y f64) (result f64) 
    (local $a f64) (local $hz f64) (local $z f64) (local $r f64) (local $qx f64) (local $ix i32) 
    local.get $x
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.tee $ix
    i32.const 2147483647
    i32.and
    local.tee $ix
    i32.const 1044381696
    i32.lt_s
    if
    local.get $x
    i32.trunc_f64_s
    i32.const 0
    i32.eq
    if
    f64.const 1
    return
    end
    end
    local.get $x
    local.get $x
    f64.mul
    local.tee $z
    f64.const 0.041666666666666602
    local.get $z
    f64.const -0.001388888888887411
    local.get $z
    f64.const 2.4801587289476729e-005
    local.get $z
    f64.const -2.7557314351390663e-007
    local.get $z
    f64.const 2.0875723212981748e-009
    local.get $z
    f64.const -1.1359647557788195e-011
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    local.set $r
    local.get $ix
    i32.const 1070805811
    i32.lt_s
    if
    f64.const 1
    f64.const 0.5
    local.get $z
    f64.mul
    local.get $z
    local.get $r
    f64.mul
    local.get $x
    local.get $y
    f64.mul
    f64.sub
    f64.sub
    f64.sub
    return
    else
    local.get $ix
    i32.const 1072234496
    i32.gt_s
    if
    f64.const 0.28125
    local.set $qx
    else
    local.get $ix
    i32.const 2097152
    i32.sub
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.const 0
    i64.or
    f64.reinterpret_i64
    local.set $qx
    end
    f64.const 0.5
    local.get $z
    f64.mul
    local.get $qx
    f64.sub
    local.set $hz
    f64.const 1
    local.get $qx
    f64.sub
    local.tee $a
    local.get $hz
    local.get $z
    local.get $r
    f64.mul
    local.get $x
    local.get $y
    f64.mul
    f64.sub
    f64.sub
    f64.sub
    return
    end
    f64.const +nan
    return
  )
  (func $math:__kernel_tan
    (param $x f64) (param $y f64) (param $iy i32) (result f64) 
    (local $z f64) (local $r f64) (local $v f64) (local $w f64) (local $s f64) (local $ix i32) (local $hx i32) (local $low i32) (local $a f64) (local $t f64) 
    local.get $x
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.tee $hx
    i32.const 2147483647
    i32.and
    local.tee $ix
    i32.const 1043333120
    i32.lt_s
    if
    local.get $x
    i32.trunc_f64_s
    i32.const 0
    i32.eq
    if
    local.get $x
    i64.reinterpret_f64
    i32.wrap_i64
    local.set $low
    local.get $ix
    local.get $low
    i32.or
    local.get $iy
    i32.const 1
    i32.add
    i32.or
    i32.const 0
    i32.eq
    if
    f64.const 1
    local.get $x
    i64.reinterpret_f64
    i64.const 9223372036854775807
    i64.and
    f64.reinterpret_i64
    f64.div
    return
    else
    local.get $iy
    i32.const 1
    i32.eq
    if (result f64)
    local.get $x
    else
    f64.const -1
    local.get $x
    f64.div
    end
    return
    end
    end
    end
    local.get $ix
    i32.const 1072010280
    i32.ge_s
    if
    local.get $hx
    i32.const 0
    i32.lt_s
    if
    local.get $x
    f64.neg
    local.set $x
    local.get $y
    f64.neg
    local.set $y
    end
    f64.const 0.78539816339744828
    local.get $x
    f64.sub
    local.set $z
    f64.const 3.061616997868383e-017
    local.get $y
    f64.sub
    local.set $w
    local.get $z
    local.get $w
    f64.add
    local.set $x
    f64.const 0
    local.set $y
    end
    local.get $x
    local.get $x
    f64.mul
    local.tee $z
    local.get $z
    f64.mul
    local.set $w
    ref.data $math:T
    f64.load offset=8 align=8
    local.get $w
    ref.data $math:T
    f64.load offset=24 align=8
    local.get $w
    ref.data $math:T
    f64.load offset=40 align=8
    local.get $w
    ref.data $math:T
    f64.load offset=56 align=8
    local.get $w
    ref.data $math:T
    f64.load offset=72 align=8
    local.get $w
    ref.data $math:T
    f64.load offset=88 align=8
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    local.set $r
    local.get $z
    ref.data $math:T
    f64.load offset=16 align=8
    local.get $w
    ref.data $math:T
    f64.load offset=32 align=8
    local.get $w
    ref.data $math:T
    f64.load offset=48 align=8
    local.get $w
    ref.data $math:T
    f64.load offset=64 align=8
    local.get $w
    ref.data $math:T
    f64.load offset=80 align=8
    local.get $w
    ref.data $math:T
    f64.load offset=96 align=8
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    local.set $v
    local.get $z
    local.get $x
    f64.mul
    local.set $s
    local.get $y
    local.get $z
    local.get $s
    local.get $r
    local.get $v
    f64.add
    f64.mul
    local.get $y
    f64.add
    f64.mul
    f64.add
    local.tee $r
    ref.data $math:T
    f64.load offset=0 align=8
    local.get $s
    f64.mul
    f64.add
    local.set $r
    local.get $x
    local.get $r
    f64.add
    local.set $w
    local.get $ix
    i32.const 1072010280
    i32.ge_s
    if
    local.get $iy
    f64.convert_i32_s
    local.set $v
    i32.const 1
    local.get $hx
    i32.const 30
    i32.shr_s
    i32.const 2
    i32.and
    i32.sub
    f64.convert_i32_s
    local.get $v
    f64.const 2
    local.get $x
    local.get $w
    local.get $w
    f64.mul
    local.get $w
    local.get $v
    f64.add
    f64.div
    local.get $r
    f64.sub
    f64.sub
    f64.mul
    f64.sub
    f64.mul
    return
    end
    local.get $iy
    i32.const 1
    i32.ne
    if
    local.get $w
    local.tee $z
    i64.reinterpret_f64
    i64.const -4294967296
    i64.and
    i64.const 0
    i64.or
    f64.reinterpret_i64
    local.set $z
    local.get $r
    local.get $z
    local.get $x
    f64.sub
    f64.sub
    local.set $v
    f64.const -1
    local.get $w
    f64.div
    local.tee $a
    local.tee $t
    i64.reinterpret_f64
    i64.const -4294967296
    i64.and
    i64.const 0
    i64.or
    f64.reinterpret_i64
    local.set $t
    f64.const 1
    local.get $t
    local.get $z
    f64.mul
    f64.add
    local.set $s
    local.get $t
    local.get $a
    local.get $s
    local.get $t
    local.get $v
    f64.mul
    f64.add
    f64.mul
    f64.add
    return
    end
    local.get $w
    return
  )
  (func $math:__kernel_rem_pio2
    (param $x i32) (param $y i32) (param $e0 i32) (param $nx i32) (param $prec i32) (result i32) 
    (local $jz i32) (local $jx i32) (local $jv i32) (local $jp i32) (local $jk i32) (local $carry i32) (local $n i32) (local $i i32) (local $j i32) (local $k i32) (local $m i32) (local $q0 i32) (local $ih i32) (local $z f64) (local $fw f64) (local $fv f64) (local $fv#20 f64) (local $fv#21 f64) (local $bp$ i32) (local $fp$ i32) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) (local $i4$ i32) (local $i5$ i32) (local $i6$ i32) (local $i7$ i32) (local $i8$ i32) (local $i9$ i32) (local $i10$ i32) (local $i11$ i32) (local $i12$ i32) (local $i13$ i32) (local $i14$ i32) (local $i15$ i32) (local $i16$ i32) (local $i17$ i32) (local $i18$ i32) (local $i19$ i32) (local $i20$ i32) (local $i21$ i32) (local $i22$ i32) (local $i23$ i32) (local $i24$ i32) (local $i25$ i32) (local $i26$ i32) (local $i27$ i32) (local $i28$ i32) 
    global.get $env:__stack_pointer
    local.set $bp$
    global.get $env:__stack_pointer
    i32.const 560
    i32.sub
    global.set $env:__stack_pointer
    global.get $env:__stack_pointer
    local.set $fp$
    ref.data $math:init_jk
    local.get $prec
    i32.const 4
    i32.mul
    i32.add
    i32.load offset=0 align=4
    local.tee $jk
    local.set $jp
    local.get $nx
    i32.const 1
    i32.sub
    local.set $jx
    local.get $e0
    i32.const 3
    i32.sub
    i32.const 24
    i32.div_s
    local.tee $jv
    i32.const 0
    i32.lt_s
    if
    i32.const 0
    local.set $jv
    end
    local.get $e0
    i32.const 24
    local.get $jv
    i32.const 1
    i32.add
    i32.mul
    i32.sub
    local.set $q0
    local.get $jv
    local.get $jx
    i32.sub
    local.set $j
    local.get $jx
    local.get $jk
    i32.add
    local.set $m
    block $2$
    i32.const 0
    local.set $i
    loop $1$
    local.get $i
    local.get $m
    i32.le_s
    i32.eqz
    br_if $2$
    block $3$
    local.get $fp$
    i32.const 80
    i32.add
    local.get $i
    i32.const 8
    i32.mul
    i32.add
    local.tee $i1$
    local.get $j
    i32.const 0
    i32.lt_s
    if (result f64)
    f64.const 0
    else
    ref.data $math:two_over_pi
    local.get $j
    i32.const 4
    i32.mul
    i32.add
    i32.load offset=0 align=4
    f64.convert_i32_s
    end
    f64.store offset=0 align=8
    end $3$
    local.get $i
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    drop
    local.get $j
    local.get $j
    i32.const 1
    i32.add
    local.set $j
    drop
    br $1$
    end $1$
    end $2$
    block $5$
    i32.const 0
    local.set $i
    loop $4$
    local.get $i
    local.get $jk
    i32.le_s
    i32.eqz
    br_if $5$
    block $6$
    block $8$
    i32.const 0
    local.set $j
    f64.const 0
    local.set $fw
    loop $7$
    local.get $j
    local.get $jx
    i32.le_s
    i32.eqz
    br_if $8$
    block $9$
    local.get $fw
    local.get $x
    local.get $j
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    local.get $fp$
    i32.const 80
    i32.add
    local.get $jx
    local.get $i
    i32.add
    local.get $j
    i32.sub
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    f64.mul
    f64.add
    local.set $fw
    end $9$
    local.get $j
    local.get $j
    i32.const 1
    i32.add
    local.set $j
    drop
    br $7$
    end $7$
    end $8$
    local.get $fp$
    i32.const 400
    i32.add
    local.get $i
    i32.const 8
    i32.mul
    i32.add
    local.tee $i2$
    local.get $fw
    f64.store offset=0 align=8
    end $6$
    local.get $i
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    drop
    br $4$
    end $4$
    end $5$
    local.get $jk
    local.set $jz
    loop $recompute
    block $11$
    i32.const 0
    local.set $i
    local.get $jz
    local.set $j
    local.get $fp$
    i32.const 400
    i32.add
    local.get $jz
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    local.set $z
    loop $10$
    local.get $j
    i32.const 0
    i32.gt_s
    i32.eqz
    br_if $11$
    block $12$
    f64.const 5.9604644775390625e-008
    local.get $z
    f64.mul
    i32.trunc_f64_s
    f64.convert_i32_s
    local.set $fw
    local.get $fp$
    local.get $i
    i32.const 4
    i32.mul
    i32.add
    local.tee $i3$
    local.get $z
    f64.const 16777216
    local.get $fw
    f64.mul
    f64.sub
    i32.trunc_f64_s
    i32.store offset=0 align=4
    local.get $fp$
    i32.const 400
    i32.add
    local.get $j
    i32.const 1
    i32.sub
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    local.get $fw
    f64.add
    local.set $z
    end $12$
    local.get $i
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    drop
    local.get $j
    local.get $j
    i32.const 1
    i32.sub
    local.set $j
    drop
    br $10$
    end $10$
    end $11$
    local.get $z
    local.get $q0
    call $math:ieee754_scalbn
    local.tee $z
    f64.const 8
    local.get $z
    f64.const 0.125
    f64.mul
    call $math:ieee754_floor
    f64.mul
    f64.sub
    local.tee $z
    i32.trunc_f64_s
    local.set $n
    local.get $z
    local.get $n
    f64.convert_i32_s
    f64.sub
    local.set $z
    i32.const 0
    local.set $ih
    local.get $q0
    i32.const 0
    i32.gt_s
    if
    local.get $fp$
    local.get $jz
    i32.const 1
    i32.sub
    i32.const 4
    i32.mul
    i32.add
    i32.load offset=0 align=4
    i32.const 24
    local.get $q0
    i32.sub
    i32.shr_s
    local.set $i
    local.get $n
    local.get $i
    i32.add
    local.set $n
    local.get $fp$
    local.get $jz
    i32.const 1
    i32.sub
    i32.const 4
    i32.mul
    i32.add
    local.tee $i4$
    local.get $i4$
    i32.load offset=0 align=4
    local.get $i
    i32.const 24
    local.get $q0
    i32.sub
    i32.shl
    i32.sub
    i32.store offset=0 align=4
    local.get $fp$
    local.get $jz
    i32.const 1
    i32.sub
    i32.const 4
    i32.mul
    i32.add
    i32.load offset=0 align=4
    i32.const 23
    local.get $q0
    i32.sub
    i32.shr_s
    local.set $ih
    else
    local.get $q0
    i32.const 0
    i32.eq
    if
    local.get $fp$
    local.get $jz
    i32.const 1
    i32.sub
    i32.const 4
    i32.mul
    i32.add
    i32.load offset=0 align=4
    i32.const 23
    i32.shr_s
    local.set $ih
    else
    local.get $z
    f64.const 0.5
    f64.ge
    if
    i32.const 2
    local.set $ih
    end
    end
    end
    local.get $ih
    i32.const 0
    i32.gt_s
    if
    local.get $n
    i32.const 1
    i32.add
    local.set $n
    i32.const 0
    local.set $carry
    block $14$
    i32.const 0
    local.set $i
    loop $13$
    local.get $i
    local.get $jz
    i32.lt_s
    i32.eqz
    br_if $14$
    block $15$
    local.get $fp$
    local.get $i
    i32.const 4
    i32.mul
    i32.add
    i32.load offset=0 align=4
    local.set $j
    local.get $carry
    i32.const 0
    i32.eq
    if
    local.get $j
    i32.const 0
    i32.ne
    if
    i32.const 1
    local.set $carry
    local.get $fp$
    local.get $i
    i32.const 4
    i32.mul
    i32.add
    local.tee $i5$
    i32.const 16777216
    local.get $j
    i32.sub
    i32.store offset=0 align=4
    end
    else
    local.get $fp$
    local.get $i
    i32.const 4
    i32.mul
    i32.add
    local.tee $i6$
    i32.const 16777215
    local.get $j
    i32.sub
    i32.store offset=0 align=4
    end
    end $15$
    local.get $i
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    drop
    br $13$
    end $13$
    end $14$
    local.get $q0
    i32.const 0
    i32.gt_s
    if
    block $16$
    block $18$
    block $17$
    local.get $q0
    i32.const 1
    i32.sub
    br_table $17$ $18$ $16$
    end $17$
    local.get $fp$
    local.get $jz
    i32.const 1
    i32.sub
    i32.const 4
    i32.mul
    i32.add
    local.tee $i7$
    local.get $i7$
    i32.load offset=0 align=4
    i32.const 8388607
    i32.and
    i32.store offset=0 align=4
    br $16$
    end $18$
    local.get $fp$
    local.get $jz
    i32.const 1
    i32.sub
    i32.const 4
    i32.mul
    i32.add
    local.tee $i8$
    local.get $i8$
    i32.load offset=0 align=4
    i32.const 4194303
    i32.and
    i32.store offset=0 align=4
    br $16$
    end $16$
    end
    local.get $ih
    i32.const 2
    i32.eq
    if
    f64.const 1
    local.get $z
    f64.sub
    local.set $z
    local.get $carry
    i32.const 0
    i32.ne
    if
    local.get $z
    f64.const 1
    local.get $q0
    call $math:ieee754_scalbn
    f64.sub
    local.set $z
    end
    end
    end
    local.get $z
    f64.const 0
    f64.eq
    if
    i32.const 0
    local.set $j
    block $20$
    local.get $jz
    i32.const 1
    i32.sub
    local.set $i
    loop $19$
    local.get $i
    local.get $jk
    i32.ge_s
    i32.eqz
    br_if $20$
    block $21$
    local.get $j
    local.get $fp$
    local.get $i
    i32.const 4
    i32.mul
    i32.add
    i32.load offset=0 align=4
    i32.or
    local.set $j
    end $21$
    local.get $i
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    drop
    br $19$
    end $19$
    end $20$
    local.get $j
    i32.const 0
    i32.eq
    if
    block $23$
    i32.const 1
    local.set $k
    loop $22$
    local.get $fp$
    local.get $jk
    local.get $k
    i32.sub
    i32.const 4
    i32.mul
    i32.add
    i32.load offset=0 align=4
    i32.const 0
    i32.eq
    i32.eqz
    br_if $23$
    block $24$
    end $24$
    local.get $k
    local.get $k
    i32.const 1
    i32.add
    local.set $k
    drop
    br $22$
    end $22$
    end $23$
    block $26$
    local.get $jz
    i32.const 1
    i32.add
    local.set $i
    loop $25$
    local.get $i
    local.get $jz
    local.get $k
    i32.add
    i32.le_s
    i32.eqz
    br_if $26$
    block $27$
    local.get $fp$
    i32.const 80
    i32.add
    local.get $jx
    local.get $i
    i32.add
    i32.const 8
    i32.mul
    i32.add
    local.tee $i9$
    ref.data $math:two_over_pi
    local.get $jv
    local.get $i
    i32.add
    i32.const 4
    i32.mul
    i32.add
    i32.load offset=0 align=4
    f64.convert_i32_s
    f64.store offset=0 align=8
    block $29$
    i32.const 0
    local.set $j
    f64.const 0
    local.set $fw
    loop $28$
    local.get $j
    local.get $jx
    i32.le_s
    i32.eqz
    br_if $29$
    block $30$
    local.get $fw
    local.get $x
    local.get $j
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    local.get $fp$
    i32.const 80
    i32.add
    local.get $jx
    local.get $i
    i32.add
    local.get $j
    i32.sub
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    f64.mul
    f64.add
    local.set $fw
    end $30$
    local.get $j
    local.get $j
    i32.const 1
    i32.add
    local.set $j
    drop
    br $28$
    end $28$
    end $29$
    local.get $fp$
    i32.const 400
    i32.add
    local.get $i
    i32.const 8
    i32.mul
    i32.add
    local.tee $i10$
    local.get $fw
    f64.store offset=0 align=8
    end $27$
    local.get $i
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    drop
    br $25$
    end $25$
    end $26$
    local.get $jz
    local.get $k
    i32.add
    local.set $jz
    br $recompute
    end
    end
    end $recompute
    local.get $z
    f64.const 0
    f64.eq
    if
    local.get $jz
    i32.const 1
    i32.sub
    local.set $jz
    local.get $q0
    i32.const 24
    i32.sub
    local.set $q0
    block $31$
    loop $32$
    local.get $fp$
    local.get $jz
    i32.const 4
    i32.mul
    i32.add
    i32.load offset=0 align=4
    i32.const 0
    i32.eq
    if
    local.get $jz
    local.get $jz
    i32.const 1
    i32.sub
    local.set $jz
    drop
    local.get $q0
    i32.const 24
    i32.sub
    local.set $q0
    br $32$
    end
    end $32$
    end $31$
    else
    local.get $z
    i32.const 0
    local.get $q0
    i32.sub
    call $math:ieee754_scalbn
    local.tee $z
    f64.const 16777216
    f64.ge
    if
    f64.const 5.9604644775390625e-008
    local.get $z
    f64.mul
    i32.trunc_f64_s
    f64.convert_i32_s
    local.set $fw
    local.get $fp$
    local.get $jz
    i32.const 4
    i32.mul
    i32.add
    local.tee $i11$
    local.get $z
    f64.const 16777216
    local.get $fw
    f64.mul
    f64.sub
    i32.trunc_f64_s
    i32.store offset=0 align=4
    local.get $jz
    i32.const 1
    i32.add
    local.set $jz
    local.get $q0
    i32.const 24
    i32.add
    local.set $q0
    local.get $fp$
    local.get $jz
    i32.const 4
    i32.mul
    i32.add
    local.tee $i12$
    local.get $fw
    i32.trunc_f64_s
    i32.store offset=0 align=4
    else
    local.get $fp$
    local.get $jz
    i32.const 4
    i32.mul
    i32.add
    local.tee $i13$
    local.get $z
    i32.trunc_f64_s
    i32.store offset=0 align=4
    end
    end
    f64.const 1
    local.get $q0
    call $math:ieee754_scalbn
    local.set $fw
    block $34$
    local.get $jz
    local.set $i
    loop $33$
    local.get $i
    i32.const 0
    i32.ge_s
    i32.eqz
    br_if $34$
    block $35$
    local.get $fp$
    i32.const 400
    i32.add
    local.get $i
    i32.const 8
    i32.mul
    i32.add
    local.tee $i14$
    local.get $fw
    local.get $fp$
    local.get $i
    i32.const 4
    i32.mul
    i32.add
    i32.load offset=0 align=4
    f64.convert_i32_s
    f64.mul
    f64.store offset=0 align=8
    local.get $fw
    f64.const 5.9604644775390625e-008
    f64.mul
    local.set $fw
    end $35$
    local.get $i
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    drop
    br $33$
    end $33$
    end $34$
    block $37$
    local.get $jz
    local.set $i
    loop $36$
    local.get $i
    i32.const 0
    i32.ge_s
    i32.eqz
    br_if $37$
    block $38$
    block $40$
    f64.const 0
    local.set $fw
    i32.const 0
    local.set $k
    loop $39$
    local.get $k
    local.get $jp
    i32.le_s
    if (result i32)
    local.get $k
    local.get $jz
    local.get $i
    i32.sub
    i32.le_s
    else
    i32.const 0
    end
    i32.eqz
    br_if $40$
    block $41$
    local.get $fw
    ref.data $math:PIo2
    local.get $k
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    local.get $fp$
    i32.const 400
    i32.add
    local.get $i
    local.get $k
    i32.add
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    f64.mul
    f64.add
    local.set $fw
    end $41$
    local.get $k
    local.get $k
    i32.const 1
    i32.add
    local.set $k
    drop
    br $39$
    end $39$
    end $40$
    local.get $fp$
    i32.const 240
    i32.add
    local.get $jz
    local.get $i
    i32.sub
    i32.const 8
    i32.mul
    i32.add
    local.tee $i15$
    local.get $fw
    f64.store offset=0 align=8
    end $38$
    local.get $i
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    drop
    br $36$
    end $36$
    end $37$
    block $42$
    block $55$
    block $48$
    block $47$
    block $43$
    local.get $prec
    br_table $43$ $47$ $48$ $55$ $42$
    end $43$
    f64.const 0
    local.set $fw
    block $45$
    local.get $jz
    local.set $i
    loop $44$
    local.get $i
    i32.const 0
    i32.ge_s
    i32.eqz
    br_if $45$
    block $46$
    local.get $fw
    local.get $fp$
    i32.const 240
    i32.add
    local.get $i
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    f64.add
    local.set $fw
    end $46$
    local.get $i
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    drop
    br $44$
    end $44$
    end $45$
    local.get $y
    local.tee $i16$
    local.get $ih
    i32.const 0
    i32.eq
    if (result f64)
    local.get $fw
    else
    local.get $fw
    f64.neg
    end
    f64.store offset=0 align=8
    br $42$
    end $47$
    end $48$
    f64.const 0
    local.set $fv
    block $50$
    local.get $jz
    local.set $i
    loop $49$
    local.get $i
    i32.const 0
    i32.ge_s
    i32.eqz
    br_if $50$
    block $51$
    local.get $fv
    local.get $fp$
    i32.const 240
    i32.add
    local.get $i
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    f64.add
    local.set $fv
    end $51$
    local.get $i
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    drop
    br $49$
    end $49$
    end $50$
    local.get $y
    local.tee $i17$
    local.get $ih
    i32.const 0
    i32.eq
    if (result f64)
    local.get $fv
    else
    local.get $fv
    f64.neg
    end
    f64.store offset=0 align=8
    local.get $fp$
    f64.load offset=240 align=8
    local.get $fv
    f64.sub
    local.set $fv
    block $53$
    i32.const 1
    local.set $i
    loop $52$
    local.get $i
    local.get $jz
    i32.le_s
    i32.eqz
    br_if $53$
    block $54$
    local.get $fv
    local.get $fp$
    i32.const 240
    i32.add
    local.get $i
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    f64.add
    local.set $fv
    end $54$
    local.get $i
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    drop
    br $52$
    end $52$
    end $53$
    local.get $y
    i32.const 8
    i32.add
    local.tee $i18$
    local.get $ih
    i32.const 0
    i32.eq
    if (result f64)
    local.get $fv
    else
    local.get $fv
    f64.neg
    end
    f64.store offset=0 align=8
    br $42$
    end $55$
    block $57$
    local.get $jz
    local.set $i
    loop $56$
    local.get $i
    i32.const 0
    i32.gt_s
    i32.eqz
    br_if $57$
    block $58$
    local.get $fp$
    i32.const 240
    i32.add
    local.get $i
    i32.const 1
    i32.sub
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    local.get $fp$
    i32.const 240
    i32.add
    local.get $i
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    f64.add
    local.set $fv#20
    local.get $fp$
    i32.const 240
    i32.add
    local.get $i
    i32.const 8
    i32.mul
    i32.add
    local.tee $i19$
    local.get $i19$
    f64.load offset=0 align=8
    local.get $fp$
    i32.const 240
    i32.add
    local.get $i
    i32.const 1
    i32.sub
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    local.get $fv#20
    f64.sub
    f64.add
    f64.store offset=0 align=8
    local.get $fp$
    i32.const 240
    i32.add
    local.get $i
    i32.const 1
    i32.sub
    i32.const 8
    i32.mul
    i32.add
    local.tee $i20$
    local.get $fv#20
    f64.store offset=0 align=8
    end $58$
    local.get $i
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    drop
    br $56$
    end $56$
    end $57$
    block $60$
    local.get $jz
    local.set $i
    loop $59$
    local.get $i
    i32.const 1
    i32.gt_s
    i32.eqz
    br_if $60$
    block $61$
    local.get $fp$
    i32.const 240
    i32.add
    local.get $i
    i32.const 1
    i32.sub
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    local.get $fp$
    i32.const 240
    i32.add
    local.get $i
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    f64.add
    local.set $fv#21
    local.get $fp$
    i32.const 240
    i32.add
    local.get $i
    i32.const 8
    i32.mul
    i32.add
    local.tee $i21$
    local.get $i21$
    f64.load offset=0 align=8
    local.get $fp$
    i32.const 240
    i32.add
    local.get $i
    i32.const 1
    i32.sub
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    local.get $fv#21
    f64.sub
    f64.add
    f64.store offset=0 align=8
    local.get $fp$
    i32.const 240
    i32.add
    local.get $i
    i32.const 1
    i32.sub
    i32.const 8
    i32.mul
    i32.add
    local.tee $i22$
    local.get $fv#21
    f64.store offset=0 align=8
    end $61$
    local.get $i
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    drop
    br $59$
    end $59$
    end $60$
    block $63$
    f64.const 0
    local.set $fw
    local.get $jz
    local.set $i
    loop $62$
    local.get $i
    i32.const 2
    i32.ge_s
    i32.eqz
    br_if $63$
    block $64$
    local.get $fw
    local.get $fp$
    i32.const 240
    i32.add
    local.get $i
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    f64.add
    local.set $fw
    end $64$
    local.get $i
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    drop
    br $62$
    end $62$
    end $63$
    local.get $ih
    i32.const 0
    i32.eq
    if
    local.get $y
    local.tee $i23$
    local.get $fp$
    f64.load offset=240 align=8
    f64.store offset=0 align=8
    local.get $y
    i32.const 8
    i32.add
    local.tee $i24$
    local.get $fp$
    f64.load offset=248 align=8
    f64.store offset=0 align=8
    local.get $y
    i32.const 16
    i32.add
    local.tee $i25$
    local.get $fw
    f64.store offset=0 align=8
    else
    local.get $y
    local.tee $i26$
    local.get $fp$
    f64.load offset=240 align=8
    f64.neg
    f64.store offset=0 align=8
    local.get $y
    i32.const 8
    i32.add
    local.tee $i27$
    local.get $fp$
    f64.load offset=248 align=8
    f64.neg
    f64.store offset=0 align=8
    local.get $y
    i32.const 16
    i32.add
    local.tee $i28$
    local.get $fw
    f64.neg
    f64.store offset=0 align=8
    end
    end $42$
    local.get $n
    i32.const 7
    i32.and
    local.get $bp$
    global.set $env:__stack_pointer
    return
  )
  (func $math:ieee754_rem_pio2
    (param $x f64) (param $y i32) (result i32) 
    (local $z f64) (local $w f64) (local $t f64) (local $r f64) (local $fn f64) (local $e0 i32) (local $i i32) (local $j i32) (local $nx i32) (local $n i32) (local $ix i32) (local $hx i32) (local $low i32) (local $high i32) (local $bp$ i32) (local $fp$ i32) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) (local $i4$ i32) (local $i5$ i32) (local $i6$ i32) (local $i7$ i32) (local $i8$ i32) (local $i9$ i32) (local $i10$ i32) (local $i11$ i32) (local $i12$ i32) (local $i13$ i32) (local $i14$ i32) (local $i15$ i32) (local $i16$ i32) (local $i17$ i32) (local $i19$ i32) (local $i18$ i32) (local $i20$ i32) (local $i21$ i32) (local $i22$ i32) (local $i23$ i32) 
    global.get $env:__stack_pointer
    local.set $bp$
    global.get $env:__stack_pointer
    i32.const 32
    i32.sub
    global.set $env:__stack_pointer
    global.get $env:__stack_pointer
    local.set $fp$
    local.get $x
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.tee $hx
    i32.const 2147483647
    i32.and
    local.tee $ix
    i32.const 1072243195
    i32.le_s
    if
    local.get $y
    local.tee $i1$
    local.get $x
    f64.store offset=0 align=8
    local.get $y
    i32.const 8
    i32.add
    local.tee $i2$
    i32.const 0
    f64.convert_i32_s
    f64.store offset=0 align=8
    i32.const 0
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $ix
    i32.const 1073928572
    i32.lt_s
    if
    local.get $hx
    i32.const 0
    i32.gt_s
    if
    local.get $x
    f64.const 1.5707963267341256
    f64.sub
    local.set $z
    local.get $ix
    i32.const 1073291771
    i32.ne
    if
    local.get $y
    local.tee $i3$
    local.get $z
    f64.const 6.0771005065061922e-011
    f64.sub
    f64.store offset=0 align=8
    local.get $y
    i32.const 8
    i32.add
    local.tee $i4$
    local.get $z
    local.get $y
    f64.load offset=0 align=8
    f64.sub
    f64.const 6.0771005065061922e-011
    f64.sub
    f64.store offset=0 align=8
    else
    local.get $z
    f64.const 6.077100506303966e-011
    f64.sub
    local.set $z
    local.get $y
    local.tee $i5$
    local.get $z
    f64.const 2.0222662487959506e-021
    f64.sub
    f64.store offset=0 align=8
    local.get $y
    i32.const 8
    i32.add
    local.tee $i6$
    local.get $z
    local.get $y
    f64.load offset=0 align=8
    f64.sub
    f64.const 2.0222662487959506e-021
    f64.sub
    f64.store offset=0 align=8
    end
    i32.const 1
    local.get $bp$
    global.set $env:__stack_pointer
    return
    else
    local.get $x
    f64.const 1.5707963267341256
    f64.add
    local.set $z
    local.get $ix
    i32.const 1073291771
    i32.ne
    if
    local.get $y
    local.tee $i7$
    local.get $z
    f64.const 6.0771005065061922e-011
    f64.add
    f64.store offset=0 align=8
    local.get $y
    i32.const 8
    i32.add
    local.tee $i8$
    local.get $z
    local.get $y
    f64.load offset=0 align=8
    f64.sub
    f64.const 6.0771005065061922e-011
    f64.add
    f64.store offset=0 align=8
    else
    local.get $z
    f64.const 6.077100506303966e-011
    f64.add
    local.set $z
    local.get $y
    local.tee $i9$
    local.get $z
    f64.const 2.0222662487959506e-021
    f64.add
    f64.store offset=0 align=8
    local.get $y
    i32.const 8
    i32.add
    local.tee $i10$
    local.get $z
    local.get $y
    f64.load offset=0 align=8
    f64.sub
    f64.const 2.0222662487959506e-021
    f64.add
    f64.store offset=0 align=8
    end
    i32.const -1
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    end
    local.get $ix
    i32.const 1094263291
    i32.le_s
    if
    local.get $x
    i64.reinterpret_f64
    i64.const 9223372036854775807
    i64.and
    f64.reinterpret_i64
    local.tee $t
    f64.const 0.63661977236758138
    f64.mul
    f64.const 0.5
    f64.add
    i32.trunc_f64_s
    local.tee $n
    f64.convert_i32_s
    local.set $fn
    local.get $t
    local.get $fn
    f64.const 1.5707963267341256
    f64.mul
    f64.sub
    local.set $r
    local.get $fn
    f64.const 6.0771005065061922e-011
    f64.mul
    local.set $w
    local.get $n
    i32.const 32
    i32.lt_s
    if (result i32)
    local.get $ix
    ref.data $math:npio2_hw
    local.get $n
    i32.const 1
    i32.sub
    i32.const 4
    i32.mul
    i32.add
    i32.load offset=0 align=4
    i32.ne
    else
    i32.const 0
    end
    if
    local.get $y
    local.tee $i11$
    local.get $r
    local.get $w
    f64.sub
    f64.store offset=0 align=8
    else
    local.get $ix
    i32.const 20
    i32.shr_s
    local.set $j
    local.get $y
    local.tee $i12$
    local.get $r
    local.get $w
    f64.sub
    f64.store offset=0 align=8
    local.get $y
    f64.load offset=0 align=8
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $high
    local.get $j
    local.get $high
    i32.const 20
    i32.shr_u
    i32.const 2047
    i32.and
    i32.sub
    local.tee $i
    i32.const 16
    i32.gt_s
    if
    local.get $r
    local.set $t
    local.get $fn
    f64.const 6.077100506303966e-011
    f64.mul
    local.set $w
    local.get $t
    local.get $w
    f64.sub
    local.set $r
    local.get $fn
    f64.const 2.0222662487959506e-021
    f64.mul
    local.get $t
    local.get $r
    f64.sub
    local.get $w
    f64.sub
    f64.sub
    local.set $w
    local.get $y
    local.tee $i13$
    local.get $r
    local.get $w
    f64.sub
    f64.store offset=0 align=8
    local.get $y
    f64.load offset=0 align=8
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $high
    local.get $j
    local.get $high
    i32.const 20
    i32.shr_u
    i32.const 2047
    i32.and
    i32.sub
    local.tee $i
    i32.const 49
    i32.gt_s
    if
    local.get $r
    local.set $t
    local.get $fn
    f64.const 2.0222662487111665e-021
    f64.mul
    local.set $w
    local.get $t
    local.get $w
    f64.sub
    local.set $r
    local.get $fn
    f64.const 8.4784276603688996e-032
    f64.mul
    local.get $t
    local.get $r
    f64.sub
    local.get $w
    f64.sub
    f64.sub
    local.set $w
    local.get $y
    local.tee $i14$
    local.get $r
    local.get $w
    f64.sub
    f64.store offset=0 align=8
    end
    end
    end
    local.get $y
    i32.const 8
    i32.add
    local.tee $i15$
    local.get $r
    local.get $y
    f64.load offset=0 align=8
    f64.sub
    local.get $w
    f64.sub
    f64.store offset=0 align=8
    local.get $hx
    i32.const 0
    i32.lt_s
    if
    local.get $y
    local.tee $i16$
    local.get $y
    f64.load offset=0 align=8
    f64.neg
    f64.store offset=0 align=8
    local.get $y
    i32.const 8
    i32.add
    local.tee $i17$
    local.get $y
    f64.load offset=8 align=8
    f64.neg
    f64.store offset=0 align=8
    i32.const 0
    local.get $n
    i32.sub
    local.get $bp$
    global.set $env:__stack_pointer
    return
    else
    local.get $n
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    end
    local.get $ix
    i32.const 2146435072
    i32.ge_s
    if
    local.get $y
    local.tee $i19$
    local.get $y
    i32.const 8
    i32.add
    local.tee $i18$
    local.get $x
    local.get $x
    f64.sub
    f64.store offset=0 align=8
    local.get $i18$
    f64.load offset=0 align=8
    f64.store offset=0 align=8
    i32.const 0
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $x
    i64.reinterpret_f64
    i32.wrap_i64
    local.set $low
    local.get $ix
    i32.const 20
    i32.shr_s
    i32.const 1046
    i32.sub
    local.set $e0
    local.get $ix
    local.get $e0
    i32.const 20
    i32.shl
    i32.sub
    i64.extend_i32_s
    i32.const 32
    i64.extend_i32_s
    i64.shl
    local.get $low
    i64.extend_i32_u
    i64.const 4294967295
    i64.and
    i64.or
    f64.reinterpret_i64
    local.set $z
    block $2$
    i32.const 0
    local.set $i
    loop $1$
    local.get $i
    i32.const 2
    i32.lt_s
    i32.eqz
    br_if $2$
    block $3$
    local.get $fp$
    local.get $i
    i32.const 8
    i32.mul
    i32.add
    local.tee $i20$
    local.get $z
    i32.trunc_f64_s
    f64.convert_i32_s
    f64.store offset=0 align=8
    local.get $z
    local.get $fp$
    local.get $i
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    f64.sub
    f64.const 16777216
    f64.mul
    local.set $z
    end $3$
    local.get $i
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    drop
    br $1$
    end $1$
    end $2$
    local.get $fp$
    i32.const 16
    i32.add
    local.tee $i21$
    local.get $z
    f64.store offset=0 align=8
    i32.const 3
    local.set $nx
    block $4$
    loop $5$
    local.get $fp$
    local.get $nx
    i32.const 1
    i32.sub
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    f64.const 0
    f64.eq
    if
    local.get $nx
    i32.const 1
    i32.sub
    local.set $nx
    br $5$
    end
    end $5$
    end $4$
    local.get $fp$
    local.get $y
    local.get $e0
    local.get $nx
    i32.const 2
    call $math:__kernel_rem_pio2
    local.set $n
    local.get $hx
    i32.const 0
    i32.lt_s
    if
    local.get $y
    local.tee $i22$
    local.get $y
    f64.load offset=0 align=8
    f64.neg
    f64.store offset=0 align=8
    local.get $y
    i32.const 8
    i32.add
    local.tee $i23$
    local.get $y
    f64.load offset=8 align=8
    f64.neg
    f64.store offset=0 align=8
    i32.const 0
    local.get $n
    i32.sub
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    local.get $n
    local.get $bp$
    global.set $env:__stack_pointer
    return
  )
  (func $math:ieee754_sin
    (param $x f64) (result f64) 
    (local $z f64) (local $n i32) (local $ix i32) (local $bp$ i32) (local $fp$ i32) 
    global.get $env:__stack_pointer
    local.set $bp$
    global.get $env:__stack_pointer
    i32.const 16
    i32.sub
    global.set $env:__stack_pointer
    global.get $env:__stack_pointer
    local.set $fp$
    f64.const 0
    local.set $z
    local.get $x
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.tee $ix
    i32.const 2147483647
    i32.and
    local.tee $ix
    i32.const 1072243195
    i32.le_s
    if
    local.get $x
    local.get $z
    i32.const 0
    call $math:__kernel_sin
    local.get $bp$
    global.set $env:__stack_pointer
    return
    else
    local.get $ix
    i32.const 2146435072
    i32.ge_s
    if
    local.get $x
    local.get $x
    f64.sub
    local.get $bp$
    global.set $env:__stack_pointer
    return
    else
    local.get $x
    local.get $fp$
    call $math:ieee754_rem_pio2
    local.set $n
    block $1$
    block $5$
    block $4$
    block $3$
    block $2$
    local.get $n
    i32.const 3
    i32.and
    br_table $2$ $3$ $4$ $5$
    end $2$
    local.get $fp$
    f64.load offset=0 align=8
    local.get $fp$
    f64.load offset=8 align=8
    i32.const 1
    call $math:__kernel_sin
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end $3$
    local.get $fp$
    f64.load offset=0 align=8
    local.get $fp$
    f64.load offset=8 align=8
    call $math:__kernel_cos
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end $4$
    local.get $fp$
    f64.load offset=0 align=8
    local.get $fp$
    f64.load offset=8 align=8
    i32.const 1
    call $math:__kernel_sin
    f64.neg
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end $5$
    local.get $fp$
    f64.load offset=0 align=8
    local.get $fp$
    f64.load offset=8 align=8
    call $math:__kernel_cos
    f64.neg
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end $1$
    end
    end
    f64.const +nan
    local.get $bp$
    global.set $env:__stack_pointer
    return
  )
  (func $math:ieee754_cos
    (param $x f64) (result f64) 
    (local $z f64) (local $n i32) (local $ix i32) (local $bp$ i32) (local $fp$ i32) 
    global.get $env:__stack_pointer
    local.set $bp$
    global.get $env:__stack_pointer
    i32.const 16
    i32.sub
    global.set $env:__stack_pointer
    global.get $env:__stack_pointer
    local.set $fp$
    f64.const 0
    local.set $z
    local.get $x
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.tee $ix
    i32.const 2147483647
    i32.and
    local.tee $ix
    i32.const 1072243195
    i32.le_s
    if
    local.get $x
    local.get $z
    call $math:__kernel_cos
    local.get $bp$
    global.set $env:__stack_pointer
    return
    else
    local.get $ix
    i32.const 2146435072
    i32.ge_s
    if
    local.get $x
    local.get $x
    f64.sub
    local.get $bp$
    global.set $env:__stack_pointer
    return
    else
    local.get $x
    local.get $fp$
    call $math:ieee754_rem_pio2
    local.set $n
    block $1$
    block $5$
    block $4$
    block $3$
    block $2$
    local.get $n
    i32.const 3
    i32.and
    br_table $2$ $3$ $4$ $5$
    end $2$
    local.get $fp$
    f64.load offset=0 align=8
    local.get $fp$
    f64.load offset=8 align=8
    call $math:__kernel_cos
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end $3$
    local.get $fp$
    f64.load offset=0 align=8
    local.get $fp$
    f64.load offset=8 align=8
    i32.const 1
    call $math:__kernel_sin
    f64.neg
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end $4$
    local.get $fp$
    f64.load offset=0 align=8
    local.get $fp$
    f64.load offset=8 align=8
    call $math:__kernel_cos
    f64.neg
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end $5$
    local.get $fp$
    f64.load offset=0 align=8
    local.get $fp$
    f64.load offset=8 align=8
    i32.const 1
    call $math:__kernel_sin
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end $1$
    end
    end
    f64.const +nan
    local.get $bp$
    global.set $env:__stack_pointer
    return
  )
  (func $math:ieee754_tan
    (param $x f64) (result f64) 
    (local $z f64) (local $n i32) (local $ix i32) (local $bp$ i32) (local $fp$ i32) 
    global.get $env:__stack_pointer
    local.set $bp$
    global.get $env:__stack_pointer
    i32.const 16
    i32.sub
    global.set $env:__stack_pointer
    global.get $env:__stack_pointer
    local.set $fp$
    f64.const 0
    local.set $z
    local.get $x
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.tee $ix
    i32.const 2147483647
    i32.and
    local.tee $ix
    i32.const 1072243195
    i32.le_s
    if
    local.get $x
    local.get $z
    i32.const 1
    call $math:__kernel_tan
    local.get $bp$
    global.set $env:__stack_pointer
    return
    else
    local.get $ix
    i32.const 2146435072
    i32.ge_s
    if
    local.get $x
    local.get $x
    f64.sub
    local.get $bp$
    global.set $env:__stack_pointer
    return
    end
    end
    local.get $x
    local.get $fp$
    call $math:ieee754_rem_pio2
    local.set $n
    local.get $fp$
    f64.load offset=0 align=8
    local.get $fp$
    f64.load offset=8 align=8
    i32.const 1
    local.get $n
    i32.const 1
    i32.and
    i32.const 1
    i32.shl
    i32.sub
    call $math:__kernel_tan
    local.get $bp$
    global.set $env:__stack_pointer
    return
  )
  (func $math:ieee754_asin
    (param $x f64) (result f64) 
    (local $t f64) (local $w f64) (local $p f64) (local $q f64) (local $c f64) (local $r f64) (local $s f64) (local $hx i32) (local $ix i32) (local $lx i32) 
    local.get $x
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.tee $hx
    i32.const 2147483647
    i32.and
    local.tee $ix
    i32.const 1072693248
    i32.ge_s
    if
    local.get $x
    i64.reinterpret_f64
    i32.wrap_i64
    local.set $lx
    local.get $ix
    i32.const 1072693248
    i32.sub
    local.get $lx
    i32.or
    i32.const 0
    i32.eq
    if
    local.get $x
    f64.const 1.5707963267948966
    f64.mul
    local.get $x
    f64.const 6.123233995736766e-017
    f64.mul
    f64.add
    return
    end
    local.get $x
    local.get $x
    f64.sub
    local.get $x
    local.get $x
    f64.sub
    f64.div
    return
    else
    local.get $ix
    i32.const 1071644672
    i32.lt_s
    if
    local.get $ix
    i32.const 1044381696
    i32.lt_s
    if
    f64.const 1.0000000000000001e+300
    local.get $x
    f64.add
    f64.const 1
    f64.gt
    if
    local.get $x
    return
    end
    else
    local.get $x
    local.get $x
    f64.mul
    local.tee $t
    f64.const 0.16666666666666666
    local.get $t
    f64.const -0.32556581862240092
    local.get $t
    f64.const 0.20121253213486293
    local.get $t
    f64.const -0.040055534500679411
    local.get $t
    f64.const 0.00079153499428981453
    local.get $t
    f64.const 3.4793310759602117e-005
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    local.set $p
    f64.const 1
    local.get $t
    f64.const -2.4033949117344142
    local.get $t
    f64.const 2.0209457602335057
    local.get $t
    f64.const -0.68828397160545329
    local.get $t
    f64.const 0.077038150555901935
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    local.set $q
    local.get $p
    local.get $q
    f64.div
    local.set $w
    local.get $x
    local.get $x
    local.get $w
    f64.mul
    f64.add
    return
    end
    end
    end
    f64.const 1
    local.get $x
    i64.reinterpret_f64
    i64.const 9223372036854775807
    i64.and
    f64.reinterpret_i64
    f64.sub
    local.tee $w
    f64.const 0.5
    f64.mul
    local.tee $t
    f64.const 0.16666666666666666
    local.get $t
    f64.const -0.32556581862240092
    local.get $t
    f64.const 0.20121253213486293
    local.get $t
    f64.const -0.040055534500679411
    local.get $t
    f64.const 0.00079153499428981453
    local.get $t
    f64.const 3.4793310759602117e-005
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    local.set $p
    f64.const 1
    local.get $t
    f64.const -2.4033949117344142
    local.get $t
    f64.const 2.0209457602335057
    local.get $t
    f64.const -0.68828397160545329
    local.get $t
    f64.const 0.077038150555901935
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    local.set $q
    local.get $t
    call $math:ieee754_sqrt
    local.set $s
    local.get $ix
    i32.const 1072640819
    i32.ge_s
    if
    local.get $p
    local.get $q
    f64.div
    local.set $w
    f64.const 1.5707963267948966
    f64.const 2
    local.get $s
    local.get $s
    local.get $w
    f64.mul
    f64.add
    f64.mul
    f64.const 6.123233995736766e-017
    f64.sub
    f64.sub
    local.set $t
    else
    local.get $s
    local.tee $w
    i64.reinterpret_f64
    i64.const -4294967296
    i64.and
    i64.const 0
    i64.or
    f64.reinterpret_i64
    local.set $w
    local.get $t
    local.get $w
    local.get $w
    f64.mul
    f64.sub
    local.get $s
    local.get $w
    f64.add
    f64.div
    local.set $c
    local.get $p
    local.get $q
    f64.div
    local.set $r
    f64.const 2
    local.get $s
    f64.mul
    local.get $r
    f64.mul
    f64.const 6.123233995736766e-017
    f64.const 2
    local.get $c
    f64.mul
    f64.sub
    f64.sub
    local.set $p
    f64.const 0.78539816339744828
    f64.const 2
    local.get $w
    f64.mul
    f64.sub
    local.set $q
    f64.const 0.78539816339744828
    local.get $p
    local.get $q
    f64.sub
    f64.sub
    local.set $t
    end
    local.get $hx
    i32.const 0
    i32.gt_s
    if
    local.get $t
    return
    end
    local.get $t
    f64.neg
    return
  )
  (func $math:ieee754_acos
    (param $x f64) (result f64) 
    (local $z f64) (local $p f64) (local $q f64) (local $r f64) (local $w f64) (local $s f64) (local $c f64) (local $df f64) (local $hx i32) (local $ix i32) (local $lx i32) 
    local.get $x
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.tee $hx
    i32.const 2147483647
    i32.and
    local.tee $ix
    i32.const 1072693248
    i32.ge_s
    if
    local.get $x
    i64.reinterpret_f64
    i32.wrap_i64
    local.set $lx
    local.get $ix
    i32.const 1072693248
    i32.sub
    local.get $lx
    i32.or
    i32.const 0
    i32.eq
    if
    local.get $hx
    i32.const 0
    i32.gt_s
    if
    f64.const 0
    return
    else
    f64.const 3.1415926535897931
    return
    end
    end
    local.get $x
    local.get $x
    f64.sub
    local.get $x
    local.get $x
    f64.sub
    f64.div
    return
    end
    local.get $ix
    i32.const 1071644672
    i32.lt_s
    if
    local.get $ix
    i32.const 1012924416
    i32.le_s
    if
    f64.const 1.5707963267948966
    return
    end
    local.get $x
    local.get $x
    f64.mul
    local.tee $z
    f64.const 0.16666666666666666
    local.get $z
    f64.const -0.32556581862240092
    local.get $z
    f64.const 0.20121253213486293
    local.get $z
    f64.const -0.040055534500679411
    local.get $z
    f64.const 0.00079153499428981453
    local.get $z
    f64.const 3.4793310759602117e-005
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    local.set $p
    f64.const 1
    local.get $z
    f64.const -2.4033949117344142
    local.get $z
    f64.const 2.0209457602335057
    local.get $z
    f64.const -0.68828397160545329
    local.get $z
    f64.const 0.077038150555901935
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    local.set $q
    local.get $p
    local.get $q
    f64.div
    local.set $r
    f64.const 1.5707963267948966
    local.get $x
    f64.const 6.123233995736766e-017
    local.get $x
    local.get $r
    f64.mul
    f64.sub
    f64.sub
    f64.sub
    return
    else
    local.get $hx
    i32.const 0
    i32.lt_s
    if
    f64.const 1
    local.get $x
    f64.add
    f64.const 0.5
    f64.mul
    local.tee $z
    f64.const 0.16666666666666666
    local.get $z
    f64.const -0.32556581862240092
    local.get $z
    f64.const 0.20121253213486293
    local.get $z
    f64.const -0.040055534500679411
    local.get $z
    f64.const 0.00079153499428981453
    local.get $z
    f64.const 3.4793310759602117e-005
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    local.set $p
    f64.const 1
    local.get $z
    f64.const -2.4033949117344142
    local.get $z
    f64.const 2.0209457602335057
    local.get $z
    f64.const -0.68828397160545329
    local.get $z
    f64.const 0.077038150555901935
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    local.set $q
    local.get $z
    call $math:ieee754_sqrt
    local.set $s
    local.get $p
    local.get $q
    f64.div
    local.tee $r
    local.get $s
    f64.mul
    f64.const 6.123233995736766e-017
    f64.sub
    local.set $w
    f64.const 3.1415926535897931
    f64.const 2
    local.get $s
    local.get $w
    f64.add
    f64.mul
    f64.sub
    return
    else
    f64.const 1
    local.get $x
    f64.sub
    f64.const 0.5
    f64.mul
    local.tee $z
    call $math:ieee754_sqrt
    local.tee $s
    local.tee $df
    i64.reinterpret_f64
    i64.const -4294967296
    i64.and
    i64.const 0
    i64.or
    f64.reinterpret_i64
    local.set $df
    local.get $z
    local.get $df
    local.get $df
    f64.mul
    f64.sub
    local.get $s
    local.get $df
    f64.add
    f64.div
    local.set $c
    local.get $z
    f64.const 0.16666666666666666
    local.get $z
    f64.const -0.32556581862240092
    local.get $z
    f64.const 0.20121253213486293
    local.get $z
    f64.const -0.040055534500679411
    local.get $z
    f64.const 0.00079153499428981453
    local.get $z
    f64.const 3.4793310759602117e-005
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    local.set $p
    f64.const 1
    local.get $z
    f64.const -2.4033949117344142
    local.get $z
    f64.const 2.0209457602335057
    local.get $z
    f64.const -0.68828397160545329
    local.get $z
    f64.const 0.077038150555901935
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    local.set $q
    local.get $p
    local.get $q
    f64.div
    local.tee $r
    local.get $s
    f64.mul
    local.get $c
    f64.add
    local.set $w
    f64.const 2
    local.get $df
    local.get $w
    f64.add
    f64.mul
    return
    end
    end
    f64.const +nan
    return
  )
  (func $math:ieee754_atan
    (param $x f64) (result f64) 
    (local $w f64) (local $s1 f64) (local $s2 f64) (local $z f64) (local $ix i32) (local $hx i32) (local $id i32) (local $low i32) 
    local.get $x
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.tee $hx
    i32.const 2147483647
    i32.and
    local.tee $ix
    i32.const 1141899264
    i32.ge_s
    if
    local.get $x
    i64.reinterpret_f64
    i32.wrap_i64
    local.set $low
    local.get $ix
    i32.const 2146435072
    i32.gt_s
    if (result i32)
    i32.const 1
    else
    local.get $ix
    i32.const 2146435072
    i32.eq
    if (result i32)
    local.get $low
    i32.const 0
    i32.ne
    else
    i32.const 0
    end
    end
    if
    local.get $x
    local.get $x
    f64.add
    return
    end
    local.get $hx
    i32.const 0
    i32.gt_s
    if
    ref.data $math:atanhi
    f64.load offset=24 align=8
    ref.data $math:atanlo
    f64.load offset=24 align=8
    f64.add
    return
    else
    ref.data $math:atanhi
    f64.load offset=24 align=8
    f64.neg
    ref.data $math:atanlo
    f64.load offset=24 align=8
    f64.sub
    return
    end
    end
    local.get $ix
    i32.const 1071382528
    i32.lt_s
    if
    local.get $ix
    i32.const 1042284544
    i32.lt_s
    if
    f64.const 1.0000000000000001e+300
    local.get $x
    f64.add
    f64.const 1
    f64.gt
    if
    local.get $x
    return
    end
    end
    i32.const -1
    local.set $id
    else
    local.get $x
    i64.reinterpret_f64
    i64.const 9223372036854775807
    i64.and
    f64.reinterpret_i64
    local.set $x
    local.get $ix
    i32.const 1072889856
    i32.lt_s
    if
    local.get $ix
    i32.const 1072037888
    i32.lt_s
    if
    i32.const 0
    local.set $id
    f64.const 2
    local.get $x
    f64.mul
    f64.const 1
    f64.sub
    f64.const 2
    local.get $x
    f64.add
    f64.div
    local.set $x
    else
    i32.const 1
    local.set $id
    local.get $x
    f64.const 1
    f64.sub
    local.get $x
    f64.const 1
    f64.add
    f64.div
    local.set $x
    end
    else
    local.get $ix
    i32.const 1073971200
    i32.lt_s
    if
    i32.const 2
    local.set $id
    local.get $x
    f64.const 1.5
    f64.sub
    f64.const 1
    f64.const 1.5
    local.get $x
    f64.mul
    f64.add
    f64.div
    local.set $x
    else
    i32.const 3
    local.set $id
    f64.const -1
    local.get $x
    f64.div
    local.set $x
    end
    end
    end
    local.get $x
    local.get $x
    f64.mul
    local.tee $z
    local.get $z
    f64.mul
    local.set $w
    local.get $z
    ref.data $math:aT
    f64.load offset=0 align=8
    local.get $w
    ref.data $math:aT
    f64.load offset=16 align=8
    local.get $w
    ref.data $math:aT
    f64.load offset=32 align=8
    local.get $w
    ref.data $math:aT
    f64.load offset=48 align=8
    local.get $w
    ref.data $math:aT
    f64.load offset=64 align=8
    local.get $w
    ref.data $math:aT
    f64.load offset=80 align=8
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    local.set $s1
    local.get $w
    ref.data $math:aT
    f64.load offset=8 align=8
    local.get $w
    ref.data $math:aT
    f64.load offset=24 align=8
    local.get $w
    ref.data $math:aT
    f64.load offset=40 align=8
    local.get $w
    ref.data $math:aT
    f64.load offset=56 align=8
    local.get $w
    ref.data $math:aT
    f64.load offset=72 align=8
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    f64.add
    f64.mul
    local.set $s2
    local.get $id
    i32.const 0
    i32.lt_s
    if
    local.get $x
    local.get $x
    local.get $s1
    local.get $s2
    f64.add
    f64.mul
    f64.sub
    return
    end
    ref.data $math:atanhi
    local.get $id
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    local.get $x
    local.get $s1
    local.get $s2
    f64.add
    f64.mul
    ref.data $math:atanlo
    local.get $id
    i32.const 8
    i32.mul
    i32.add
    f64.load offset=0 align=8
    f64.sub
    local.get $x
    f64.sub
    f64.sub
    local.set $z
    local.get $hx
    i32.const 0
    i32.lt_s
    if (result f64)
    local.get $z
    f64.neg
    else
    local.get $z
    end
    return
  )
  (func $math:ieee754_atan2
    (param $y f64) (param $x f64) (result f64) 
    (local $z f64) (local $k i32) (local $m i32) (local $hx i32) (local $hy i32) (local $ix i32) (local $iy i32) (local $lx i32) (local $ly i32) (local $__t i64) (local $__t#10 i64) (local $zh i32) 
    local.get $x
    i64.reinterpret_f64
    local.tee $__t
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $hx
    local.get $__t
    i32.wrap_i64
    local.set $lx
    local.get $hx
    i32.const 2147483647
    i32.and
    local.set $ix
    local.get $y
    i64.reinterpret_f64
    local.tee $__t#10
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $hy
    local.get $__t#10
    i32.wrap_i64
    local.set $ly
    local.get $hy
    i32.const 2147483647
    i32.and
    local.set $iy
    local.get $ix
    local.get $lx
    i32.const 0
    local.get $lx
    i32.sub
    i32.or
    i32.const 31
    i32.shr_u
    i32.or
    i32.const 2146435072
    i32.gt_u
    if (result i32)
    i32.const 1
    else
    local.get $iy
    local.get $ly
    i32.const 0
    local.get $ly
    i32.sub
    i32.or
    i32.const 31
    i32.shr_u
    i32.or
    i32.const 2146435072
    i32.gt_u
    end
    if
    local.get $x
    local.get $y
    f64.add
    return
    end
    local.get $hx
    i32.const 1072693248
    i32.sub
    local.get $lx
    i32.or
    i32.const 0
    i32.eq
    if
    local.get $y
    call $math:ieee754_atan
    return
    end
    local.get $hy
    i32.const 31
    i32.shr_s
    i32.const 1
    i32.and
    local.get $hx
    i32.const 30
    i32.shr_s
    i32.const 2
    i32.and
    i32.or
    local.set $m
    local.get $iy
    local.get $ly
    i32.or
    i32.const 0
    i32.eq
    if
    block $1$
    block $5$
    block $4$
    block $3$
    block $2$
    local.get $m
    br_table $2$ $3$ $4$ $5$ $1$
    end $2$
    end $3$
    local.get $y
    return
    end $4$
    f64.const 3.1415926535897931
    return
    end $5$
    f64.const -3.1415926535897931
    return
    end $1$
    end
    local.get $ix
    local.get $lx
    i32.or
    i32.const 0
    i32.eq
    if
    f64.const -1.5707963267948966
    f64.const 1.5707963267948966
    local.get $hy
    i32.const 0
    i32.lt_s
    select
    return
    end
    local.get $ix
    i32.const 2146435072
    i32.eq
    if
    local.get $iy
    i32.const 2146435072
    i32.eq
    if
    block $6$
    block $10$
    block $9$
    block $8$
    block $7$
    local.get $m
    br_table $7$ $8$ $9$ $10$ $6$
    end $7$
    f64.const 0.78539816339744828
    return
    end $8$
    f64.const -0.78539816339744828
    return
    end $9$
    f64.const 2.3561944901923448
    return
    end $10$
    f64.const -2.3561944901923448
    return
    end $6$
    else
    block $11$
    block $15$
    block $14$
    block $13$
    block $12$
    local.get $m
    br_table $12$ $13$ $14$ $15$ $11$
    end $12$
    f64.const 0
    return
    end $13$
    f64.const -0
    return
    end $14$
    f64.const 3.1415926535897931
    return
    end $15$
    f64.const -3.1415926535897931
    return
    end $11$
    end
    end
    local.get $iy
    i32.const 2146435072
    i32.eq
    if
    f64.const -1.5707963267948966
    f64.const 1.5707963267948966
    local.get $hy
    i32.const 0
    i32.lt_s
    select
    return
    end
    local.get $iy
    local.get $ix
    i32.sub
    i32.const 20
    i32.shr_s
    local.tee $k
    i32.const 60
    i32.gt_s
    if
    f64.const 1.5707963267948966
    local.set $z
    else
    local.get $hx
    i32.const 0
    i32.lt_s
    if (result i32)
    local.get $k
    i32.const -60
    i32.lt_s
    else
    i32.const 0
    end
    if
    f64.const 0
    local.set $z
    else
    local.get $y
    local.get $x
    f64.div
    i64.reinterpret_f64
    i64.const 9223372036854775807
    i64.and
    f64.reinterpret_i64
    call $math:ieee754_atan
    local.set $z
    end
    end
    block $16$
    block $19$
    block $18$
    block $17$
    local.get $m
    br_table $17$ $18$ $19$ $16$
    end $17$
    local.get $z
    return
    end $18$
    local.get $z
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $zh
    local.get $z
    i64.reinterpret_f64
    i64.const 4294967295
    i64.and
    local.get $zh
    i32.const -2147483648
    i32.xor
    i64.extend_i32_u
    i32.const 32
    i64.extend_i32_s
    i64.shl
    i64.or
    f64.reinterpret_i64
    local.tee $z
    return
    end $19$
    f64.const 3.1415926535897931
    local.get $z
    f64.const 1.2246467991473532e-016
    f64.sub
    f64.sub
    return
    end $16$
    local.get $z
    f64.const 1.2246467991473532e-016
    f64.sub
    f64.const 3.1415926535897931
    f64.sub
    return
  )
  (func $math:ieee754_sinh
    (param $x f64) (result f64) 
    (local $t f64) (local $w f64) (local $h f64) (local $ix i32) (local $jx i32) (local $lx i32) 
    local.get $x
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.tee $jx
    i32.const 2147483647
    i32.and
    local.tee $ix
    i32.const 2146435072
    i32.ge_s
    if
    local.get $x
    local.get $x
    f64.add
    return
    end
    f64.const 0.5
    local.set $h
    local.get $jx
    i32.const 0
    i32.lt_s
    if
    local.get $h
    f64.neg
    local.set $h
    end
    local.get $ix
    i32.const 1077280768
    i32.lt_s
    if
    local.get $ix
    i32.const 1043333120
    i32.lt_s
    if
    f64.const 9.9999999999999999e+306
    local.get $x
    f64.add
    f64.const 1
    f64.gt
    if
    local.get $x
    return
    end
    end
    local.get $x
    i64.reinterpret_f64
    i64.const 9223372036854775807
    i64.and
    f64.reinterpret_i64
    call $math:ieee754_expm1
    local.set $t
    local.get $ix
    i32.const 1072693248
    i32.lt_s
    if
    local.get $h
    f64.const 2
    local.get $t
    f64.mul
    local.get $t
    local.get $t
    f64.mul
    local.get $t
    f64.const 1
    f64.add
    f64.div
    f64.sub
    f64.mul
    return
    end
    local.get $h
    local.get $t
    local.get $t
    local.get $t
    f64.const 1
    f64.add
    f64.div
    f64.add
    f64.mul
    return
    end
    local.get $ix
    i32.const 1082535490
    i32.lt_s
    if
    local.get $h
    local.get $x
    i64.reinterpret_f64
    i64.const 9223372036854775807
    i64.and
    f64.reinterpret_i64
    call $math:ieee754_exp
    f64.mul
    return
    end
    local.get $x
    i64.reinterpret_f64
    i32.wrap_i64
    local.set $lx
    local.get $ix
    i32.const 1082536910
    i32.lt_s
    if (result i32)
    i32.const 1
    else
    local.get $ix
    i32.const 1082536910
    i32.eq
    if (result i32)
    local.get $lx
    i32.const -1883637635
    i32.le_u
    else
    i32.const 0
    end
    end
    if
    f64.const 0.5
    local.get $x
    i64.reinterpret_f64
    i64.const 9223372036854775807
    i64.and
    f64.reinterpret_i64
    f64.mul
    call $math:ieee754_exp
    local.set $w
    local.get $h
    local.get $w
    f64.mul
    local.tee $t
    local.get $w
    f64.mul
    return
    end
    local.get $x
    f64.const 9.9999999999999999e+306
    f64.mul
    return
  )
  (func $math:ieee754_cosh
    (param $x f64) (result f64) 
    (local $t f64) (local $w f64) (local $ix i32) (local $lx i32) 
    local.get $x
    i64.reinterpret_f64
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.tee $ix
    i32.const 2147483647
    i32.and
    local.tee $ix
    i32.const 2146435072
    i32.ge_s
    if
    local.get $x
    local.get $x
    f64.mul
    return
    end
    local.get $ix
    i32.const 1077280768
    i32.lt_s
    if
    local.get $ix
    i32.const 1071001155
    i32.lt_s
    if
    local.get $x
    i64.reinterpret_f64
    i64.const 9223372036854775807
    i64.and
    f64.reinterpret_i64
    call $math:ieee754_expm1
    local.set $t
    f64.const 1
    local.get $t
    f64.add
    local.set $w
    local.get $ix
    i32.const 1015021568
    i32.lt_s
    if
    local.get $w
    return
    end
    f64.const 1
    local.get $t
    local.get $t
    f64.mul
    local.get $w
    local.get $w
    f64.add
    f64.div
    f64.add
    return
    end
    local.get $x
    i64.reinterpret_f64
    i64.const 9223372036854775807
    i64.and
    f64.reinterpret_i64
    call $math:ieee754_exp
    local.set $t
    f64.const 0.5
    local.get $t
    f64.mul
    f64.const 0.5
    local.get $t
    f64.div
    f64.add
    return
    end
    local.get $ix
    i32.const 1082535490
    i32.lt_s
    if
    f64.const 0.5
    local.get $x
    i64.reinterpret_f64
    i64.const 9223372036854775807
    i64.and
    f64.reinterpret_i64
    call $math:ieee754_exp
    f64.mul
    return
    end
    local.get $x
    i64.reinterpret_f64
    i32.wrap_i64
    local.set $lx
    local.get $ix
    i32.const 1082536910
    i32.lt_s
    if (result i32)
    i32.const 1
    else
    local.get $ix
    i32.const 1082536910
    i32.eq
    if (result i32)
    local.get $lx
    i32.const -1883637635
    i32.le_u
    else
    i32.const 0
    end
    end
    if
    f64.const 0.5
    local.get $x
    i64.reinterpret_f64
    i64.const 9223372036854775807
    i64.and
    f64.reinterpret_i64
    f64.mul
    call $math:ieee754_exp
    local.set $w
    f64.const 0.5
    local.get $w
    f64.mul
    local.tee $t
    local.get $w
    f64.mul
    return
    end
    f64.const +inf
    return
  )
  (func $math:ieee754_tanh
    (param $x f64) (result f64) 
    (local $t f64) (local $z f64) (local $jx i32) (local $ix i32) (local $lx i32) (local $__t i64) 
    local.get $x
    i64.reinterpret_f64
    local.tee $__t
    i32.const 32
    i64.extend_i32_s
    i64.shr_u
    i32.wrap_i64
    local.set $jx
    local.get $__t
    i32.wrap_i64
    local.set $lx
    local.get $jx
    i32.const 2147483647
    i32.and
    local.tee $ix
    i32.const 2146435072
    i32.ge_s
    if
    local.get $jx
    i32.const 0
    i32.ge_s
    if
    f64.const 1
    local.get $x
    f64.div
    f64.const 1
    f64.add
    return
    else
    f64.const 1
    local.get $x
    f64.div
    f64.const 1
    f64.sub
    return
    end
    end
    local.get $ix
    i32.const 1077280768
    i32.lt_s
    if
    local.get $ix
    local.get $lx
    i32.or
    i32.const 0
    i32.eq
    if
    local.get $x
    return
    end
    local.get $ix
    i32.const 1015021568
    i32.lt_s
    if
    local.get $x
    f64.const 1
    local.get $x
    f64.add
    f64.mul
    return
    end
    local.get $ix
    i32.const 1072693248
    i32.ge_s
    if
    f64.const 2
    local.get $x
    i64.reinterpret_f64
    i64.const 9223372036854775807
    i64.and
    f64.reinterpret_i64
    f64.mul
    call $math:ieee754_expm1
    local.set $t
    f64.const 1
    f64.const 2
    local.get $t
    f64.const 2
    f64.add
    f64.div
    f64.sub
    local.set $z
    else
    f64.const -2
    local.get $x
    i64.reinterpret_f64
    i64.const 9223372036854775807
    i64.and
    f64.reinterpret_i64
    f64.mul
    call $math:ieee754_expm1
    local.tee $t
    f64.neg
    local.get $t
    f64.const 2
    f64.add
    f64.div
    local.set $z
    end
    else
    f64.const 1
    local.set $z
    end
    local.get $jx
    i32.const 0
    i32.ge_s
    if (result f64)
    local.get $z
    else
    local.get $z
    f64.neg
    end
    return
  )
  (func $math:ceil (export "ceil")
    (param $x f64) (result f64) 
    local.get $x
    call $math:ieee754_ceil
    return
  )
  (func $math:floor (export "floor")
    (param $x f64) (result f64) 
    local.get $x
    call $math:ieee754_floor
    return
  )
  (func $math:round (export "round")
    (param $x f64) (result f64) 
    local.get $x
    call $math:ieee754_round
    return
  )
  (func $math:trunc (export "trunc")
    (param $x f64) (result f64) 
    local.get $x
    call $math:ieee754_trunc
    return
  )
  (func $math:frexp (export "frexp")
    (param $x f64) (param $eptr i32) (result f64) 
    local.get $x
    local.get $eptr
    call $math:ieee754_frexp
    return
  )
  (func $math:ldexp (export "ldexp")
    (param $x f64) (param $n i32) (result f64) 
    local.get $x
    local.get $n
    call $math:ieee754_scalbn
    return
  )
  (func $math:scalbn (export "scalbn")
    (param $x f64) (param $n i32) (result f64) 
    local.get $x
    local.get $n
    call $math:ieee754_scalbn
    return
  )
  (func $math:modf (export "modf")
    (param $x f64) (param $iptr i32) (result f64) 
    local.get $x
    local.get $iptr
    call $math:ieee754_modf
    return
  )
  (func $math:fmod (export "fmod")
    (param $x f64) (param $y f64) (result f64) 
    local.get $x
    local.get $y
    call $math:ieee754_fmod
    return
  )
  (func $math:fabs (export "fabs")
    (param $x f64) (result f64) 
    local.get $x
    i64.reinterpret_f64
    i64.const 9223372036854775807
    i64.and
    f64.reinterpret_i64
    return
  )
  (func $math:copysign (export "copysign")
    (param $x f64) (param $y f64) (result f64) 
    local.get $x
    i64.reinterpret_f64
    i64.const 9223372036854775807
    i64.and
    local.get $y
    i64.reinterpret_f64
    i64.const -9223372036854775808
    i64.and
    i64.or
    f64.reinterpret_i64
    return
  )
  (func $math:sqrt (export "sqrt")
    (param $x f64) (result f64) 
    local.get $x
    call $math:ieee754_sqrt
    return
  )
  (func $math:pow (export "pow")
    (param $x f64) (param $y f64) (result f64) 
    local.get $x
    local.get $y
    call $math:ieee754_pow
    return
  )
  (func $math:log (export "log")
    (param $x f64) (result f64) 
    local.get $x
    call $math:ieee754_log
    return
  )
  (func $math:log10 (export "log10")
    (param $x f64) (result f64) 
    local.get $x
    call $math:ieee754_log10
    return
  )
  (func $math:exp (export "exp")
    (param $x f64) (result f64) 
    local.get $x
    call $math:ieee754_exp
    return
  )
  (func $math:expm1 (export "expm1")
    (param $x f64) (result f64) 
    local.get $x
    call $math:ieee754_expm1
    return
  )
  (func $math:fmax (export "fmax")
    (param $x f64) (param $y f64) (result f64) 
    local.get $x
    local.get $y
    local.get $x
    local.get $y
    f64.ge
    if (result i32)
    i32.const 1
    else
    local.get $y
    call $math:isnan
    end
    select
    return
  )
  (func $math:fmin (export "fmin")
    (param $x f64) (param $y f64) (result f64) 
    local.get $x
    local.get $y
    local.get $x
    local.get $y
    f64.le
    if (result i32)
    i32.const 1
    else
    local.get $y
    call $math:isnan
    end
    select
    return
  )
  (func $math:sin (export "sin")
    (param $x f64) (result f64) 
    local.get $x
    call $math:ieee754_sin
    return
  )
  (func $math:cos (export "cos")
    (param $x f64) (result f64) 
    local.get $x
    call $math:ieee754_cos
    return
  )
  (func $math:tan (export "tan")
    (param $x f64) (result f64) 
    local.get $x
    call $math:ieee754_tan
    return
  )
  (func $math:asin (export "asin")
    (param $x f64) (result f64) 
    local.get $x
    call $math:ieee754_asin
    return
  )
  (func $math:acos (export "acos")
    (param $x f64) (result f64) 
    local.get $x
    call $math:ieee754_acos
    return
  )
  (func $math:atan (export "atan")
    (param $x f64) (result f64) 
    local.get $x
    call $math:ieee754_atan
    return
  )
  (func $math:atan2 (export "atan2")
    (param $y f64) (param $x f64) (result f64) 
    local.get $y
    local.get $x
    call $math:ieee754_atan2
    return
  )
  (func $math:sinh (export "sinh")
    (param $x f64) (result f64) 
    local.get $x
    call $math:ieee754_sinh
    return
  )
  (func $math:cosh (export "cosh")
    (param $x f64) (result f64) 
    local.get $x
    call $math:ieee754_cosh
    return
  )
  (func $math:tanh (export "tanh")
    (param $x f64) (result f64) 
    local.get $x
    call $math:ieee754_tanh
    return
  )
)
