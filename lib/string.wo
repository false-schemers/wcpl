(module $string
  (import "crt" "__stack_pointer" (global $crt:__stack_pointer (mut i32)))
  (import "crt" "__linear_memory" (memory $crt:__linear_memory 0))
  (import "crt" "__stack_pointer" (global $crt:__stack_pointer i32))
  (import "stdlib" "malloc" (func $stdlib:malloc (param i32) (result i32)))
  (import "errno" "_emsg" (global $errno:_emsg i32))
  (import "ctype" "toupper" (func $ctype:toupper (param i32) (result i32)))
  (import "ctype" "tolower" (func $ctype:tolower (param i32) (result i32)))
  (global $string:strtok_holder (mut i32))
  (data $string:ds33$ const align=1 "?unknown error\00")
  (func $string:bzero (export "bzero")
    (param $dst i32) (param $n i32) 
    local.get $dst
    i32.const 0
    local.get $n
    call $string:memset
    drop
    return
  )
  (func $string:memccpy (export "memccpy")
    (param $dst i32) (param $src i32) (param $c i32) (param $n i32) (result i32) 
    (local $q i32) (local $p i32) (local $ch i32) (local $i1$ i32) 
    local.get $dst
    local.set $q
    local.get $src
    local.set $p
    block $1$
    loop $2$
    local.get $n
    local.get $n
    i32.const 1
    i32.sub
    local.set $n
    if
    local.get $q
    local.get $q
    i32.const 1
    i32.add
    local.set $q
    local.tee $i1$
    local.get $p
    local.get $p
    i32.const 1
    i32.add
    local.set $p
    i32.load8_s offset=0 align=1
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    local.tee $ch
    i32.store8 offset=0 align=1
    local.get $ch
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    local.get $c
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    i32.eq
    if
    local.get $q
    return
    end
    br $2$
    end
    end $2$
    end $1$
    i32.const 0
    return
  )
  (func $string:memchr (export "memchr")
    (param $s i32) (param $c i32) (param $n i32) (result i32) 
    (local $sp i32) 
    local.get $s
    local.set $sp
    block $1$
    loop $2$
    local.get $n
    local.get $n
    i32.const 1
    i32.sub
    local.set $n
    if
    local.get $sp
    i32.load8_s offset=0 align=1
    local.get $c
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    i32.eq
    if
    local.get $sp
    return
    end
    local.get $sp
    local.get $sp
    i32.const 1
    i32.add
    local.set $sp
    drop
    br $2$
    end
    end $2$
    end $1$
    i32.const 0
    return
  )
  (func $string:memcmp (export "memcmp")
    (param $s1 i32) (param $s2 i32) (param $n i32) (result i32) 
    (local $c1 i32) (local $c2 i32) (local $d i32) 
    local.get $s1
    local.set $c1
    local.get $s2
    local.set $c2
    i32.const 0
    local.set $d
    block $1$
    loop $2$
    local.get $n
    local.get $n
    i32.const 1
    i32.sub
    local.set $n
    if
    local.get $c1
    local.get $c1
    i32.const 1
    i32.add
    local.set $c1
    i32.load8_s offset=0 align=1
    i32.const 255
    i32.and
    local.get $c2
    local.get $c2
    i32.const 1
    i32.add
    local.set $c2
    i32.load8_s offset=0 align=1
    i32.const 255
    i32.and
    i32.sub
    local.tee $d
    br_if $1$
    br $2$
    end
    end $2$
    end $1$
    local.get $d
    return
  )
  (func $string:memcpy (export "memcpy")
    (param $dst i32) (param $src i32) (param $n i32) (result i32) 
    (local $p i32) (local $q i32) (local $i1$ i32) 
    local.get $src
    local.set $p
    local.get $dst
    local.set $q
    block $1$
    loop $2$
    local.get $n
    local.get $n
    i32.const 1
    i32.sub
    local.set $n
    if
    local.get $q
    local.get $q
    i32.const 1
    i32.add
    local.set $q
    local.tee $i1$
    local.get $p
    local.get $p
    i32.const 1
    i32.add
    local.set $p
    i32.load8_s offset=0 align=1
    i32.store8 offset=0 align=1
    br $2$
    end
    end $2$
    end $1$
    local.get $dst
    return
  )
  (func $string:memmem (export "memmem")
    (param $haystack i32) (param $n i32) (param $needle i32) (param $m i32) (result i32) 
    (local $y i32) (local $x i32) (local $j i32) (local $k i32) (local $l i32) 
    local.get $haystack
    local.set $y
    local.get $needle
    local.set $x
    local.get $m
    local.get $n
    i32.gt_u
    if (result i32)
    i32.const 1
    else
    local.get $m
    i32.eqz
    end
    if (result i32)
    i32.const 1
    else
    local.get $n
    i32.eqz
    end
    if
    i32.const 0
    return
    end
    i32.const 1
    local.get $m
    i32.ne
    if
    local.get $x
    i32.load8_u offset=0 align=1
    local.get $x
    i32.load8_u offset=1 align=1
    i32.eq
    if
    i32.const 2
    local.set $k
    i32.const 1
    local.set $l
    else
    i32.const 1
    local.set $k
    i32.const 2
    local.set $l
    end
    i32.const 0
    local.set $j
    block $1$
    loop $2$
    local.get $j
    local.get $n
    local.get $m
    i32.sub
    i32.le_u
    if
    local.get $x
    i32.load8_u offset=1 align=1
    local.get $y
    local.get $j
    i32.const 1
    i32.add
    i32.add
    i32.load8_u offset=0 align=1
    i32.ne
    if
    local.get $j
    local.get $k
    i32.add
    local.set $j
    else
    local.get $x
    i32.const 2
    i32.add
    local.get $y
    local.get $j
    i32.add
    i32.const 2
    i32.add
    local.get $m
    i32.const 2
    i32.sub
    call $string:memcmp
    i32.eqz
    if (result i32)
    local.get $x
    i32.load8_u offset=0 align=1
    local.get $y
    local.get $j
    i32.add
    i32.load8_u offset=0 align=1
    i32.eq
    else
    i32.const 0
    end
    if
    local.get $y
    local.get $j
    i32.add
    return
    end
    local.get $j
    local.get $l
    i32.add
    local.set $j
    end
    br $2$
    end
    end $2$
    end $1$
    else
    block $4$
    loop $3$
    block $5$
    local.get $y
    i32.load8_u offset=0 align=1
    local.get $x
    i32.load8_u offset=0 align=1
    i32.eq
    if
    local.get $y
    return
    end
    local.get $y
    local.get $y
    i32.const 1
    i32.add
    local.set $y
    drop
    end $5$
    local.get $n
    i32.const 1
    i32.sub
    local.tee $n
    br_if $3$
    end $3$
    end $4$
    end
    i32.const 0
    return
  )
  (func $string:memmove (export "memmove")
    (param $dst i32) (param $src i32) (param $n i32) (result i32) 
    (local $p i32) (local $q i32) (local $i1$ i32) (local $i2$ i32) 
    local.get $src
    local.set $p
    local.get $dst
    local.tee $q
    local.get $p
    i32.lt_u
    if
    block $1$
    loop $2$
    local.get $n
    local.get $n
    i32.const 1
    i32.sub
    local.set $n
    if
    local.get $q
    local.get $q
    i32.const 1
    i32.add
    local.set $q
    local.tee $i1$
    local.get $p
    local.get $p
    i32.const 1
    i32.add
    local.set $p
    i32.load8_s offset=0 align=1
    i32.store8 offset=0 align=1
    br $2$
    end
    end $2$
    end $1$
    else
    local.get $p
    local.get $n
    i32.add
    local.set $p
    local.get $q
    local.get $n
    i32.add
    local.set $q
    block $3$
    loop $4$
    local.get $n
    local.get $n
    i32.const 1
    i32.sub
    local.set $n
    if
    local.get $q
    i32.const 1
    i32.sub
    local.tee $q
    local.tee $i2$
    local.get $p
    i32.const 1
    i32.sub
    local.tee $p
    i32.load8_s offset=0 align=1
    i32.store8 offset=0 align=1
    br $4$
    end
    end $4$
    end $3$
    end
    local.get $dst
    return
  )
  (func $string:memset (export "memset")
    (param $dst i32) (param $c i32) (param $n i32) (result i32) 
    (local $q i32) (local $i1$ i32) 
    local.get $dst
    local.set $q
    block $1$
    loop $2$
    local.get $n
    local.get $n
    i32.const 1
    i32.sub
    local.set $n
    if
    local.get $q
    local.get $q
    i32.const 1
    i32.add
    local.set $q
    local.tee $i1$
    local.get $c
    i32.store8 offset=0 align=1
    br $2$
    end
    end $2$
    end $1$
    local.get $dst
    return
  )
  (func $string:memswap (export "memswap")
    (param $m1 i32) (param $m2 i32) (param $n i32) 
    (local $p i32) (local $q i32) (local $tmp i32) (local $i1$ i32) (local $i2$ i32) 
    local.get $m1
    local.set $p
    local.get $m2
    local.set $q
    block $1$
    loop $2$
    local.get $n
    local.get $n
    i32.const 1
    i32.sub
    local.set $n
    if
    local.get $p
    i32.load8_s offset=0 align=1
    local.set $tmp
    local.get $p
    local.tee $i1$
    local.get $q
    i32.load8_s offset=0 align=1
    i32.store8 offset=0 align=1
    local.get $q
    local.tee $i2$
    local.get $tmp
    i32.store8 offset=0 align=1
    local.get $p
    local.get $p
    i32.const 1
    i32.add
    local.set $p
    drop
    local.get $q
    local.get $q
    i32.const 1
    i32.add
    local.set $q
    drop
    br $2$
    end
    end $2$
    end $1$
    return
  )
  (func $string:strcasecmp (export "strcasecmp")
    (param $s1 i32) (param $s2 i32) (result i32) 
    (local $c1 i32) (local $c2 i32) (local $ch i32) (local $d i32) 
    local.get $s1
    local.set $c1
    local.get $s2
    local.set $c2
    i32.const 0
    local.set $d
    block $1$
    loop $2$
    i32.const 1
    if
    local.get $c1
    local.get $c1
    i32.const 1
    i32.add
    local.set $c1
    i32.load8_u offset=0 align=1
    i32.const 255
    i32.and
    local.tee $ch
    call $ctype:tolower
    local.get $c2
    local.get $c2
    i32.const 1
    i32.add
    local.set $c2
    i32.load8_u offset=0 align=1
    call $ctype:tolower
    i32.sub
    local.tee $d
    if (result i32)
    i32.const 1
    else
    local.get $ch
    i32.const 255
    i32.and
    i32.eqz
    end
    br_if $1$
    br $2$
    end
    end $2$
    end $1$
    local.get $d
    return
  )
  (func $string:strcat (export "strcat")
    (param $dst i32) (param $src i32) (result i32) 
    local.get $dst
    i32.const 0
    call $string:strchr
    local.get $src
    call $string:strcpy
    drop
    local.get $dst
    return
  )
  (func $string:strchr (export "strchr")
    (param $s i32) (param $c i32) (result i32) 
    block $1$
    loop $2$
    local.get $s
    i32.load8_s offset=0 align=1
    local.get $c
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    i32.ne
    if
    local.get $s
    i32.load8_s offset=0 align=1
    i32.eqz
    if
    i32.const 0
    return
    end
    local.get $s
    local.get $s
    i32.const 1
    i32.add
    local.set $s
    drop
    br $2$
    end
    end $2$
    end $1$
    local.get $s
    return
  )
  (func $string:strcmp (export "strcmp")
    (param $s1 i32) (param $s2 i32) (result i32) 
    (local $c1 i32) (local $c2 i32) (local $ch i32) (local $d i32) 
    local.get $s1
    local.set $c1
    local.get $s2
    local.set $c2
    i32.const 0
    local.set $d
    block $1$
    loop $2$
    i32.const 1
    if
    local.get $c1
    local.get $c1
    i32.const 1
    i32.add
    local.set $c1
    i32.load8_u offset=0 align=1
    i32.const 255
    i32.and
    local.tee $ch
    local.get $c2
    local.get $c2
    i32.const 1
    i32.add
    local.set $c2
    i32.load8_u offset=0 align=1
    i32.sub
    local.tee $d
    if (result i32)
    i32.const 1
    else
    local.get $ch
    i32.const 255
    i32.and
    i32.eqz
    end
    br_if $1$
    br $2$
    end
    end $2$
    end $1$
    local.get $d
    return
  )
  (func $string:strcpy (export "strcpy")
    (param $dst i32) (param $src i32) (result i32) 
    (local $q i32) (local $ch i32) (local $p i32) (local $i1$ i32) 
    local.get $dst
    local.set $q
    local.get $src
    local.set $p
    block $2$
    loop $1$
    block $3$
    local.get $q
    local.get $q
    i32.const 1
    i32.add
    local.set $q
    local.tee $i1$
    local.get $p
    local.get $p
    i32.const 1
    i32.add
    local.set $p
    i32.load8_s offset=0 align=1
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    local.tee $ch
    i32.store8 offset=0 align=1
    end $3$
    local.get $ch
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    i32.const 0
    i32.ne
    br_if $1$
    end $1$
    end $2$
    local.get $dst
    return
  )
  (func $string:strcspn (export "strcspn")
    (param $s1 i32) (param $s2 i32) (result i32) 
    (local $s i32) (local $c i32) 
    local.get $s1
    local.set $s
    block $1$
    loop $2$
    local.get $s1
    i32.load8_s offset=0 align=1
    if
    block $4$
    local.get $s2
    local.set $c
    loop $3$
    local.get $c
    i32.load8_s offset=0 align=1
    i32.eqz
    br_if $4$
    block $5$
    local.get $s1
    i32.load8_s offset=0 align=1
    local.get $c
    i32.load8_s offset=0 align=1
    i32.eq
    br_if $4$
    end $5$
    local.get $c
    local.get $c
    i32.const 1
    i32.add
    local.set $c
    drop
    br $3$
    end $3$
    end $4$
    local.get $c
    i32.load8_s offset=0 align=1
    br_if $1$
    local.get $s1
    local.get $s1
    i32.const 1
    i32.add
    local.set $s1
    drop
    br $2$
    end
    end $2$
    end $1$
    local.get $s1
    local.get $s
    i32.sub
    return
  )
  (func $string:strdup (export "strdup")
    (param $s i32) (result i32) 
    (local $l i32) (local $d i32) 
    local.get $s
    call $string:strlen
    i32.const 1
    i32.add
    local.tee $l
    call $stdlib:malloc
    local.tee $d
    i32.const 0
    i32.ne
    if
    local.get $d
    local.get $s
    local.get $l
    call $string:memcpy
    drop
    end
    local.get $d
    return
  )
  (func $string:strlen (export "strlen")
    (param $s i32) (result i32) 
    (local $ss i32) 
    local.get $s
    local.set $ss
    block $1$
    loop $2$
    local.get $ss
    i32.load8_s offset=0 align=1
    if
    local.get $ss
    local.get $ss
    i32.const 1
    i32.add
    local.set $ss
    drop
    br $2$
    end
    end $2$
    end $1$
    local.get $ss
    local.get $s
    i32.sub
    return
  )
  (func $string:strncasecmp (export "strncasecmp")
    (param $s1 i32) (param $s2 i32) (param $n i32) (result i32) 
    (local $c1 i32) (local $c2 i32) (local $ch i32) (local $d i32) 
    local.get $s1
    local.set $c1
    local.get $s2
    local.set $c2
    i32.const 0
    local.set $d
    block $1$
    loop $2$
    local.get $n
    local.get $n
    i32.const 1
    i32.sub
    local.set $n
    if
    local.get $c1
    local.get $c1
    i32.const 1
    i32.add
    local.set $c1
    i32.load8_u offset=0 align=1
    i32.const 255
    i32.and
    local.tee $ch
    call $ctype:toupper
    local.get $c2
    local.get $c2
    i32.const 1
    i32.add
    local.set $c2
    i32.load8_u offset=0 align=1
    call $ctype:toupper
    i32.sub
    local.tee $d
    if (result i32)
    i32.const 1
    else
    local.get $ch
    i32.const 255
    i32.and
    i32.eqz
    end
    br_if $1$
    br $2$
    end
    end $2$
    end $1$
    local.get $d
    return
  )
  (func $string:strncat (export "strncat")
    (param $dst i32) (param $src i32) (param $n i32) (result i32) 
    (local $q i32) (local $p i32) (local $ch i32) (local $i1$ i32) (local $i2$ i32) 
    local.get $dst
    i32.const 0
    call $string:strchr
    local.set $q
    local.get $src
    local.set $p
    block $1$
    loop $2$
    local.get $n
    local.get $n
    i32.const 1
    i32.sub
    local.set $n
    if
    local.get $q
    local.get $q
    i32.const 1
    i32.add
    local.set $q
    local.tee $i1$
    local.get $p
    local.get $p
    i32.const 1
    i32.add
    local.set $p
    i32.load8_s offset=0 align=1
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    local.tee $ch
    i32.store8 offset=0 align=1
    local.get $ch
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    i32.eqz
    if
    local.get $dst
    return
    end
    br $2$
    end
    end $2$
    end $1$
    local.get $q
    local.tee $i2$
    i32.const 0
    i32.store8 offset=0 align=1
    local.get $dst
    return
  )
  (func $string:strncmp (export "strncmp")
    (param $s1 i32) (param $s2 i32) (param $n i32) (result i32) 
    (local $c1 i32) (local $c2 i32) (local $ch i32) (local $d i32) 
    local.get $s1
    local.set $c1
    local.get $s2
    local.set $c2
    i32.const 0
    local.set $d
    block $1$
    loop $2$
    local.get $n
    local.get $n
    i32.const 1
    i32.sub
    local.set $n
    if
    local.get $c1
    local.get $c1
    i32.const 1
    i32.add
    local.set $c1
    i32.load8_u offset=0 align=1
    i32.const 255
    i32.and
    local.tee $ch
    local.get $c2
    local.get $c2
    i32.const 1
    i32.add
    local.set $c2
    i32.load8_u offset=0 align=1
    i32.sub
    local.tee $d
    if (result i32)
    i32.const 1
    else
    local.get $ch
    i32.const 255
    i32.and
    i32.eqz
    end
    br_if $1$
    br $2$
    end
    end $2$
    end $1$
    local.get $d
    return
  )
  (func $string:strncpy (export "strncpy")
    (param $dst i32) (param $src i32) (param $n i32) (result i32) 
    (local $ch i32) (local $q i32) (local $p i32) (local $i1$ i32) 
    local.get $dst
    local.set $q
    local.get $src
    local.set $p
    block $1$
    loop $2$
    local.get $n
    if
    local.get $n
    local.get $n
    i32.const 1
    i32.sub
    local.set $n
    drop
    local.get $q
    local.get $q
    i32.const 1
    i32.add
    local.set $q
    local.tee $i1$
    local.get $p
    local.get $p
    i32.const 1
    i32.add
    local.set $p
    i32.load8_s offset=0 align=1
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    local.tee $ch
    i32.store8 offset=0 align=1
    local.get $ch
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    i32.eqz
    br_if $1$
    br $2$
    end
    end $2$
    end $1$
    local.get $q
    i32.const 0
    local.get $n
    call $string:memset
    drop
    local.get $dst
    return
  )
  (func $string:strndup (export "strndup")
    (param $s i32) (param $n i32) (result i32) 
    (local $sl i32) (local $l i32) (local $d i32) (local $i1$ i32) 
    local.get $s
    call $string:strlen
    local.tee $sl
    local.get $n
    local.get $n
    local.get $sl
    i32.gt_u
    select
    i32.const 1
    i32.add
    local.tee $l
    call $stdlib:malloc
    local.tee $d
    i32.eqz
    if
    i32.const 0
    return
    end
    local.get $d
    local.get $s
    local.get $l
    call $string:memcpy
    drop
    local.get $d
    local.get $n
    i32.add
    local.tee $i1$
    i32.const 0
    i32.store8 offset=0 align=1
    local.get $d
    return
  )
  (func $string:strnlen (export "strnlen")
    (param $s i32) (param $maxlen i32) (result i32) 
    (local $ss i32) 
    local.get $s
    local.set $ss
    block $1$
    loop $2$
    local.get $maxlen
    i32.const 0
    i32.gt_u
    if (result i32)
    local.get $ss
    i32.load8_s offset=0 align=1
    else
    i32.const 0
    end
    if
    local.get $ss
    local.get $ss
    i32.const 1
    i32.add
    local.set $ss
    drop
    local.get $maxlen
    local.get $maxlen
    i32.const 1
    i32.sub
    local.set $maxlen
    drop
    br $2$
    end
    end $2$
    end $1$
    local.get $ss
    local.get $s
    i32.sub
    return
  )
  (func $string:strpbrk (export "strpbrk")
    (param $s1 i32) (param $s2 i32) (result i32) 
    (local $c i32) 
    local.get $s2
    local.set $c
    local.get $s1
    i32.load8_s offset=0 align=1
    i32.eqz
    if
    i32.const 0
    return
    end
    block $1$
    loop $2$
    local.get $s1
    i32.load8_s offset=0 align=1
    if
    block $4$
    local.get $s2
    local.set $c
    loop $3$
    local.get $c
    i32.load8_s offset=0 align=1
    i32.eqz
    br_if $4$
    block $5$
    local.get $s1
    i32.load8_s offset=0 align=1
    local.get $c
    i32.load8_s offset=0 align=1
    i32.eq
    br_if $4$
    end $5$
    local.get $c
    local.get $c
    i32.const 1
    i32.add
    local.set $c
    drop
    br $3$
    end $3$
    end $4$
    local.get $c
    i32.load8_s offset=0 align=1
    br_if $1$
    local.get $s1
    local.get $s1
    i32.const 1
    i32.add
    local.set $s1
    drop
    br $2$
    end
    end $2$
    end $1$
    local.get $c
    i32.load8_s offset=0 align=1
    i32.const 0
    i32.eq
    if
    i32.const 0
    local.set $s1
    end
    local.get $s1
    return
  )
  (func $string:strrchr (export "strrchr")
    (param $s i32) (param $c i32) (result i32) 
    (local $found i32) 
    i32.const 0
    local.set $found
    block $1$
    loop $2$
    local.get $s
    i32.load8_s offset=0 align=1
    if
    local.get $s
    i32.load8_s offset=0 align=1
    local.get $c
    i32.const 24
    i32.shl
    i32.const 24
    i32.shr_s
    i32.extend8_s
    i32.eq
    if
    local.get $s
    local.set $found
    end
    local.get $s
    local.get $s
    i32.const 1
    i32.add
    local.set $s
    drop
    br $2$
    end
    end $2$
    end $1$
    local.get $found
    return
  )
  (func $string:strspn (export "strspn")
    (param $s1 i32) (param $s2 i32) (result i32) 
    (local $s i32) (local $c i32) 
    local.get $s1
    local.set $s
    block $1$
    loop $2$
    local.get $s1
    i32.load8_s offset=0 align=1
    if
    block $4$
    local.get $s2
    local.set $c
    loop $3$
    local.get $c
    i32.load8_s offset=0 align=1
    i32.eqz
    br_if $4$
    block $5$
    local.get $s1
    i32.load8_s offset=0 align=1
    local.get $c
    i32.load8_s offset=0 align=1
    i32.eq
    br_if $4$
    end $5$
    local.get $c
    local.get $c
    i32.const 1
    i32.add
    local.set $c
    drop
    br $3$
    end $3$
    end $4$
    local.get $c
    i32.load8_s offset=0 align=1
    i32.const 0
    i32.eq
    br_if $1$
    local.get $s1
    local.get $s1
    i32.const 1
    i32.add
    local.set $s1
    drop
    br $2$
    end
    end $2$
    end $1$
    local.get $s1
    local.get $s
    i32.sub
    return
  )
  (func $string:strstr (export "strstr")
    (param $haystack i32) (param $needle i32) (result i32) 
    local.get $haystack
    local.get $haystack
    call $string:strlen
    local.get $needle
    local.get $needle
    call $string:strlen
    call $string:memmem
    return
  )
  (func $string:strsep
    (param $stringp i32) (param $delim i32) (result i32) 
    (local $s i32) (local $e i32) (local $i1$ i32) (local $i2$ i32) 
    local.get $stringp
    i32.load offset=0 align=4
    local.tee $s
    i32.eqz
    if
    i32.const 0
    return
    end
    local.get $s
    local.get $delim
    call $string:strpbrk
    local.tee $e
    i32.const 0
    i32.ne
    if
    local.get $e
    local.get $e
    i32.const 1
    i32.add
    local.set $e
    local.tee $i1$
    i32.const 0
    i32.store8 offset=0 align=1
    end
    local.get $stringp
    local.tee $i2$
    local.get $e
    i32.store offset=0 align=4
    local.get $s
    return
  )
  (func $string:strtok_r (export "strtok_r")
    (param $s i32) (param $delim i32) (param $holder i32) (result i32) 
    (local $i1$ i32) 
    local.get $s
    i32.const 0
    i32.ne
    if
    local.get $holder
    local.tee $i1$
    local.get $s
    i32.store offset=0 align=4
    end
    block $2$
    loop $1$
    block $3$
    local.get $holder
    local.get $delim
    call $string:strsep
    local.set $s
    end $3$
    local.get $s
    i32.const 0
    i32.ne
    if (result i32)
    local.get $s
    i32.load8_s offset=0 align=1
    i32.eqz
    else
    i32.const 0
    end
    br_if $1$
    end $1$
    end $2$
    local.get $s
    return
  )
  (func $string:strtok (export "strtok")
    (param $s i32) (param $delim i32) (result i32) 
    (local $bp$ i32) (local $fp$ i32) (local $i1$ i32) 
    global.get $crt:__stack_pointer
    local.set $bp$
    global.get $crt:__stack_pointer
    i32.const 16
    i32.sub
    global.set $crt:__stack_pointer
    global.get $crt:__stack_pointer
    local.tee $fp$
    local.tee $i1$
    local.get $s
    global.get $string:strtok_holder
    local.get $s
    i32.const 0
    i32.ne
    select
    i32.store offset=0 align=4
    block $2$
    loop $1$
    block $3$
    local.get $fp$
    local.get $delim
    call $string:strsep
    local.set $s
    end $3$
    local.get $s
    i32.const 0
    i32.ne
    if (result i32)
    local.get $s
    i32.load8_s offset=0 align=1
    i32.eqz
    else
    i32.const 0
    end
    br_if $1$
    end $1$
    end $2$
    local.get $fp$
    i32.load offset=0 align=4
    global.set $string:strtok_holder
    local.get $s
    local.get $bp$
    global.set $crt:__stack_pointer
    return
  )
  (func $string:strcoll (export "strcoll")
    (param $s1 i32) (param $s2 i32) (result i32) 
    local.get $s1
    local.get $s2
    call $string:strcmp
    return
  )
  (func $string:strxfrm (export "strxfrm")
    (param $dest i32) (param $src i32) (param $n i32) (result i32) 
    local.get $dest
    local.get $src
    local.get $n
    call $string:strncpy
    drop
    local.get $src
    call $string:strlen
    return
  )
  (func $string:strerror (export "strerror")
    (param $errno i32) (result i32) 
    local.get $errno
    i32.const 0
    i32.lt_s
    if (result i32)
    i32.const 1
    else
    local.get $errno
    i32.const 76
    i32.gt_s
    end
    if
    ref.data $string:ds33$
    return
    end
    ref.data $errno:_emsg
    local.get $errno
    i32.const 4
    i32.mul
    i32.add
    i32.load offset=0 align=4
    return
  )
)
