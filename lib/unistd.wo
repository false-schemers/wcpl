(module $unistd
  (import "env" "__stack_pointer" (global $env:__stack_pointer (mut i32)))
  (import "env" "__linear_memory" (memory $env:__linear_memory 0))
  (import "wasi_snapshot_preview1" "fd_read" (func $wasi_snapshot_preview1:fd_read (param i32) (param i32) (param i32) (param i32) (result i32)))
  (import "wasi_snapshot_preview1" "fd_write" (func $wasi_snapshot_preview1:fd_write (param i32) (param i32) (param i32) (param i32) (result i32)))
  (import "wasi_snapshot_preview1" "fd_close" (func $wasi_snapshot_preview1:fd_close (param i32) (result i32)))
  (import "wasi_snapshot_preview1" "fd_datasync" (func $wasi_snapshot_preview1:fd_datasync (param i32) (result i32)))
  (import "wasi_snapshot_preview1" "fd_fdstat_get" (func $wasi_snapshot_preview1:fd_fdstat_get (param i32) (param i32) (result i32)))
  (import "wasi_snapshot_preview1" "fd_filestat_set_size" (func $wasi_snapshot_preview1:fd_filestat_set_size (param i32) (param i64) (result i32)))
  (import "wasi_snapshot_preview1" "fd_pread" (func $wasi_snapshot_preview1:fd_pread (param i32) (param i32) (param i32) (param i64) (param i32) (result i32)))
  (import "wasi_snapshot_preview1" "fd_pwrite" (func $wasi_snapshot_preview1:fd_pwrite (param i32) (param i32) (param i32) (param i64) (param i32) (result i32)))
  (import "wasi_snapshot_preview1" "fd_seek" (func $wasi_snapshot_preview1:fd_seek (param i32) (param i64) (param i32) (param i32) (result i32)))
  (import "wasi_snapshot_preview1" "fd_sync" (func $wasi_snapshot_preview1:fd_sync (param i32) (result i32)))
  (import "wasi_snapshot_preview1" "path_filestat_get" (func $wasi_snapshot_preview1:path_filestat_get (param i32) (param i32) (param i32) (param i32) (param i32) (result i32)))
  (import "wasi_snapshot_preview1" "path_link" (func $wasi_snapshot_preview1:path_link (param i32) (param i32) (param i32) (param i32) (param i32) (param i32) (param i32) (result i32)))
  (import "wasi_snapshot_preview1" "path_readlink" (func $wasi_snapshot_preview1:path_readlink (param i32) (param i32) (param i32) (param i32) (param i32) (param i32) (result i32)))
  (import "wasi_snapshot_preview1" "path_remove_directory" (func $wasi_snapshot_preview1:path_remove_directory (param i32) (param i32) (param i32) (result i32)))
  (import "wasi_snapshot_preview1" "path_symlink" (func $wasi_snapshot_preview1:path_symlink (param i32) (param i32) (param i32) (param i32) (param i32) (result i32)))
  (import "wasi_snapshot_preview1" "path_unlink_file" (func $wasi_snapshot_preview1:path_unlink_file (param i32) (param i32) (param i32) (result i32)))
  (import "wasi_snapshot_preview1" "proc_exit" (func $wasi_snapshot_preview1:proc_exit (param i32)))
  (import "string" "strlen" (func $string:strlen (param i32) (result i32)))
  (import "errno" "errno" (global $errno:errno i32))
  (import "fcntl" "find_relpath" (func $fcntl:find_relpath (param i32) (param i32) (result i32)))
  (func $unistd:read (export "read")
    (param $fd i32) (param $buf i32) (param $nbyte i32) (result i32) 
    (local $err i32) (local $fp$ i32) (local $i1$ i32) (local $i2$ i32) 
    global.get $env:__stack_pointer
    global.get $env:__stack_pointer
    i32.const 16
    i32.sub
    global.set $env:__stack_pointer
    local.tee $fp$
    local.tee $i1$
    local.get $buf
    i32.store offset=0 align=4
    local.get $fp$
    i32.const 4
    i32.add
    local.tee $i2$
    local.get $nbyte
    i32.store offset=0 align=4
    local.get $fd
    local.get $fp$
    i32.const 1
    local.get $fp$
    i32.const 8
    i32.add
    call $wasi_snapshot_preview1:fd_read
    local.tee $err
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $err
    i32.const 65535
    i32.and
    i32.const 76
    i32.eq
    if (result i32)
    i32.const 8
    else
    local.get $err
    i32.const 65535
    i32.and
    end
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    return
    end
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $fp$
    i32.load offset=8 align=4
    return
  )
  (func $unistd:write (export "write")
    (param $fd i32) (param $buf i32) (param $nbyte i32) (result i32) 
    (local $err i32) (local $fp$ i32) (local $i1$ i32) (local $i2$ i32) 
    global.get $env:__stack_pointer
    global.get $env:__stack_pointer
    i32.const 16
    i32.sub
    global.set $env:__stack_pointer
    local.tee $fp$
    local.tee $i1$
    local.get $buf
    i32.store offset=0 align=4
    local.get $fp$
    i32.const 4
    i32.add
    local.tee $i2$
    local.get $nbyte
    i32.store offset=0 align=4
    local.get $fd
    local.get $fp$
    i32.const 1
    local.get $fp$
    i32.const 8
    i32.add
    call $wasi_snapshot_preview1:fd_write
    local.tee $err
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $err
    i32.const 65535
    i32.and
    i32.const 76
    i32.eq
    if (result i32)
    i32.const 8
    else
    local.get $err
    i32.const 65535
    i32.and
    end
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    return
    end
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $fp$
    i32.load offset=8 align=4
    return
  )
  (func $unistd:pread (export "pread")
    (param $fd i32) (param $buf i32) (param $nbyte i32) (param $offset i64) (result i32) 
    (local $err i32) (local $fp$ i32) (local $i1$ i32) (local $i2$ i32) 
    global.get $env:__stack_pointer
    global.get $env:__stack_pointer
    i32.const 48
    i32.sub
    global.set $env:__stack_pointer
    local.set $fp$
    local.get $offset
    i32.const 0
    i64.extend_i32_s
    i64.lt_s
    if
    i32.const 28
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    return
    end
    local.get $fp$
    local.tee $i1$
    local.get $buf
    i32.store offset=0 align=4
    local.get $fp$
    i32.const 4
    i32.add
    local.tee $i2$
    local.get $nbyte
    i32.store offset=0 align=4
    local.get $fd
    local.get $fp$
    i32.const 1
    local.get $offset
    local.get $fp$
    i32.const 8
    i32.add
    call $wasi_snapshot_preview1:fd_pread
    local.tee $err
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $err
    i32.const 65535
    i32.and
    i32.const 76
    i32.eq
    if (result i32)
    local.get $fd
    local.get $fp$
    i32.const 16
    i32.add
    call $wasi_snapshot_preview1:fd_fdstat_get
    i32.const 0
    i32.eq
    else
    i32.const 0
    end
    if
    local.get $fp$
    i64.load offset=24 align=8
    i64.const 2
    i64.and
    i32.const 0
    i64.extend_i32_s
    i64.eq
    if
    i32.const 8
    i32.const 65535
    i32.and
    local.set $err
    else
    i32.const 70
    i32.const 65535
    i32.and
    local.set $err
    end
    end
    local.get $err
    i32.const 65535
    i32.and
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    return
    end
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $fp$
    i32.load offset=8 align=4
    return
  )
  (func $unistd:pwrite (export "pwrite")
    (param $fd i32) (param $buf i32) (param $nbyte i32) (param $offset i64) (result i32) 
    (local $err i32) (local $fp$ i32) (local $i1$ i32) (local $i2$ i32) 
    global.get $env:__stack_pointer
    global.get $env:__stack_pointer
    i32.const 48
    i32.sub
    global.set $env:__stack_pointer
    local.set $fp$
    local.get $offset
    i32.const 0
    i64.extend_i32_s
    i64.lt_s
    if
    i32.const 28
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    return
    end
    local.get $fp$
    local.tee $i1$
    local.get $buf
    i32.store offset=0 align=4
    local.get $fp$
    i32.const 4
    i32.add
    local.tee $i2$
    local.get $nbyte
    i32.store offset=0 align=4
    local.get $fd
    local.get $fp$
    i32.const 1
    local.get $offset
    local.get $fp$
    i32.const 8
    i32.add
    call $wasi_snapshot_preview1:fd_pwrite
    local.tee $err
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $err
    i32.const 65535
    i32.and
    i32.const 76
    i32.eq
    if (result i32)
    local.get $fd
    local.get $fp$
    i32.const 16
    i32.add
    call $wasi_snapshot_preview1:fd_fdstat_get
    i32.const 0
    i32.eq
    else
    i32.const 0
    end
    if
    local.get $fp$
    i64.load offset=24 align=8
    i64.const 64
    i64.and
    i32.const 0
    i64.extend_i32_s
    i64.eq
    if
    i32.const 8
    i32.const 65535
    i32.and
    local.set $err
    else
    i32.const 70
    i32.const 65535
    i32.and
    local.set $err
    end
    end
    local.get $err
    i32.const 65535
    i32.and
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    return
    end
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $fp$
    i32.load offset=8 align=4
    return
  )
  (func $unistd:lseek (export "lseek")
    (param $fd i32) (param $offset i64) (param $whence i32) (result i64) 
    (local $err i32) (local $fp$ i32) 
    global.get $env:__stack_pointer
    global.get $env:__stack_pointer
    i32.const 16
    i32.sub
    global.set $env:__stack_pointer
    local.set $fp$
    local.get $fd
    local.get $offset
    local.get $whence
    i32.const 255
    i32.and
    local.get $fp$
    call $wasi_snapshot_preview1:fd_seek
    local.tee $err
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $err
    i32.const 65535
    i32.and
    i32.const 76
    i32.eq
    if (result i32)
    i32.const 70
    else
    local.get $err
    i32.const 65535
    i32.and
    end
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    i64.extend_i32_s
    return
    end
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $fp$
    i64.load offset=0 align=8
    return
  )
  (func $unistd:ftruncate (export "ftruncate")
    (param $fd i32) (param $length i64) (result i32) 
    (local $sz i64) (local $err i32) 
    local.get $length
    local.set $sz
    local.get $length
    i32.const 0
    i64.extend_i32_s
    i64.lt_s
    if
    i32.const 28
    global.set $errno:errno
    i32.const -1
    return
    end
    local.get $fd
    local.get $sz
    call $wasi_snapshot_preview1:fd_filestat_set_size
    local.tee $err
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $err
    i32.const 65535
    i32.and
    global.set $errno:errno
    i32.const -1
    return
    end
    i32.const 0
    return
  )
  (func $unistd:close (export "close")
    (param $fd i32) (result i32) 
    (local $err i32) 
    local.get $fd
    call $wasi_snapshot_preview1:fd_close
    local.tee $err
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $err
    i32.const 65535
    i32.and
    global.set $errno:errno
    i32.const -1
    return
    end
    i32.const 0
    return
  )
  (func $unistd:isatty (export "isatty")
    (param $fd i32) (result i32) 
    (local $r i32) (local $fp$ i32) 
    global.get $env:__stack_pointer
    global.get $env:__stack_pointer
    i32.const 32
    i32.sub
    global.set $env:__stack_pointer
    local.set $fp$
    local.get $fd
    local.get $fp$
    call $wasi_snapshot_preview1:fd_fdstat_get
    local.tee $r
    i32.const 0
    i32.ne
    if
    local.get $r
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const 0
    return
    end
    local.get $fp$
    i32.load8_u offset=0 align=1
    i32.const 2
    i32.ne
    if (result i32)
    i32.const 1
    else
    local.get $fp$
    i64.load offset=8 align=8
    i64.const 36
    i64.and
    i32.const 0
    i64.extend_i32_s
    i64.ne
    end
    if
    i32.const 59
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const 0
    return
    end
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const 1
    return
  )
  (func $unistd:sbrk (export "sbrk")
    (param $inc i32) (result i32) 
    (local $new i32) (local $old i32) 
    local.get $inc
    i32.const 0
    i32.ge_s
    if (result i32)
    local.get $inc
    i32.const 65535
    i32.and
    i32.const 0
    i32.eq
    else
    i32.const 0
    end
    if
    i32.const 0
    drop
    else
    unreachable
    end
    local.get $inc
    i32.eqz
    if
    memory.size
    i32.const 16
    i32.shl
    return
    end
    local.get $inc
    i32.const 16
    i32.shr_u
    local.set $new
    i32.const 0
    local.get $new
    memory.grow
    local.tee $old
    i32.const -1
    i32.eq
    if
    i32.const 48
    global.set $errno:errno
    i32.const -1
    return
    end
    local.get $old
    i32.const 16
    i32.shl
    return
  )
  (func $unistd:faccessat (export "faccessat")
    (param $fd i32) (param $path i32) (param $amode i32) (param $atflag i32) (result i32) 
    (local $lookup_flags i32) (local $error i32) (local $min i64) (local $fp$ i32) 
    global.get $env:__stack_pointer
    global.get $env:__stack_pointer
    i32.const 96
    i32.sub
    global.set $env:__stack_pointer
    local.set $fp$
    local.get $amode
    i32.const -8
    i32.and
    i32.const 0
    i32.ne
    if (result i32)
    i32.const 1
    else
    local.get $atflag
    i32.const -1
    i32.and
    i32.const 0
    i32.ne
    end
    if
    i32.const 28
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    return
    end
    i32.const 1
    local.set $lookup_flags
    local.get $fd
    local.get $lookup_flags
    local.get $path
    local.get $path
    call $string:strlen
    local.get $fp$
    call $wasi_snapshot_preview1:path_filestat_get
    local.tee $error
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $error
    i32.const 65535
    i32.and
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    return
    end
    local.get $amode
    i32.const 0
    i32.ne
    if
    local.get $fd
    local.get $fp$
    i32.const 64
    i32.add
    call $wasi_snapshot_preview1:fd_fdstat_get
    local.tee $error
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $error
    i32.const 65535
    i32.and
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    return
    end
    i32.const 0
    i64.extend_i32_s
    local.set $min
    local.get $amode
    i32.const 4
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $min
    i64.const 16384
    i64.const 2
    local.get $fp$
    i32.load8_u offset=16 align=1
    i32.const 3
    i32.eq
    select
    i64.or
    local.set $min
    end
    local.get $amode
    i32.const 2
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $min
    i64.const 64
    i64.or
    local.set $min
    end
    local.get $min
    local.get $fp$
    i64.load offset=80 align=8
    i64.and
    local.get $min
    i64.ne
    if
    i32.const 2
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    return
    end
    end
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const 0
    return
  )
  (func $unistd:access (export "access")
    (param $path i32) (param $amode i32) (result i32) 
    (local $dirfd i32) (local $fp$ i32) 
    global.get $env:__stack_pointer
    global.get $env:__stack_pointer
    i32.const 16
    i32.sub
    global.set $env:__stack_pointer
    local.set $fp$
    local.get $path
    local.get $fp$
    call $fcntl:find_relpath
    local.tee $dirfd
    i32.const -1
    i32.eq
    if
    i32.const 76
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    return
    end
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $dirfd
    local.get $fp$
    i32.load offset=0 align=4
    local.get $amode
    i32.const 0
    call $unistd:faccessat
    return
  )
  (func $unistd:unlinkat (export "unlinkat")
    (param $fd i32) (param $path i32) (param $atflag i32) (result i32) 
    (local $error i32) 
    local.get $atflag
    i32.const 4
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $fd
    local.get $path
    local.get $path
    call $string:strlen
    call $wasi_snapshot_preview1:path_remove_directory
    local.set $error
    else
    local.get $fd
    local.get $path
    local.get $path
    call $string:strlen
    call $wasi_snapshot_preview1:path_unlink_file
    local.set $error
    end
    local.get $error
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $error
    i32.const 65535
    i32.and
    global.set $errno:errno
    i32.const -1
    return
    end
    i32.const 0
    return
  )
  (func $unistd:unlink (export "unlink")
    (param $path i32) (result i32) 
    (local $dirfd i32) (local $fp$ i32) 
    global.get $env:__stack_pointer
    global.get $env:__stack_pointer
    i32.const 16
    i32.sub
    global.set $env:__stack_pointer
    local.set $fp$
    local.get $path
    local.get $fp$
    call $fcntl:find_relpath
    local.tee $dirfd
    i32.const -1
    i32.eq
    if
    i32.const 76
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    return
    end
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $dirfd
    local.get $fp$
    i32.load offset=0 align=4
    i32.const 0
    call $unistd:unlinkat
    return
  )
  (func $unistd:linkat (export "linkat")
    (param $oldfd i32) (param $oldpath i32) (param $newfd i32) (param $newpath i32) (param $atflag i32) (result i32) 
    (local $lookup_flags i32) (local $error i32) 
    i32.const 0
    local.set $lookup_flags
    local.get $atflag
    i32.const 2
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $lookup_flags
    i32.const 1
    i32.or
    local.set $lookup_flags
    end
    local.get $oldfd
    local.get $lookup_flags
    local.get $oldpath
    local.get $oldpath
    call $string:strlen
    local.get $newfd
    local.get $newpath
    local.get $newpath
    call $string:strlen
    call $wasi_snapshot_preview1:path_link
    local.tee $error
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $error
    i32.const 65535
    i32.and
    global.set $errno:errno
    i32.const -1
    return
    end
    i32.const 0
    return
  )
  (func $unistd:link (export "link")
    (param $oldpath i32) (param $newpath i32) (result i32) 
    (local $olddirfd i32) (local $newdirfd i32) (local $fp$ i32) 
    global.get $env:__stack_pointer
    global.get $env:__stack_pointer
    i32.const 16
    i32.sub
    global.set $env:__stack_pointer
    local.set $fp$
    local.get $oldpath
    local.get $fp$
    call $fcntl:find_relpath
    local.tee $olddirfd
    i32.const -1
    i32.ne
    if
    local.get $newpath
    local.get $fp$
    i32.const 4
    i32.add
    call $fcntl:find_relpath
    local.tee $newdirfd
    i32.const -1
    i32.ne
    if
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $olddirfd
    local.get $fp$
    i32.load offset=0 align=4
    local.get $newdirfd
    local.get $fp$
    i32.load offset=4 align=4
    i32.const 0
    call $unistd:linkat
    return
    end
    end
    i32.const 76
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    return
  )
  (func $unistd:symlinkat (export "symlinkat")
    (param $tgtpath i32) (param $fd i32) (param $lnkpath i32) (result i32) 
    (local $error i32) 
    local.get $tgtpath
    local.get $tgtpath
    call $string:strlen
    local.get $fd
    local.get $lnkpath
    local.get $lnkpath
    call $string:strlen
    call $wasi_snapshot_preview1:path_symlink
    local.tee $error
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $error
    i32.const 65535
    i32.and
    global.set $errno:errno
    i32.const -1
    return
    end
    i32.const 0
    return
  )
  (func $unistd:symlink (export "symlink")
    (param $tgtpath i32) (param $lnkpath i32) (result i32) 
    (local $dirfd i32) (local $fp$ i32) 
    global.get $env:__stack_pointer
    global.get $env:__stack_pointer
    i32.const 16
    i32.sub
    global.set $env:__stack_pointer
    local.set $fp$
    local.get $lnkpath
    local.get $fp$
    call $fcntl:find_relpath
    local.tee $dirfd
    i32.const -1
    i32.eq
    if
    i32.const 76
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    return
    end
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $tgtpath
    local.get $dirfd
    local.get $fp$
    i32.load offset=0 align=4
    call $unistd:symlinkat
    return
  )
  (func $unistd:readlinkat (export "readlinkat")
    (param $fd i32) (param $path i32) (param $buf i32) (param $bufsize i32) (result i32) 
    (local $error i32) (local $fp$ i32) 
    global.get $env:__stack_pointer
    global.get $env:__stack_pointer
    i32.const 16
    i32.sub
    global.set $env:__stack_pointer
    local.set $fp$
    local.get $fd
    local.get $path
    local.get $path
    call $string:strlen
    local.get $buf
    local.get $bufsize
    local.get $fp$
    call $wasi_snapshot_preview1:path_readlink
    local.tee $error
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $error
    i32.const 65535
    i32.and
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    return
    end
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $fp$
    i32.load offset=0 align=4
    return
  )
  (func $unistd:readlink (export "readlink")
    (param $path i32) (param $buf i32) (param $bufsize i32) (result i32) 
    (local $dirfd i32) (local $fp$ i32) 
    global.get $env:__stack_pointer
    global.get $env:__stack_pointer
    i32.const 16
    i32.sub
    global.set $env:__stack_pointer
    local.set $fp$
    local.get $path
    local.get $fp$
    call $fcntl:find_relpath
    local.tee $dirfd
    i32.const -1
    i32.eq
    if
    i32.const 76
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    return
    end
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $dirfd
    local.get $fp$
    i32.load offset=0 align=4
    local.get $buf
    local.get $bufsize
    call $unistd:readlinkat
    return
  )
  (func $unistd:fdatasync (export "fdatasync")
    (param $fd i32) (result i32) 
    (local $error i32) 
    local.get $fd
    call $wasi_snapshot_preview1:fd_datasync
    local.tee $error
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $error
    i32.const 65535
    i32.and
    i32.const 76
    i32.eq
    if (result i32)
    i32.const 8
    else
    local.get $error
    i32.const 65535
    i32.and
    end
    global.set $errno:errno
    i32.const -1
    return
    end
    i32.const 0
    return
  )
  (func $unistd:fsync (export "fsync")
    (param $fd i32) (result i32) 
    (local $error i32) 
    local.get $fd
    call $wasi_snapshot_preview1:fd_sync
    local.tee $error
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $error
    i32.const 65535
    i32.and
    i32.const 76
    i32.eq
    if (result i32)
    i32.const 28
    else
    local.get $error
    i32.const 65535
    i32.and
    end
    global.set $errno:errno
    i32.const -1
    return
    end
    i32.const 0
    return
  )
  (func $unistd:_exit (export "_exit")
    (param $status i32) 
    local.get $status
    call $wasi_snapshot_preview1:proc_exit
  )
)
