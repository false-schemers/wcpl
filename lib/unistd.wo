(module $unistd
  (import "env" "__stack_pointer" (global $env:__stack_pointer (mut i32)))
  (import "env" "__linear_memory" (memory $env:__linear_memory 0))
  (import "wasi_snapshot_preview1" "fd_read" (func $wasi_snapshot_preview1:fd_read (param i32) (param i32) (param i32) (param i32) (result i32)))
  (import "wasi_snapshot_preview1" "fd_write" (func $wasi_snapshot_preview1:fd_write (param i32) (param i32) (param i32) (param i32) (result i32)))
  (import "wasi_snapshot_preview1" "fd_close" (func $wasi_snapshot_preview1:fd_close (param i32) (result i32)))
  (import "wasi_snapshot_preview1" "fd_fdstat_get" (func $wasi_snapshot_preview1:fd_fdstat_get (param i32) (param i32) (result i32)))
  (import "wasi_snapshot_preview1" "fd_filestat_set_size" (func $wasi_snapshot_preview1:fd_filestat_set_size (param i32) (param i64) (result i32)))
  (import "wasi_snapshot_preview1" "fd_pread" (func $wasi_snapshot_preview1:fd_pread (param i32) (param i32) (param i32) (param i64) (param i32) (result i32)))
  (import "wasi_snapshot_preview1" "fd_pwrite" (func $wasi_snapshot_preview1:fd_pwrite (param i32) (param i32) (param i32) (param i64) (param i32) (result i32)))
  (import "wasi_snapshot_preview1" "fd_seek" (func $wasi_snapshot_preview1:fd_seek (param i32) (param i64) (param i32) (param i32) (result i32)))
  (import "errno" "errno" (global $errno:errno i32))
  (func $unistd:read (export "read")
    (param $fd i32) (param $buf i32) (param $nbyte i32) (result i32) 
    (local $err i32) (local $fp$ i32) (local $i1$ i32) (local $i2$ i32) 
    global.get $env:__stack_pointer
    global.get $env:__stack_pointer
    i32.const 16
    i32.sub
    global.set $env:__stack_pointer
    local.tee $fp$
    local.tee $i1$
    local.get $buf
    i32.store offset=0 align=4
    local.get $i1$
    local.get $fp$
    i32.const 4
    i32.add
    local.tee $i2$
    local.get $nbyte
    i32.store offset=0 align=4
    local.get $i2$
    local.get $fd
    local.get $fp$
    i32.const 1
    local.get $fp$
    i32.const 8
    i32.add
    call $wasi_snapshot_preview1:fd_read
    local.tee $err
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $err
    i32.const 65535
    i32.and
    i32.const 76
    i32.eq
    if (result i32)
    i32.const 8
    else
    local.get $err
    i32.const 65535
    i32.and
    end
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    return
    end
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $fp$
    i32.const 8
    i32.add
    i32.load offset=0 align=4
    return
  )
  (func $unistd:write (export "write")
    (param $fd i32) (param $buf i32) (param $nbyte i32) (result i32) 
    (local $err i32) (local $fp$ i32) (local $i1$ i32) (local $i2$ i32) 
    global.get $env:__stack_pointer
    global.get $env:__stack_pointer
    i32.const 16
    i32.sub
    global.set $env:__stack_pointer
    local.tee $fp$
    local.tee $i1$
    local.get $buf
    i32.store offset=0 align=4
    local.get $i1$
    local.get $fp$
    i32.const 4
    i32.add
    local.tee $i2$
    local.get $nbyte
    i32.store offset=0 align=4
    local.get $i2$
    local.get $fd
    local.get $fp$
    i32.const 1
    local.get $fp$
    i32.const 8
    i32.add
    call $wasi_snapshot_preview1:fd_write
    local.tee $err
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $err
    i32.const 65535
    i32.and
    i32.const 76
    i32.eq
    if (result i32)
    i32.const 8
    else
    local.get $err
    i32.const 65535
    i32.and
    end
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    return
    end
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $fp$
    i32.const 8
    i32.add
    i32.load offset=0 align=4
    return
  )
  (func $unistd:pread (export "pread")
    (param $fd i32) (param $buf i32) (param $nbyte i32) (param $offset i64) (result i32) 
    (local $err i32) (local $fp$ i32) (local $i1$ i32) (local $i2$ i32) 
    global.get $env:__stack_pointer
    global.get $env:__stack_pointer
    i32.const 48
    i32.sub
    global.set $env:__stack_pointer
    local.set $fp$
    local.get $offset
    i32.const 0
    i64.extend_i32_s
    i64.lt_s
    if
    i32.const 28
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    return
    end
    local.get $fp$
    local.tee $i1$
    local.get $buf
    i32.store offset=0 align=4
    local.get $i1$
    local.get $fp$
    i32.const 4
    i32.add
    local.tee $i2$
    local.get $nbyte
    i32.store offset=0 align=4
    local.get $i2$
    local.get $fd
    local.get $fp$
    i32.const 1
    local.get $offset
    local.get $fp$
    i32.const 8
    i32.add
    call $wasi_snapshot_preview1:fd_pread
    local.tee $err
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $err
    i32.const 65535
    i32.and
    i32.const 76
    i32.eq
    if (result i32)
    local.get $fd
    local.get $fp$
    i32.const 16
    i32.add
    call $wasi_snapshot_preview1:fd_fdstat_get
    i32.const 0
    i32.eq
    else
    i32.const 0
    end
    if
    local.get $fp$
    i32.const 16
    i32.add
    i32.const 8
    i32.add
    i64.load offset=0 align=8
    i64.const 2
    i64.and
    i32.const 0
    i64.extend_i32_s
    i64.eq
    if
    i32.const 8
    i32.const 65535
    i32.and
    local.set $err
    else
    i32.const 70
    i32.const 65535
    i32.and
    local.set $err
    end
    end
    local.get $err
    i32.const 65535
    i32.and
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    return
    end
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $fp$
    i32.const 8
    i32.add
    i32.load offset=0 align=4
    return
  )
  (func $unistd:pwrite (export "pwrite")
    (param $fd i32) (param $buf i32) (param $nbyte i32) (param $offset i64) (result i32) 
    (local $err i32) (local $fp$ i32) (local $i1$ i32) (local $i2$ i32) 
    global.get $env:__stack_pointer
    global.get $env:__stack_pointer
    i32.const 48
    i32.sub
    global.set $env:__stack_pointer
    local.set $fp$
    local.get $offset
    i32.const 0
    i64.extend_i32_s
    i64.lt_s
    if
    i32.const 28
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    return
    end
    local.get $fp$
    local.tee $i1$
    local.get $buf
    i32.store offset=0 align=4
    local.get $i1$
    local.get $fp$
    i32.const 4
    i32.add
    local.tee $i2$
    local.get $nbyte
    i32.store offset=0 align=4
    local.get $i2$
    local.get $fd
    local.get $fp$
    i32.const 1
    local.get $offset
    local.get $fp$
    i32.const 8
    i32.add
    call $wasi_snapshot_preview1:fd_pwrite
    local.tee $err
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $err
    i32.const 65535
    i32.and
    i32.const 76
    i32.eq
    if (result i32)
    local.get $fd
    local.get $fp$
    i32.const 16
    i32.add
    call $wasi_snapshot_preview1:fd_fdstat_get
    i32.const 0
    i32.eq
    else
    i32.const 0
    end
    if
    local.get $fp$
    i32.const 16
    i32.add
    i32.const 8
    i32.add
    i64.load offset=0 align=8
    i64.const 64
    i64.and
    i32.const 0
    i64.extend_i32_s
    i64.eq
    if
    i32.const 8
    i32.const 65535
    i32.and
    local.set $err
    else
    i32.const 70
    i32.const 65535
    i32.and
    local.set $err
    end
    end
    local.get $err
    i32.const 65535
    i32.and
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    return
    end
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $fp$
    i32.const 8
    i32.add
    i32.load offset=0 align=4
    return
  )
  (func $unistd:lseek (export "lseek")
    (param $fd i32) (param $offset i64) (param $whence i32) (result i64) 
    (local $err i32) (local $fp$ i32) 
    global.get $env:__stack_pointer
    global.get $env:__stack_pointer
    i32.const 16
    i32.sub
    global.set $env:__stack_pointer
    local.set $fp$
    local.get $fd
    local.get $offset
    local.get $whence
    i32.const 255
    i32.and
    local.get $fp$
    call $wasi_snapshot_preview1:fd_seek
    local.tee $err
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $err
    i32.const 65535
    i32.and
    i32.const 76
    i32.eq
    if (result i32)
    i32.const 70
    else
    local.get $err
    i32.const 65535
    i32.and
    end
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const -1
    i64.extend_i32_s
    return
    end
    local.get $fp$
    global.set $env:__stack_pointer
    local.get $fp$
    i64.load offset=0 align=8
    return
  )
  (func $unistd:ftruncate (export "ftruncate")
    (param $fd i32) (param $length i64) (result i32) 
    (local $sz i64) (local $err i32) 
    local.get $length
    local.set $sz
    local.get $length
    i32.const 0
    i64.extend_i32_s
    i64.lt_s
    if
    i32.const 28
    global.set $errno:errno
    i32.const -1
    return
    end
    local.get $fd
    local.get $sz
    call $wasi_snapshot_preview1:fd_filestat_set_size
    local.tee $err
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $err
    i32.const 65535
    i32.and
    global.set $errno:errno
    i32.const -1
    return
    end
    i32.const 0
    return
  )
  (func $unistd:close (export "close")
    (param $fd i32) (result i32) 
    (local $err i32) 
    local.get $fd
    call $wasi_snapshot_preview1:fd_close
    local.tee $err
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    if
    local.get $err
    i32.const 65535
    i32.and
    global.set $errno:errno
    i32.const -1
    return
    end
    i32.const 0
    return
  )
  (func $unistd:isatty (export "isatty")
    (param $fd i32) (result i32) 
    (local $r i32) (local $fp$ i32) 
    global.get $env:__stack_pointer
    global.get $env:__stack_pointer
    i32.const 32
    i32.sub
    global.set $env:__stack_pointer
    local.set $fp$
    local.get $fd
    local.get $fp$
    call $wasi_snapshot_preview1:fd_fdstat_get
    local.tee $r
    i32.const 0
    i32.ne
    if
    local.get $r
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const 0
    return
    end
    local.get $fp$
    i32.load8_u offset=0 align=1
    i32.const 2
    i32.ne
    if (result i32)
    i32.const 1
    else
    local.get $fp$
    i32.const 8
    i32.add
    i64.load offset=0 align=8
    i64.const 36
    i64.and
    i32.const 0
    i64.extend_i32_s
    i64.ne
    end
    if
    i32.const 59
    global.set $errno:errno
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const 0
    return
    end
    local.get $fp$
    global.set $env:__stack_pointer
    i32.const 1
    return
  )
  (func $unistd:sbrk (export "sbrk")
    (param $inc i32) (result i32) 
    (local $new i32) (local $old i32) 
    local.get $inc
    i32.const 0
    i32.ge_s
    if (result i32)
    local.get $inc
    i32.const 65535
    i32.and
    i32.const 0
    i32.eq
    else
    i32.const 0
    end
    if
    i32.const 0
    drop
    else
    unreachable
    end
    local.get $inc
    i32.eqz
    if
    memory.size
    i32.const 16
    i32.shl
    return
    end
    local.get $inc
    i32.const 16
    i32.shr_u
    local.set $new
    i32.const 0
    local.get $new
    memory.grow
    local.tee $old
    i32.const -1
    i32.eq
    if
    i32.const 48
    global.set $errno:errno
    i32.const -1
    return
    end
    local.get $old
    i32.const 16
    i32.shl
    return
  )
)
