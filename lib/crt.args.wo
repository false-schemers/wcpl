(module $crt
  (import "wasi_snapshot_preview1" "fd_write" (func $wasi_snapshot_preview1:fd_write (param i32) (param i32) (param i32) (param i32) (result i32)))
  (import "wasi_snapshot_preview1" "args_get" (func $wasi_snapshot_preview1:args_get (param i32) (param i32) (result i32)))
  (import "wasi_snapshot_preview1" "args_sizes_get" (func $wasi_snapshot_preview1:args_sizes_get (param i32) (param i32) (result i32)))
  (import "wasi_snapshot_preview1" "proc_exit" (func $wasi_snapshot_preview1:proc_exit (param i32)))
  (memory $crt:__linear_memory (export "__linear_memory") 2)
  (global $crt:_argv (export "_argv") (mut i32) (i32.const 0))
  (global $crt:_argc (export "_argc") (mut i32) (i32.const 0))
  (global $crt:onterm_count (export "onterm_count") (mut i32) (i32.const 0))
  (global $crt:__stack_pointer (export "__stack_pointer") (mut i32) (i32.const 4242))
  (global $crt:__stack_base (export "__stack_base") i32 (i32.const 4242))
  (global $crt:__heap_base (export "__heap_base") i32 (i32.const 4242))
  (data $crt:empty_argv var align=4 size=8
    (ref.data $crt:ds5$
     data.put_ref offset=0))
  (data $crt:ds5$ const align=1 size=1)
  (data $crt:ds6$ const align=1 "internal error: unable to retrieve command-line arguments\n\00")
  (data $crt:onterm_funcs (export "onterm_funcs") var align=4 size=128)
  (func $crt:initialize (export "initialize")
    (local $error i32) (local $num_ptrs i32) (local $args_buf i32) (local $ptrs_buf i32) (local $n i32) (local $ptrs_end i32) (local $args_ptrs i32) (local $bp$ i32) (local $fp$ i32) (local $i1$ i32) (local $i2$ i32) (local $i3$ i32) 
    global.get $crt:__stack_pointer
    local.set $bp$
    global.get $crt:__stack_pointer
    i32.const 32
    i32.sub
    global.set $crt:__stack_pointer
    global.get $crt:__stack_pointer
    local.set $fp$
    global.get $crt:_argv
    i32.const 0
    i32.ne
    if
    local.get $bp$
    global.set $crt:__stack_pointer
    return
    else
    block $err
    local.get $fp$
    local.get $fp$
    i32.const 4
    i32.add
    call $wasi_snapshot_preview1:args_sizes_get
    local.tee $error
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    br_if $err
    local.get $fp$
    i32.load offset=0 align=4
    i32.const 0
    i32.eq
    br_if $err
    local.get $fp$
    i32.load offset=0 align=4
    i32.const 1
    i32.add
    local.tee $num_ptrs
    i32.const 0
    i32.eq
    br_if $err
    global.get $crt:__stack_base
    local.tee $args_buf
    local.get $fp$
    i32.load offset=4 align=4
    i32.add
    local.tee $ptrs_buf
    i32.const 16
    i32.rem_u
    local.tee $n
    i32.const 0
    i32.gt_u
    if
    local.get $ptrs_buf
    i32.const 16
    local.get $n
    i32.sub
    i32.add
    local.set $ptrs_buf
    end
    local.get $ptrs_buf
    local.get $num_ptrs
    i32.const 4
    i32.mul
    i32.add
    local.tee $ptrs_end
    global.get $crt:__heap_base
    i32.gt_u
    br_if $err
    local.get $ptrs_buf
    local.tee $args_ptrs
    local.get $args_buf
    call $wasi_snapshot_preview1:args_get
    local.tee $error
    i32.const 65535
    i32.and
    i32.const 0
    i32.ne
    br_if $err
    local.get $args_ptrs
    local.get $fp$
    i32.load offset=0 align=4
    i32.const 4
    i32.mul
    i32.add
    local.tee $i1$
    i32.const 0
    i32.store offset=0 align=4
    local.get $args_ptrs
    global.set $crt:_argv
    local.get $fp$
    i32.load offset=0 align=4
    global.set $crt:_argc
    local.get $bp$
    global.set $crt:__stack_pointer
    return
    end $err
    end
    local.get $fp$
    i32.const 8
    i32.add
    local.tee $i2$
    ref.data $crt:ds6$
    i32.store offset=0 align=4
    local.get $fp$
    i32.const 8
    i32.add
    i32.const 4
    i32.add
    local.tee $i3$
    i32.const 58
    i32.store offset=0 align=4
    i32.const 2
    local.get $fp$
    i32.const 8
    i32.add
    i32.const 1
    local.get $fp$
    i32.const 16
    i32.add
    call $wasi_snapshot_preview1:fd_write
    drop
    ref.data $crt:empty_argv
    global.set $crt:_argv
    i32.const 1
    global.set $crt:_argc
    local.get $bp$
    global.set $crt:__stack_pointer
    return
  )
  (func $crt:terminate (export "terminate")
    (param $status i32) 
    (local $fn i32) 
    block $1$
    loop $2$
    global.get $crt:onterm_count
    i32.const 0
    i32.gt_u
    if
    ref.data $crt:onterm_funcs
    global.get $crt:onterm_count
    i32.const 1
    i32.sub
    global.set $crt:onterm_count
    global.get $crt:onterm_count
    i32.const 4
    i32.mul
    i32.add
    i32.load offset=0 align=4
    local.tee $fn
    call_indirect (param) (result)
    br $2$
    end
    end $2$
    end $1$
    local.get $status
    call $wasi_snapshot_preview1:proc_exit
    return
  )
)
