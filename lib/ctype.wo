(module $ctype
  (import "crt" "sp$" (global $crt:sp$ (mut i32)))
  (import "crt" "memory" (memory $crt:memory 0))
  (func $ctype:isalnum (export "isalnum")
    (param $c i32) (result i32) 
    local.get $c
    call $ctype:isalpha
    if (result i32)
    i32.const 1
    else
    local.get $c
    call $ctype:isdigit
    end
    return
  )
  (func $ctype:isalpha (export "isalpha")
    (param $c i32) (result i32) 
    local.get $c
    call $ctype:islower
    if (result i32)
    i32.const 1
    else
    local.get $c
    call $ctype:isupper
    end
    return
  )
  (func $ctype:iscntrl (export "iscntrl")
    (param $c i32) (result i32) 
    local.get $c
    call $ctype:isprint
    i32.eqz
    return
  )
  (func $ctype:isdigit (export "isdigit")
    (param $c i32) (result i32) 
    local.get $c
    i32.const 48
    i32.sub
    i32.const 9
    i32.le_u
    return
  )
  (func $ctype:isgraph (export "isgraph")
    (param $c i32) (result i32) 
    local.get $c
    call $ctype:isprint
    if (result i32)
    local.get $c
    call $ctype:isspace
    i32.eqz
    else
    i32.const 0
    end
    return
  )
  (func $ctype:islower (export "islower")
    (param $c i32) (result i32) 
    local.get $c
    i32.const 97
    i32.ge_s
    if (result i32)
    local.get $c
    i32.const 122
    i32.le_s
    else
    i32.const 0
    end
    return
  )
  (func $ctype:isprint (export "isprint")
    (param $c i32) (result i32) 
    local.get $c
    i32.const 32
    i32.ge_s
    if (result i32)
    local.get $c
    i32.const 126
    i32.le_s
    else
    i32.const 0
    end
    return
  )
  (func $ctype:ispunct (export "ispunct")
    (param $c i32) (result i32) 
    local.get $c
    call $ctype:isprint
    if (result i32)
    local.get $c
    call $ctype:isalnum
    i32.eqz
    else
    i32.const 0
    end
    if (result i32)
    local.get $c
    call $ctype:isspace
    i32.eqz
    else
    i32.const 0
    end
    return
  )
  (func $ctype:isspace (export "isspace")
    (param $c i32) (result i32) 
    local.get $c
    i32.const 32
    i32.eq
    if (result i32)
    i32.const 1
    else
    local.get $c
    i32.const 10
    i32.eq
    end
    if (result i32)
    i32.const 1
    else
    local.get $c
    i32.const 9
    i32.eq
    end
    if (result i32)
    i32.const 1
    else
    local.get $c
    i32.const 13
    i32.eq
    end
    return
  )
  (func $ctype:isupper (export "isupper")
    (param $c i32) (result i32) 
    local.get $c
    i32.const 65
    i32.ge_s
    if (result i32)
    local.get $c
    i32.const 90
    i32.le_s
    else
    i32.const 0
    end
    return
  )
  (func $ctype:isxdigit (export "isxdigit")
    (param $c i32) (result i32) 
    local.get $c
    call $ctype:isdigit
    if (result i32)
    i32.const 1
    else
    local.get $c
    i32.const 97
    i32.ge_s
    if (result i32)
    local.get $c
    i32.const 102
    i32.le_s
    else
    i32.const 0
    end
    end
    if (result i32)
    i32.const 1
    else
    local.get $c
    i32.const 65
    i32.ge_s
    if (result i32)
    local.get $c
    i32.const 70
    i32.le_s
    else
    i32.const 0
    end
    end
    return
  )
  (func $ctype:isascii (export "isascii")
    (param $c i32) (result i32) 
    local.get $c
    i32.const -128
    i32.and
    i32.eqz
    return
  )
  (func $ctype:isblank (export "isblank")
    (param $c i32) (result i32) 
    local.get $c
    i32.const 9
    i32.eq
    if (result i32)
    i32.const 1
    else
    local.get $c
    i32.const 32
    i32.eq
    end
    return
  )
  (func $ctype:toupper (export "toupper")
    (param $c i32) (result i32) 
    local.get $c
    call $ctype:islower
    if (result i32)
    local.get $c
    i32.const -33
    i32.and
    else
    local.get $c
    end
    return
  )
  (func $ctype:tolower (export "tolower")
    (param $c i32) (result i32) 
    local.get $c
    call $ctype:isupper
    if (result i32)
    local.get $c
    i32.const 32
    i32.or
    else
    local.get $c
    end
    return
  )
)
